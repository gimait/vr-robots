/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-07-08 04:54:52.781865
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h"  // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION == 0x10000049);

#include <algorithm>
#include <cmath>
#include <complex>
#include <limits>
#include <vector>

#ifndef IKFAST_ASSERT
#include <iostream>
#include <sstream>
#include <stdexcept>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b)                                                                                               \
  {                                                                                                                    \
    if (!(b))                                                                                                          \
    {                                                                                                                  \
      std::stringstream ss;                                                                                            \
      ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " << __PRETTY_FUNCTION__ << ": Assertion '"      \
         << #b << "' failed";                                                                                          \
      throw std::runtime_error(ss.str());                                                                              \
    }                                                                                                                  \
  }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI ((IkReal)6.28318530717959)
#define IKPI ((IkReal)3.14159265358979)
#define IKPI_2 ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif  // _MSC_VER

// lapack routines
extern "C"
{
  void dgetrf_(const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_(const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_(const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb,
              int* info);
  void dgetrs_(const char* trans, const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b,
               const int* ldb, int* info);
  void dgeev_(const char* jobvl, const char* jobvr, const int* n, double* a, const int* lda, double* wr, double* wi,
              double* vl, const int* ldvl, double* vr, const int* ldvr, double* work, const int* lwork, int* info);
}

using namespace std;  // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
  return fabsf(f);
}
inline double IKabs(double f)
{
  return fabs(f);
}

inline float IKsqr(float f)
{
  return f * f;
}
inline double IKsqr(double f)
{
  return f * f;
}

inline float IKlog(float f)
{
  return logf(f);
}
inline double IKlog(double f)
{
  return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and
// evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they
// can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif

inline float IKasin(float f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is
                                                                                 // wrong with the solver
  if (f <= -1)
    return float(-IKPI_2);
  else if (f >= 1)
    return float(IKPI_2);
  return asinf(f);
}
inline double IKasin(double f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is
                                                                                 // wrong with the solver
  if (f <= -1)
    return -IKPI_2;
  else if (f >= 1)
    return IKPI_2;
  return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
  while (x < 0)
  {
    x += y;
  }
  return fmodf(x, y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
  while (x < 0)
  {
    x += y;
  }
  return fmod(x, y);
}

inline float IKacos(float f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is
                                                                                 // wrong with the solver
  if (f <= -1)
    return float(IKPI);
  else if (f >= 1)
    return float(0);
  return acosf(f);
}
inline double IKacos(double f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is
                                                                                 // wrong with the solver
  if (f <= -1)
    return IKPI;
  else if (f >= 1)
    return 0;
  return acos(f);
}
inline float IKsin(float f)
{
  return sinf(f);
}
inline double IKsin(double f)
{
  return sin(f);
}
inline float IKcos(float f)
{
  return cosf(f);
}
inline double IKcos(double f)
{
  return cos(f);
}
inline float IKtan(float f)
{
  return tanf(f);
}
inline double IKtan(double f)
{
  return tan(f);
}
inline float IKsqrt(float f)
{
  if (f <= 0.0f)
    return 0.0f;
  return sqrtf(f);
}
inline double IKsqrt(double f)
{
  if (f <= 0.0)
    return 0.0;
  return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
  return atan2f(fy, fx);
}
inline float IKatan2(float fy, float fx)
{
  if (isnan(fy))
  {
    IKFAST_ASSERT(!isnan(fx));  // if both are nan, probably wrong value will be returned
    return float(IKPI_2);
  }
  else if (isnan(fx))
  {
    return 0;
  }
  return atan2f(fy, fx);
}
inline double IKatan2Simple(double fy, double fx)
{
  return atan2(fy, fx);
}
inline double IKatan2(double fy, double fx)
{
  if (isnan(fy))
  {
    IKFAST_ASSERT(!isnan(fx));  // if both are nan, probably wrong value will be returned
    return IKPI_2;
  }
  else if (isnan(fx))
  {
    return 0;
  }
  return atan2(fy, fx);
}

template <typename T>
struct CheckValue
{
  T value;
  bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
  CheckValue<T> ret;
  ret.valid = false;
  ret.value = 0;
  if (!isnan(fy) && !isnan(fx))
  {
    if (IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH)
    {
      ret.value = IKatan2Simple(fy, fx);
      ret.valid = true;
    }
  }
  return ret;
}

inline float IKsign(float f)
{
  if (f > 0)
  {
    return float(1);
  }
  else if (f < 0)
  {
    return float(-1);
  }
  return 0;
}

inline double IKsign(double f)
{
  if (f > 0)
  {
    return 1.0;
  }
  else if (f < 0)
  {
    return -1.0;
  }
  return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
  CheckValue<T> ret;
  ret.valid = true;
  if (n == 0)
  {
    ret.value = 1.0;
    return ret;
  }
  else if (n == 1)
  {
    ret.value = f;
    return ret;
  }
  else if (n < 0)
  {
    if (f == 0)
    {
      ret.valid = false;
      ret.value = (T)1.0e30;
      return ret;
    }
    if (n == -1)
    {
      ret.value = T(1.0) / f;
      return ret;
    }
  }

  int num = n > 0 ? n : -n;
  if (num == 2)
  {
    ret.value = f * f;
  }
  else if (num == 3)
  {
    ret.value = f * f * f;
  }
  else
  {
    ret.value = 1.0;
    while (num > 0)
    {
      if (num & 1)
      {
        ret.value *= f;
      }
      num >>= 1;
      f *= f;
    }
  }

  if (n < 0)
  {
    ret.value = T(1.0) / ret.value;
  }
  return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
  IkReal x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23,
      x24, x25, x26;
  x0 = IKcos(j[2]);
  x1 = IKsin(j[2]);
  x2 = IKcos(j[3]);
  x3 = IKsin(j[5]);
  x4 = IKcos(j[5]);
  x5 = IKsin(j[3]);
  x6 = IKsin(j[4]);
  x7 = IKcos(j[1]);
  x8 = IKsin(j[0]);
  x9 = IKsin(j[1]);
  x10 = IKcos(j[4]);
  x11 = IKcos(j[0]);
  x12 = ((0.965928367099476) * x1);
  x13 = ((0.258809562482804) * x0);
  x14 = ((0.258817017629058) * x9);
  x15 = ((0.258817017629058) * x7);
  x16 = ((0.965926369546665) * x7);
  x17 = ((1.0) * x4);
  x18 = ((0.965926369546665) * x9);
  x19 = (x3 * x5);
  x20 = (x2 * x6);
  x21 = ((((-1.0) * x13)) + x12);
  x22 = ((((-0.258809562482804) * x1)) + (((-0.965928367099476) * x0)));
  x23 = ((((-1.0) * x17 * x5 * x6)) + ((x2 * x3)));
  x24 = (((x10 * (((((-1.0) * x12)) + x13)))) + ((x20 * x22)));
  x25 = (x24 * x4);
  x26 = (((x19 * x21)) + ((x4 * ((((x10 * x22)) + ((x20 * x21)))))));
  eetrans[0] =
      ((0.00525) +
       (((((((0.0139952105757247) * (IKcos(j[2])))) +
           (((((((0.965926369546665) *
                 (((((-0.00414095299972487) * (IKsin(j[2])))) + (((-0.0154548538735916) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKsin(j[4])))) +
               (((0.965926369546665) *
                 (((((0.00414095299972487) * (IKcos(j[2])))) + (((-0.0154548538735916) * (IKsin(j[2])))))) *
                 (IKcos(j[4])))))) *
             (IKcos(j[5])))) +
           (((((((-0.00399985569748762) * (IKsin(j[2])))) + (((-0.0149282508939926) * (IKcos(j[2])))))) *
             (IKsin(j[3])) * (IKsin(j[5])))) +
           (((((((0.128103015663446) * (IKcos(j[2])))) + (((0.0343237517044264) * (IKsin(j[2])))))) * (IKsin(j[3])))) +
           (((0.00374995798890884) * (IKsin(j[2])))) +
           (((((((0.965926369546665) *
                 (((((-1.64207822406911e-7) * (IKsin(j[2])))) + (((4.39976256220768e-8) * (IKcos(j[2])))))) *
                 (IKsin(j[4])))) +
               (((0.965926369546665) *
                 (((((4.39976256220768e-8) * (IKsin(j[2])))) + (((1.64207822406911e-7) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKcos(j[4])))))) *
             (IKcos(j[6])))) +
           (((((((0.965926369546665) *
                 (((((-0.0161755976551753) * (IKcos(j[2])))) + (((0.0603705229437172) * (IKsin(j[2])))))) *
                 (IKsin(j[4])))) +
               (((0.965926369546665) *
                 (((((-0.0161755976551753) * (IKsin(j[2])))) + (((-0.0603705229437172) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKcos(j[4])))))) *
             (IKsin(j[6])))) +
           (((((((-0.00374986471639464) * (IKsin(j[2])))) + (((-0.013995235213118) * (IKcos(j[2])))))) *
             (IKcos(j[3])))) +
           (((((((0.965926369546665) *
                 (((((-1.7e-7) * (((((0.258809562482804) * (IKsin(j[2])))) + (((0.965928367099476) * (IKcos(j[2])))))) *
                     (IKcos(j[3])) * (IKsin(j[4])))) +
                   (((-1.7e-7) *
                     (((((-0.258809562482804) * (IKcos(j[2])))) + (((0.965928367099476) * (IKsin(j[2])))))) *
                     (IKcos(j[4])))))) *
                 (IKsin(j[5])))) +
               (((0.965926369546665) *
                 (((((4.39976256220768e-8) * (IKsin(j[2])))) + (((1.64207822406911e-7) * (IKcos(j[2])))))) *
                 (IKcos(j[5])) * (IKsin(j[3])))))) *
             (IKsin(j[6])))) +
           (((((((0.965926369546665) *
                 (((((-0.0625) * (((((0.258809562482804) * (IKsin(j[2])))) + (((0.965928367099476) * (IKcos(j[2])))))) *
                     (IKcos(j[3])) * (IKsin(j[4])))) +
                   (((-0.0625) *
                     (((((-0.258809562482804) * (IKcos(j[2])))) + (((0.965928367099476) * (IKsin(j[2])))))) *
                     (IKcos(j[4])))))) *
                 (IKsin(j[5])))) +
               (((0.965926369546665) *
                 (((((0.0603705229437172) * (IKcos(j[2])))) + (((0.0161755976551753) * (IKsin(j[2])))))) *
                 (IKcos(j[5])) * (IKsin(j[3])))))) *
             (IKcos(j[6])))))) *
         (IKcos(j[0])))) +
       (((((((0.258817017629058) * (IKcos(j[1])))) + (((0.965926369546665) * (IKsin(j[0])) * (IKsin(j[1])))))) *
         (((((((((((((-1.7e-7) *
                     (((((0.258809562482804) * (IKcos(j[2])))) + (((-0.965928367099476) * (IKsin(j[2])))))) *
                     (IKcos(j[3])) * (IKsin(j[4])))) +
                   (((-1.7e-7) * (((((0.258809562482804) * (IKsin(j[2])))) + (((0.965928367099476) * (IKcos(j[2])))))) *
                     (IKcos(j[4])))))) *
                 (IKsin(j[5])))) +
               (((((((-1.64207822406911e-7) * (IKsin(j[2])))) + (((4.39976256220768e-8) * (IKcos(j[2])))))) *
                 (IKcos(j[5])) * (IKsin(j[3])))))) *
             (IKsin(j[6])))) +
           (((((((0.0154548538735916) * (IKsin(j[2])))) + (((-0.00414095299972487) * (IKcos(j[2])))))) * (IKsin(j[3])) *
             (IKsin(j[5])))) +
           (((((((((((0.0161755976551753) * (IKcos(j[2])))) + (((-0.0603705229437172) * (IKsin(j[2])))))) *
                 (IKcos(j[5])) * (IKsin(j[3])))) +
               (((((((-0.0625) * (((((0.258809562482804) * (IKsin(j[2])))) + (((0.965928367099476) * (IKcos(j[2])))))) *
                     (IKcos(j[4])))) +
                   (((-0.0625) *
                     (((((0.258809562482804) * (IKcos(j[2])))) + (((-0.965928367099476) * (IKsin(j[2])))))) *
                     (IKcos(j[3])) * (IKsin(j[4])))))) *
                 (IKsin(j[5])))))) *
             (IKcos(j[6])))) +
           (((((((((((-4.39976256220768e-8) * (IKsin(j[2])))) + (((-1.64207822406911e-7) * (IKcos(j[2])))))) *
                 (IKsin(j[4])))) +
               (((((((-1.64207822406911e-7) * (IKsin(j[2])))) + (((4.39976256220768e-8) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKcos(j[4])))))) *
             (IKcos(j[6])))) +
           (((((((((((-0.0161755976551753) * (IKcos(j[2])))) + (((0.0603705229437172) * (IKsin(j[2])))))) *
                 (IKcos(j[3])) * (IKcos(j[4])))) +
               (((((((0.0603705229437172) * (IKcos(j[2])))) + (((0.0161755976551753) * (IKsin(j[2])))))) *
                 (IKsin(j[4])))))) *
             (IKsin(j[6])))) +
           (((-0.0144889) * (IKsin(j[2])))) +
           (((((((-0.132621926165623) * (IKsin(j[2])))) + (((0.0355345425765066) * (IKcos(j[2])))))) * (IKsin(j[3])))) +
           (((((((((((-0.00414095299972487) * (IKsin(j[2])))) + (((-0.0154548538735916) * (IKcos(j[2])))))) *
                 (IKcos(j[4])))) +
               (((((((0.0154548538735916) * (IKsin(j[2])))) + (((-0.00414095299972487) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKsin(j[4])))))) *
             (IKcos(j[5])))) +
           (((((((-0.00388214343724207) * (IKcos(j[2])))) + (((0.0144889255064921) * (IKsin(j[2])))))) *
             (IKcos(j[3])))) +
           (((0.00388224) * (IKcos(j[2])))))))) +
       (((((((0.965926369546665) * (IKcos(j[1])) * (IKsin(j[0])))) + (((-0.258817017629058) * (IKsin(j[1])))))) *
         (((-0.15228) + (((-0.0625) * (IKcos(j[4])) * (IKsin(j[3])) * (IKsin(j[6])))) +
           (((-0.016) * (IKcos(j[5])) * (IKsin(j[3])) * (IKsin(j[4])))) + (((-0.13729996) * (IKcos(j[3])))) +
           (((((((-1.7e-7) * (IKsin(j[3])) * (IKsin(j[4])) * (IKsin(j[5])))) +
               (((-1.7e-7) * (IKcos(j[3])) * (IKcos(j[5])))))) *
             (IKsin(j[6])))) +
           (((1.7e-7) * (IKcos(j[4])) * (IKcos(j[6])) * (IKsin(j[3])))) + (((0.016) * (IKcos(j[3])) * (IKsin(j[5])))) +
           (((((((-0.0625) * (IKsin(j[3])) * (IKsin(j[4])) * (IKsin(j[5])))) +
               (((-0.0625) * (IKcos(j[3])) * (IKcos(j[5])))))) *
             (IKcos(j[6])))) +
           (((-0.015) * (IKsin(j[3])))))))));
  eetrans[1] =
      ((0.1433) +
       (((((((((((-1.0) * (((((-0.0161755976551753) * (IKcos(j[2])))) + (((0.0603705229437172) * (IKsin(j[2])))))) *
                 (IKsin(j[4])))) +
               (((-1.0) * (((((-0.0161755976551753) * (IKsin(j[2])))) + (((-0.0603705229437172) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKcos(j[4])))))) *
             (IKsin(j[6])))) +
           (((((((-1.0) *
                 (((((-1.7e-7) * (((((0.258809562482804) * (IKsin(j[2])))) + (((0.965928367099476) * (IKcos(j[2])))))) *
                     (IKcos(j[3])) * (IKsin(j[4])))) +
                   (((-1.7e-7) *
                     (((((-0.258809562482804) * (IKcos(j[2])))) + (((0.965928367099476) * (IKsin(j[2])))))) *
                     (IKcos(j[4])))))) *
                 (IKsin(j[5])))) +
               (((-1.0) * (((((4.39976256220768e-8) * (IKsin(j[2])))) + (((1.64207822406911e-7) * (IKcos(j[2])))))) *
                 (IKcos(j[5])) * (IKsin(j[3])))))) *
             (IKsin(j[6])))) +
           (((-0.0144889) * (IKcos(j[2])))) +
           (((((((-1.0) * (((((-0.00414095299972487) * (IKsin(j[2])))) + (((-0.0154548538735916) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKsin(j[4])))) +
               (((-1.0) * (((((0.00414095299972487) * (IKcos(j[2])))) + (((-0.0154548538735916) * (IKsin(j[2])))))) *
                 (IKcos(j[4])))))) *
             (IKcos(j[5])))) +
           (((((((0.0154548538735916) * (IKcos(j[2])))) + (((0.00414095299972487) * (IKsin(j[2])))))) * (IKsin(j[3])) *
             (IKsin(j[5])))) +
           (((((((0.0144889255064921) * (IKcos(j[2])))) + (((0.00388214343724207) * (IKsin(j[2])))))) *
             (IKcos(j[3])))) +
           (((-0.00388224) * (IKsin(j[2])))) +
           (((((((-0.0355345425765066) * (IKsin(j[2])))) + (((-0.132621926165623) * (IKcos(j[2])))))) *
             (IKsin(j[3])))) +
           (((((((-1.0) * (((((0.0603705229437172) * (IKcos(j[2])))) + (((0.0161755976551753) * (IKsin(j[2])))))) *
                 (IKcos(j[5])) * (IKsin(j[3])))) +
               (((-1.0) *
                 (((((-0.0625) * (((((0.258809562482804) * (IKsin(j[2])))) + (((0.965928367099476) * (IKcos(j[2])))))) *
                     (IKcos(j[3])) * (IKsin(j[4])))) +
                   (((-0.0625) *
                     (((((-0.258809562482804) * (IKcos(j[2])))) + (((0.965928367099476) * (IKsin(j[2])))))) *
                     (IKcos(j[4])))))) *
                 (IKsin(j[5])))))) *
             (IKcos(j[6])))) +
           (((((((-1.0) * (((((4.39976256220768e-8) * (IKsin(j[2])))) + (((1.64207822406911e-7) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKcos(j[4])))) +
               (((-1.0) * (((((-1.64207822406911e-7) * (IKsin(j[2])))) + (((4.39976256220768e-8) * (IKcos(j[2])))))) *
                 (IKsin(j[4])))))) *
             (IKcos(j[6])))))) *
         (IKsin(j[0])))) +
       (((((-0.15228) + (((-0.0625) * (IKcos(j[4])) * (IKsin(j[3])) * (IKsin(j[6])))) +
           (((-0.016) * (IKcos(j[5])) * (IKsin(j[3])) * (IKsin(j[4])))) + (((-0.13729996) * (IKcos(j[3])))) +
           (((((((-1.7e-7) * (IKsin(j[3])) * (IKsin(j[4])) * (IKsin(j[5])))) +
               (((-1.7e-7) * (IKcos(j[3])) * (IKcos(j[5])))))) *
             (IKsin(j[6])))) +
           (((1.7e-7) * (IKcos(j[4])) * (IKcos(j[6])) * (IKsin(j[3])))) + (((0.016) * (IKcos(j[3])) * (IKsin(j[5])))) +
           (((((((-0.0625) * (IKsin(j[3])) * (IKsin(j[4])) * (IKsin(j[5])))) +
               (((-0.0625) * (IKcos(j[3])) * (IKcos(j[5])))))) *
             (IKcos(j[6])))) +
           (((-0.015) * (IKsin(j[3])))))) *
         (IKcos(j[0])) * (IKcos(j[1])))) +
       (((((((((((((((-1.7e-7) *
                     (((((0.258809562482804) * (IKcos(j[2])))) + (((-0.965928367099476) * (IKsin(j[2])))))) *
                     (IKcos(j[3])) * (IKsin(j[4])))) +
                   (((-1.7e-7) * (((((0.258809562482804) * (IKsin(j[2])))) + (((0.965928367099476) * (IKcos(j[2])))))) *
                     (IKcos(j[4])))))) *
                 (IKsin(j[5])))) +
               (((((((-1.64207822406911e-7) * (IKsin(j[2])))) + (((4.39976256220768e-8) * (IKcos(j[2])))))) *
                 (IKcos(j[5])) * (IKsin(j[3])))))) *
             (IKsin(j[6])))) +
           (((((((0.0154548538735916) * (IKsin(j[2])))) + (((-0.00414095299972487) * (IKcos(j[2])))))) * (IKsin(j[3])) *
             (IKsin(j[5])))) +
           (((((((((((0.0161755976551753) * (IKcos(j[2])))) + (((-0.0603705229437172) * (IKsin(j[2])))))) *
                 (IKcos(j[5])) * (IKsin(j[3])))) +
               (((((((-0.0625) * (((((0.258809562482804) * (IKsin(j[2])))) + (((0.965928367099476) * (IKcos(j[2])))))) *
                     (IKcos(j[4])))) +
                   (((-0.0625) *
                     (((((0.258809562482804) * (IKcos(j[2])))) + (((-0.965928367099476) * (IKsin(j[2])))))) *
                     (IKcos(j[3])) * (IKsin(j[4])))))) *
                 (IKsin(j[5])))))) *
             (IKcos(j[6])))) +
           (((((((((((-4.39976256220768e-8) * (IKsin(j[2])))) + (((-1.64207822406911e-7) * (IKcos(j[2])))))) *
                 (IKsin(j[4])))) +
               (((((((-1.64207822406911e-7) * (IKsin(j[2])))) + (((4.39976256220768e-8) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKcos(j[4])))))) *
             (IKcos(j[6])))) +
           (((((((((((-0.0161755976551753) * (IKcos(j[2])))) + (((0.0603705229437172) * (IKsin(j[2])))))) *
                 (IKcos(j[3])) * (IKcos(j[4])))) +
               (((((((0.0603705229437172) * (IKcos(j[2])))) + (((0.0161755976551753) * (IKsin(j[2])))))) *
                 (IKsin(j[4])))))) *
             (IKsin(j[6])))) +
           (((-0.0144889) * (IKsin(j[2])))) +
           (((((((-0.132621926165623) * (IKsin(j[2])))) + (((0.0355345425765066) * (IKcos(j[2])))))) * (IKsin(j[3])))) +
           (((((((((((-0.00414095299972487) * (IKsin(j[2])))) + (((-0.0154548538735916) * (IKcos(j[2])))))) *
                 (IKcos(j[4])))) +
               (((((((0.0154548538735916) * (IKsin(j[2])))) + (((-0.00414095299972487) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKsin(j[4])))))) *
             (IKcos(j[5])))) +
           (((((((-0.00388214343724207) * (IKcos(j[2])))) + (((0.0144889255064921) * (IKsin(j[2])))))) *
             (IKcos(j[3])))) +
           (((0.00388224) * (IKcos(j[2])))))) *
         (IKcos(j[0])) * (IKsin(j[1])))));
  eetrans[2] =
      ((0.11026) +
       (((((((0.965926369546665) * (IKcos(j[1])))) + (((-0.258817017629058) * (IKsin(j[0])) * (IKsin(j[1])))))) *
         (((((((((((((-1.7e-7) *
                     (((((0.258809562482804) * (IKcos(j[2])))) + (((-0.965928367099476) * (IKsin(j[2])))))) *
                     (IKcos(j[3])) * (IKsin(j[4])))) +
                   (((-1.7e-7) * (((((0.258809562482804) * (IKsin(j[2])))) + (((0.965928367099476) * (IKcos(j[2])))))) *
                     (IKcos(j[4])))))) *
                 (IKsin(j[5])))) +
               (((((((-1.64207822406911e-7) * (IKsin(j[2])))) + (((4.39976256220768e-8) * (IKcos(j[2])))))) *
                 (IKcos(j[5])) * (IKsin(j[3])))))) *
             (IKsin(j[6])))) +
           (((((((0.0154548538735916) * (IKsin(j[2])))) + (((-0.00414095299972487) * (IKcos(j[2])))))) * (IKsin(j[3])) *
             (IKsin(j[5])))) +
           (((((((((((0.0161755976551753) * (IKcos(j[2])))) + (((-0.0603705229437172) * (IKsin(j[2])))))) *
                 (IKcos(j[5])) * (IKsin(j[3])))) +
               (((((((-0.0625) * (((((0.258809562482804) * (IKsin(j[2])))) + (((0.965928367099476) * (IKcos(j[2])))))) *
                     (IKcos(j[4])))) +
                   (((-0.0625) *
                     (((((0.258809562482804) * (IKcos(j[2])))) + (((-0.965928367099476) * (IKsin(j[2])))))) *
                     (IKcos(j[3])) * (IKsin(j[4])))))) *
                 (IKsin(j[5])))))) *
             (IKcos(j[6])))) +
           (((((((((((-4.39976256220768e-8) * (IKsin(j[2])))) + (((-1.64207822406911e-7) * (IKcos(j[2])))))) *
                 (IKsin(j[4])))) +
               (((((((-1.64207822406911e-7) * (IKsin(j[2])))) + (((4.39976256220768e-8) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKcos(j[4])))))) *
             (IKcos(j[6])))) +
           (((((((((((-0.0161755976551753) * (IKcos(j[2])))) + (((0.0603705229437172) * (IKsin(j[2])))))) *
                 (IKcos(j[3])) * (IKcos(j[4])))) +
               (((((((0.0603705229437172) * (IKcos(j[2])))) + (((0.0161755976551753) * (IKsin(j[2])))))) *
                 (IKsin(j[4])))))) *
             (IKsin(j[6])))) +
           (((-0.0144889) * (IKsin(j[2])))) +
           (((((((-0.132621926165623) * (IKsin(j[2])))) + (((0.0355345425765066) * (IKcos(j[2])))))) * (IKsin(j[3])))) +
           (((((((((((-0.00414095299972487) * (IKsin(j[2])))) + (((-0.0154548538735916) * (IKcos(j[2])))))) *
                 (IKcos(j[4])))) +
               (((((((0.0154548538735916) * (IKsin(j[2])))) + (((-0.00414095299972487) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKsin(j[4])))))) *
             (IKcos(j[5])))) +
           (((((((-0.00388214343724207) * (IKcos(j[2])))) + (((0.0144889255064921) * (IKsin(j[2])))))) *
             (IKcos(j[3])))) +
           (((0.00388224) * (IKcos(j[2])))))))) +
       (((((((((((-0.258817017629058) *
                 (((((0.00414095299972487) * (IKcos(j[2])))) + (((-0.0154548538735916) * (IKsin(j[2])))))) *
                 (IKcos(j[4])))) +
               (((-0.258817017629058) *
                 (((((-0.00414095299972487) * (IKsin(j[2])))) + (((-0.0154548538735916) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKsin(j[4])))))) *
             (IKcos(j[5])))) +
           (((((((-0.258817017629058) *
                 (((((-0.0161755976551753) * (IKsin(j[2])))) + (((-0.0603705229437172) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKcos(j[4])))) +
               (((-0.258817017629058) *
                 (((((-0.0161755976551753) * (IKcos(j[2])))) + (((0.0603705229437172) * (IKsin(j[2])))))) *
                 (IKsin(j[4])))))) *
             (IKsin(j[6])))) +
           (((((((-0.258817017629058) *
                 (((((0.0603705229437172) * (IKcos(j[2])))) + (((0.0161755976551753) * (IKsin(j[2])))))) *
                 (IKcos(j[5])) * (IKsin(j[3])))) +
               (((-0.258817017629058) *
                 (((((-0.0625) * (((((0.258809562482804) * (IKsin(j[2])))) + (((0.965928367099476) * (IKcos(j[2])))))) *
                     (IKcos(j[3])) * (IKsin(j[4])))) +
                   (((-0.0625) *
                     (((((-0.258809562482804) * (IKcos(j[2])))) + (((0.965928367099476) * (IKsin(j[2])))))) *
                     (IKcos(j[4])))))) *
                 (IKsin(j[5])))))) *
             (IKcos(j[6])))) +
           (((-0.00374997388672565) * (IKcos(j[2])))) +
           (((((((-0.00919694433246419) * (IKsin(j[2])))) + (((-0.0343248114024077) * (IKcos(j[2])))))) *
             (IKsin(j[3])))) +
           (((((((-0.258817017629058) *
                 (((((-1.64207822406911e-7) * (IKsin(j[2])))) + (((4.39976256220768e-8) * (IKcos(j[2])))))) *
                 (IKsin(j[4])))) +
               (((-0.258817017629058) *
                 (((((4.39976256220768e-8) * (IKsin(j[2])))) + (((1.64207822406911e-7) * (IKcos(j[2])))))) *
                 (IKcos(j[3])) * (IKcos(j[4])))))) *
             (IKcos(j[6])))) +
           (((((((-0.258817017629058) *
                 (((((-1.7e-7) * (((((0.258809562482804) * (IKsin(j[2])))) + (((0.965928367099476) * (IKcos(j[2])))))) *
                     (IKcos(j[3])) * (IKsin(j[4])))) +
                   (((-1.7e-7) *
                     (((((-0.258809562482804) * (IKcos(j[2])))) + (((0.965928367099476) * (IKsin(j[2])))))) *
                     (IKcos(j[4])))))) *
                 (IKsin(j[5])))) +
               (((-0.258817017629058) *
                 (((((4.39976256220768e-8) * (IKsin(j[2])))) + (((1.64207822406911e-7) * (IKcos(j[2])))))) *
                 (IKcos(j[5])) * (IKsin(j[3])))))) *
             (IKsin(j[6])))) +
           (((-0.00100478977852023) * (IKsin(j[2])))) +
           (((((((0.00374998048823988) * (IKcos(j[2])))) + (((0.00100476478643521) * (IKsin(j[2])))))) *
             (IKcos(j[3])))) +
           (((((((0.00107174910553089) * (IKsin(j[2])))) + (((0.00399997918745587) * (IKcos(j[2])))))) * (IKsin(j[3])) *
             (IKsin(j[5])))))) *
         (IKcos(j[0])))) +
       (((((((-0.258817017629058) * (IKcos(j[1])) * (IKsin(j[0])))) + (((-0.965926369546665) * (IKsin(j[1])))))) *
         (((-0.15228) + (((-0.0625) * (IKcos(j[4])) * (IKsin(j[3])) * (IKsin(j[6])))) +
           (((-0.016) * (IKcos(j[5])) * (IKsin(j[3])) * (IKsin(j[4])))) + (((-0.13729996) * (IKcos(j[3])))) +
           (((((((-1.7e-7) * (IKsin(j[3])) * (IKsin(j[4])) * (IKsin(j[5])))) +
               (((-1.7e-7) * (IKcos(j[3])) * (IKcos(j[5])))))) *
             (IKsin(j[6])))) +
           (((1.7e-7) * (IKcos(j[4])) * (IKcos(j[6])) * (IKsin(j[3])))) + (((0.016) * (IKcos(j[3])) * (IKsin(j[5])))) +
           (((((((-0.0625) * (IKsin(j[3])) * (IKsin(j[4])) * (IKsin(j[5])))) +
               (((-0.0625) * (IKcos(j[3])) * (IKcos(j[5])))))) *
             (IKcos(j[6])))) +
           (((-0.015) * (IKsin(j[3])))))))));
  eerot[0] = (((x26 * ((((x18 * x8)) + x15)))) +
              ((x11 * (((((0.965926369546665) * x19 * x22)) + (((0.965926369546665) * x25)))))) +
              ((x23 * (((((-1.0) * x14)) + ((x16 * x8)))))));
  eerot[1] = (((x8 * (((((-1.0) * x19 * x22)) + (((-1.0) * x17 * x24)))))) + ((x11 * x23 * x7)) + ((x11 * x26 * x9)));
  IkReal x27 = ((1.0) * x8);
  eerot[2] = (((x26 * (((((-1.0) * x14 * x27)) + x16)))) +
              ((x11 * (((((-0.258817017629058) * x25)) + (((-0.258817017629058) * x19 * x22)))))) +
              ((x23 * (((((-1.0) * x18)) + (((-1.0) * x15 * x27)))))));
}

IKFAST_API int GetNumFreeParameters()
{
  return 1;
}
IKFAST_API int* GetFreeParameters()
{
  static int freeparams[] = { 0 };
  return freeparams;
}
IKFAST_API int GetNumJoints()
{
  return 7;
}

IKFAST_API int GetIkRealSize()
{
  return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
  return 0x56000007;
}

class IKSolver
{
public:
  IkReal j31, cj31, sj31, htj31, j31mul, j32, cj32, sj32, htj32, j32mul, j33, cj33, sj33, htj33, j33mul, j34, cj34,
      sj34, htj34, j34mul, j35, cj35, sj35, htj35, j35mul, j29, cj29, sj29, htj29, j30, cj30, sj30, htj30, new_r00, r00,
      rxp0_0, new_r01, r01, rxp0_1, new_r02, r02, rxp0_2, new_px, px, npx, new_py, py, npy, new_pz, pz, npz, pp;
  unsigned char _ij31[2], _nj31, _ij32[2], _nj32, _ij33[2], _nj33, _ij34[2], _nj34, _ij35[2], _nj35, _ij29[2], _nj29,
      _ij30[2], _nj30;

  IkReal j100, cj100, sj100;
  unsigned char _ij100[2], _nj100;
  bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
  {
    j31 = numeric_limits<IkReal>::quiet_NaN();
    _ij31[0] = -1;
    _ij31[1] = -1;
    _nj31 = -1;
    j32 = numeric_limits<IkReal>::quiet_NaN();
    _ij32[0] = -1;
    _ij32[1] = -1;
    _nj32 = -1;
    j33 = numeric_limits<IkReal>::quiet_NaN();
    _ij33[0] = -1;
    _ij33[1] = -1;
    _nj33 = -1;
    j34 = numeric_limits<IkReal>::quiet_NaN();
    _ij34[0] = -1;
    _ij34[1] = -1;
    _nj34 = -1;
    j35 = numeric_limits<IkReal>::quiet_NaN();
    _ij35[0] = -1;
    _ij35[1] = -1;
    _nj35 = -1;
    _ij29[0] = -1;
    _ij29[1] = -1;
    _nj29 = 0;
    _ij30[0] = -1;
    _ij30[1] = -1;
    _nj30 = 0;
    for (int dummyiter = 0; dummyiter < 1; ++dummyiter)
    {
      solutions.Clear();
      px = eetrans[0];
      py = eetrans[1];
      pz = eetrans[2];

      j29 = pfree[0];
      cj29 = cos(pfree[0]);
      sj29 = sin(pfree[0]);
      j30 = pfree[1];
      cj30 = cos(pfree[1]);
      sj30 = sin(pfree[1]);
      r00 = eerot[0];
      r01 = eerot[1];
      r02 = eerot[2];
      px = eetrans[0];
      py = eetrans[1];
      pz = eetrans[2];
      IkReal x28 = IKsin(j30);
      IkReal x29 = IKcos(j30);
      IkReal x30 = IKsin(j29);
      IkReal x31 = (x28 * x30);
      new_r00 =
          ((((0.965926369546665) * r00 * x31)) + (((-0.258817017629058) * r02 * x31)) + ((r01 * x28 * (IKcos(j29)))) +
           (((0.258817017629058) * r00 * x29)) + (((0.965926369546665) * r02 * x29)));
      IkReal x32 = IKsin(j30);
      IkReal x33 = IKsin(j29);
      IkReal x34 = IKcos(j30);
      IkReal x35 = IKcos(j29);
      IkReal x36 = (x32 * x35);
      IkReal x37 = (x32 * x33);
      new_px = ((((0.965926369546665) * pz * x34)) + (((0.0234660509236599) * x37)) +
                (((0.965926369546665) * px * x37)) + ((py * x36)) + (((0.258817017629058) * px * x34)) +
                (((-0.1433) * x36)) + (((-0.258817017629058) * pz * x37)) + (((-0.107861830848768) * x34)));
      IkReal x38 = IKcos(j29);
      new_r01 = ((((0.965926369546665) * r00 * x38)) + (((-0.258817017629058) * r02 * x38)) +
                 (((-1.0) * r01 * (IKsin(j29)))));
      IkReal x39 = IKcos(j29);
      IkReal x40 = IKsin(j29);
      new_py = ((((0.0234660509236599) * x39)) + (((0.965926369546665) * px * x39)) + (((-1.0) * py * x40)) +
                (((0.1433) * x40)) + (((-0.258817017629058) * pz * x39)));
      IkReal x41 = IKcos(j30);
      IkReal x42 = IKsin(j29);
      IkReal x43 = IKsin(j30);
      IkReal x44 = (x41 * x42);
      new_r02 =
          ((((0.965926369546665) * r00 * x44)) + (((-0.258817017629058) * r02 * x44)) + ((r01 * x41 * (IKcos(j29)))) +
           (((-0.258817017629058) * r00 * x43)) + (((-0.965926369546665) * r02 * x43)));
      IkReal x45 = IKcos(j30);
      IkReal x46 = IKsin(j29);
      IkReal x47 = IKsin(j30);
      IkReal x48 = IKcos(j29);
      IkReal x49 = (x45 * x46);
      IkReal x50 = (x45 * x48);
      new_pz = ((((0.0234660509236599) * x49)) + (((-0.965926369546665) * pz * x47)) +
                (((0.965926369546665) * px * x49)) + (((-0.258817017629058) * pz * x49)) + (((-0.1433) * x50)) +
                (((-0.258817017629058) * px * x47)) + (((0.107861830848768) * x47)) + ((py * x50)));
      r00 = new_r00;
      r01 = new_r01;
      r02 = new_r02;
      px = new_px;
      py = new_py;
      pz = new_pz;

      pp = ((px * px) + (py * py) + (pz * pz));
      IkReal op[8 + 1], zeror[8];
      int numroots;
      IkReal x51 = ((9.6562757933346e-8) * r00);
      IkReal x52 = ((0.28957996) * r02);
      IkReal x53 = (px * r00);
      IkReal x54 = (pz * r02);
      IkReal x55 = (py * r01);
      IkReal x56 = ((2.55064921354103e-8) * r01);
      IkReal x57 = ((0.57915992) * pz);
      IkReal x58 = px * px;
      IkReal x59 = py * py;
      IkReal x60 = pz * pz;
      IkReal x61 = ((1.93125515866692e-7) * px);
      IkReal x62 = ((5.10129842708207e-8) * py);
      IkReal x63 = ((0.265243852331247) * r01);
      IkReal x64 = ((0.03) * r02);
      IkReal x65 = ((0.0710690851530131) * r00);
      IkReal x66 = ((0.142138170306026) * px);
      IkReal x67 = ((0.530487704662493) * py);
      IkReal x68 = ((0.06) * pz);
      IkReal x69 = ((0.00776438343724207) * r00);
      IkReal x70 = ((0.01498004) * r02);
      IkReal x71 = ((0.0289778255064921) * r01);
      IkReal x72 = ((0.0579556510129843) * py);
      IkReal x73 = ((0.0155287668744841) * px);
      IkReal x74 = ((0.02996008) * pz);
      IkReal x75 = ((((0.530487704662493) * r00)) + (((-0.142138170306026) * r01)));
      IkReal x76 = ((((1.06097540932499) * px)) + (((-0.284276340612052) * py)));
      IkReal x77 = ((((-0.0155287668744841) * r01)) + (((0.0579556510129843) * r00)));
      IkReal x78 = ((((0.115911302025969) * px)) + (((-0.0310575337489683) * py)));
      IkReal x79 = ((-0.00303784838038207) + x74);
      IkReal x80 = ((0.0173747977943733) + x68);
      IkReal x81 = ((0.0796943032335827) + x57);
      IkReal x82 = ((((-5.10129842708207e-8) * r00)) + (((-1.93125515866692e-7) * r01)));
      IkReal x83 = ((((-3.86251031733384e-7) * py)) + (((-1.02025968541641e-7) * px)));
      IkReal x84 = (x63 + x65);
      IkReal x85 = (x73 + x72);
      IkReal x86 = (x71 + x69);
      IkReal x87 = (x66 + x67);
      IkReal x88 = (x64 + (((-1.0) * x84)));
      IkReal x89 = (x64 + x84);
      IkReal x90 = (x80 + (((-1.0) * x87)));
      IkReal x91 = (x59 + x58 + x60);
      IkReal x92 = (x80 + x87);
      IkReal x93 = ((-0.016) + x55 + x54 + x53);
      IkReal x94 = (x56 + x52 + x93 + (((-1.0) * x51)));
      IkReal x95 = (x51 + x52 + x93 + (((-1.0) * x56)));
      IkReal x96 = (x62 + x81 + x91 + (((-1.0) * x61)));
      IkReal x97 = (x61 + x81 + x91 + (((-1.0) * x62)));
      IkReal x98 = (x70 + x93 + (((-1.0) * x86)));
      IkReal x99 = (x79 + x91 + (((-1.0) * x85)));
      IkReal x100 = (x70 + x86 + x93);
      IkReal x101 = (x79 + x85 + x91);
      IkReal gconst0 = x94;
      IkReal gconst1 = x82;
      IkReal gconst2 = x95;
      IkReal gconst3 = x96;
      IkReal gconst4 = x83;
      IkReal gconst5 = x97;
      IkReal gconst6 = x94;
      IkReal gconst7 = x82;
      IkReal gconst8 = x95;
      IkReal gconst9 = x96;
      IkReal gconst10 = x83;
      IkReal gconst11 = x97;
      IkReal gconst12 = x88;
      IkReal gconst13 = x75;
      IkReal gconst14 = x89;
      IkReal gconst15 = x90;
      IkReal gconst16 = x76;
      IkReal gconst17 = x92;
      IkReal gconst18 = x88;
      IkReal gconst19 = x75;
      IkReal gconst20 = x89;
      IkReal gconst21 = x90;
      IkReal gconst22 = x76;
      IkReal gconst23 = x92;
      IkReal gconst24 = x98;
      IkReal gconst25 = x77;
      IkReal gconst26 = x100;
      IkReal gconst27 = x99;
      IkReal gconst28 = x78;
      IkReal gconst29 = x101;
      IkReal gconst30 = x98;
      IkReal gconst31 = x77;
      IkReal gconst32 = x100;
      IkReal gconst33 = x99;
      IkReal gconst34 = x78;
      IkReal gconst35 = x101;
      IkReal x102 = ((1.0) * gconst26);
      IkReal x103 = (gconst30 * gconst34);
      IkReal x104 = (gconst31 * gconst33);
      IkReal x105 = ((1.0) * gconst17);
      IkReal x106 = (gconst2 * gconst6);
      IkReal x107 = (gconst11 * gconst3);
      IkReal x108 = (gconst25 * gconst29);
      IkReal x109 = (gconst14 * gconst28);
      IkReal x110 = ((1.0) * gconst14);
      IkReal x111 = (gconst21 * gconst32);
      IkReal x112 = (gconst10 * gconst6);
      IkReal x113 = (gconst21 * gconst5);
      IkReal x114 = (gconst0 * gconst8);
      IkReal x115 = (gconst13 * gconst5);
      IkReal x116 = ((1.0) * gconst9);
      IkReal x117 = (gconst30 * gconst35);
      IkReal x118 = (gconst26 * gconst27);
      IkReal x119 = (gconst22 * gconst30);
      IkReal x120 = ((1.0) * gconst12);
      IkReal x121 = (gconst2 * gconst3);
      IkReal x122 = (gconst1 * gconst5);
      IkReal x123 = (gconst19 * gconst33);
      IkReal x124 = (gconst26 * gconst28);
      IkReal x125 = (gconst11 * gconst6);
      IkReal x126 = (gconst1 * gconst7);
      IkReal x127 = (gconst18 * gconst2);
      IkReal x128 = (gconst18 * gconst34);
      IkReal x129 = (gconst24 * gconst29);
      IkReal x130 = ((1.0) * gconst23);
      IkReal x131 = (gconst20 * gconst33);
      IkReal x132 = (gconst32 * gconst33);
      IkReal x133 = (gconst0 * gconst5);
      IkReal x134 = ((1.0) * gconst18);
      IkReal x135 = (gconst21 * gconst31);
      IkReal x136 = (gconst5 * gconst9);
      IkReal x137 = (gconst4 * gconst9);
      IkReal x138 = (gconst13 * gconst29);
      IkReal x139 = (gconst14 * gconst6);
      IkReal x140 = ((1.0) * gconst10 * gconst4);
      IkReal x141 = (gconst27 * x132);
      IkReal x142 = (gconst2 * gconst4 * gconst7);
      op[0] = (((x129 * x132)) + (((-1.0) * x117 * x129)) + (((-1.0) * x102 * x141)) + ((x103 * x108)) +
               ((x104 * x124)) + (((-1.0) * gconst28 * x102 * x103)) + (((-1.0) * x104 * x108)) + ((x117 * x118)));
      op[1] =
          ((((-1.0) * gconst27 * x102 * x111)) + ((gconst12 * gconst29 * x132)) + ((x111 * x129)) + ((x129 * x131)) +
           (((-1.0) * gconst24 * x105 * x117)) + ((gconst14 * gconst27 * x117)) + (((-1.0) * x103 * x109)) +
           (((-1.0) * gconst27 * x102 * x131)) + ((x103 * x138)) + ((gconst17 * gconst25 * x103)) +
           (((-1.0) * x108 * x135)) + ((gconst17 * gconst24 * x132)) + (((-1.0) * x108 * x123)) + ((x108 * x128)) +
           ((gconst15 * gconst26 * x117)) + (((-1.0) * gconst30 * x129 * x130)) + (((-1.0) * gconst15 * x102 * x132)) +
           (((-1.0) * gconst35 * x129 * x134)) + ((x124 * x135)) + ((x123 * x124)) +
           (((-1.0) * gconst25 * x104 * x105)) + ((x108 * x119)) + ((gconst18 * gconst35 * x118)) +
           (((-1.0) * x110 * x141)) + (((-1.0) * gconst16 * x102 * x103)) + ((gconst23 * gconst30 * x118)) +
           (((-1.0) * gconst29 * x117 * x120)) + ((x104 * x109)) + (((-1.0) * gconst28 * x102 * x119)) +
           ((gconst16 * gconst26 * x104)) + (((-1.0) * gconst28 * x102 * x128)) + (((-1.0) * x104 * x138)));
      op[2] = ((((-1.0) * gconst14 * gconst21 * gconst27 * gconst32)) + ((gconst14 * gconst19 * gconst28 * gconst33)) +
               ((gconst13 * gconst22 * gconst29 * gconst30)) + (((-1.0) * gconst18 * gconst23 * gconst24 * gconst29)) +
               (((-1.0) * gconst1 * gconst29 * gconst31 * gconst33)) +
               (((-1.0) * gconst17 * gconst23 * gconst24 * gconst30)) + ((gconst24 * gconst29 * gconst33 * gconst8)) +
               ((gconst16 * gconst19 * gconst26 * gconst33)) + ((gconst24 * gconst32 * gconst33 * gconst5)) +
               (((-1.0) * gconst12 * gconst18 * gconst29 * gconst35)) + ((gconst26 * gconst3 * gconst30 * gconst35)) +
               (((-1.0) * gconst14 * gconst18 * gconst28 * gconst34)) + ((gconst12 * gconst17 * gconst32 * gconst33)) +
               ((gconst26 * gconst28 * gconst31 * gconst9)) + (((-1.0) * gconst13 * gconst21 * gconst29 * gconst31)) +
               (((-1.0) * gconst24 * gconst29 * gconst35 * gconst6)) +
               (((-1.0) * gconst12 * gconst23 * gconst29 * gconst30)) +
               (((-1.0) * gconst17 * gconst18 * gconst24 * gconst35)) + ((gconst26 * gconst28 * gconst33 * gconst7)) +
               (((-1.0) * gconst11 * gconst24 * gconst29 * gconst30)) +
               (((-1.0) * gconst14 * gconst22 * gconst28 * gconst30)) + ((gconst15 * gconst18 * gconst26 * gconst35)) +
               (((-1.0) * gconst25 * gconst29 * gconst33 * gconst7)) +
               (((-1.0) * gconst16 * gconst22 * gconst26 * gconst30)) + ((gconst12 * gconst21 * gconst29 * gconst32)) +
               (((-1.0) * gconst10 * gconst26 * gconst28 * gconst30)) + ((gconst13 * gconst18 * gconst29 * gconst34)) +
               (((-1.0) * gconst25 * gconst29 * gconst31 * gconst9)) +
               (((-1.0) * gconst26 * gconst27 * gconst33 * gconst8)) +
               (((-1.0) * gconst26 * gconst3 * gconst32 * gconst33)) + ((gconst16 * gconst21 * gconst26 * gconst31)) +
               ((gconst17 * gconst18 * gconst25 * gconst34)) + (((-1.0) * gconst12 * gconst17 * gconst30 * gconst35)) +
               ((gconst24 * gconst29 * gconst32 * gconst9)) + ((gconst12 * gconst20 * gconst29 * gconst33)) +
               (((-1.0) * gconst0 * gconst29 * gconst30 * gconst35)) +
               (((-1.0) * gconst20 * gconst21 * gconst26 * gconst27)) + ((gconst14 * gconst21 * gconst28 * gconst31)) +
               (((-1.0) * gconst17 * gconst19 * gconst25 * gconst33)) +
               (((-1.0) * gconst26 * gconst27 * gconst32 * gconst9)) + ((gconst17 * gconst22 * gconst25 * gconst30)) +
               (((-1.0) * gconst24 * gconst30 * gconst35 * gconst5)) + ((gconst14 * gconst16 * gconst31 * gconst33)) +
               ((gconst18 * gconst23 * gconst26 * gconst27)) + ((gconst14 * gconst23 * gconst27 * gconst30)) +
               ((gconst14 * gconst18 * gconst27 * gconst35)) + ((gconst1 * gconst29 * gconst30 * gconst34)) +
               (((-1.0) * gconst17 * gconst21 * gconst25 * gconst31)) +
               (((-1.0) * gconst13 * gconst17 * gconst31 * gconst33)) + ((gconst2 * gconst28 * gconst31 * gconst33)) +
               ((gconst13 * gconst17 * gconst30 * gconst34)) + ((gconst2 * gconst27 * gconst30 * gconst35)) +
               (((-1.0) * gconst26 * gconst30 * gconst34 * gconst4)) +
               (((-1.0) * gconst2 * gconst28 * gconst30 * gconst34)) +
               (((-1.0) * gconst15 * gconst21 * gconst26 * gconst32)) +
               (((-1.0) * gconst14 * gconst15 * gconst32 * gconst33)) +
               (((-1.0) * gconst14 * gconst20 * gconst27 * gconst33)) + ((gconst20 * gconst21 * gconst24 * gconst29)) +
               ((gconst18 * gconst22 * gconst25 * gconst29)) + ((gconst25 * gconst30 * gconst34 * gconst5)) +
               ((gconst19 * gconst21 * gconst26 * gconst28)) + ((gconst25 * gconst29 * gconst34 * gconst6)) +
               (((-1.0) * gconst25 * gconst31 * gconst33 * gconst5)) +
               (((-1.0) * gconst19 * gconst21 * gconst25 * gconst29)) + ((gconst10 * gconst25 * gconst29 * gconst30)) +
               ((gconst17 * gconst20 * gconst24 * gconst33)) + ((gconst26 * gconst31 * gconst33 * gconst4)) +
               ((gconst26 * gconst27 * gconst35 * gconst6)) + (((-1.0) * gconst18 * gconst22 * gconst26 * gconst28)) +
               (((-1.0) * gconst15 * gconst20 * gconst26 * gconst33)) +
               (((-1.0) * gconst16 * gconst18 * gconst26 * gconst34)) +
               (((-1.0) * gconst26 * gconst28 * gconst34 * gconst6)) + ((gconst15 * gconst23 * gconst26 * gconst30)) +
               ((gconst17 * gconst21 * gconst24 * gconst32)) + ((gconst14 * gconst15 * gconst30 * gconst35)) +
               (((-1.0) * gconst2 * gconst27 * gconst32 * gconst33)) + ((gconst0 * gconst29 * gconst32 * gconst33)) +
               (((-1.0) * gconst13 * gconst19 * gconst29 * gconst33)) +
               (((-1.0) * gconst14 * gconst16 * gconst30 * gconst34)) + ((gconst11 * gconst26 * gconst27 * gconst30)));
      op[3] = (((gconst12 * gconst17 * gconst21 * gconst32)) + (((-1.0) * gconst12 * gconst17 * gconst23 * gconst30)) +
               ((gconst12 * gconst20 * gconst21 * gconst29)) + (((-1.0) * gconst14 * gconst28 * gconst34 * gconst6)) +
               ((gconst12 * gconst29 * gconst32 * gconst9)) + (((-1.0) * gconst21 * gconst25 * gconst29 * gconst7)) +
               (((-1.0) * gconst17 * gconst18 * gconst23 * gconst24)) +
               (((-1.0) * gconst14 * gconst16 * gconst18 * gconst34)) + ((gconst16 * gconst26 * gconst33 * gconst7)) +
               ((gconst15 * gconst18 * gconst23 * gconst26)) + (((-1.0) * gconst12 * gconst29 * gconst35 * gconst6)) +
               ((gconst14 * gconst28 * gconst33 * gconst7)) + ((gconst20 * gconst24 * gconst29 * gconst9)) +
               (((-1.0) * gconst15 * gconst26 * gconst33 * gconst8)) +
               (((-1.0) * gconst2 * gconst21 * gconst27 * gconst32)) +
               (((-1.0) * gconst13 * gconst29 * gconst31 * gconst9)) + ((gconst14 * gconst15 * gconst23 * gconst30)) +
               ((gconst13 * gconst30 * gconst34 * gconst5)) + ((gconst17 * gconst24 * gconst32 * gconst9)) +
               (((-1.0) * gconst13 * gconst19 * gconst21 * gconst29)) +
               (((-1.0) * gconst1 * gconst19 * gconst29 * gconst33)) +
               (((-1.0) * gconst21 * gconst26 * gconst3 * gconst32)) + ((gconst14 * gconst16 * gconst21 * gconst31)) +
               ((gconst2 * gconst21 * gconst28 * gconst31)) + ((gconst15 * gconst26 * gconst35 * gconst6)) +
               (((-1.0) * gconst11 * gconst17 * gconst24 * gconst30)) +
               (((-1.0) * gconst23 * gconst24 * gconst30 * gconst5)) +
               (((-1.0) * gconst21 * gconst26 * gconst27 * gconst8)) + ((gconst18 * gconst25 * gconst34 * gconst5)) +
               (((-1.0) * gconst2 * gconst20 * gconst27 * gconst33)) + ((gconst10 * gconst18 * gconst25 * gconst29)) +
               ((gconst14 * gconst19 * gconst21 * gconst28)) + ((gconst11 * gconst14 * gconst27 * gconst30)) +
               ((gconst19 * gconst26 * gconst33 * gconst4)) + ((gconst16 * gconst19 * gconst21 * gconst26)) +
               ((gconst17 * gconst18 * gconst22 * gconst25)) + ((gconst20 * gconst24 * gconst33 * gconst5)) +
               (((-1.0) * gconst19 * gconst25 * gconst33 * gconst5)) +
               (((-1.0) * gconst14 * gconst30 * gconst34 * gconst4)) +
               (((-1.0) * gconst22 * gconst26 * gconst30 * gconst4)) +
               (((-1.0) * gconst10 * gconst14 * gconst28 * gconst30)) + ((gconst12 * gconst17 * gconst20 * gconst33)) +
               (((-1.0) * gconst2 * gconst22 * gconst28 * gconst30)) + ((gconst22 * gconst25 * gconst30 * gconst5)) +
               ((gconst16 * gconst2 * gconst31 * gconst33)) + (((-1.0) * gconst15 * gconst20 * gconst21 * gconst26)) +
               (((-1.0) * gconst13 * gconst31 * gconst33 * gconst5)) + ((gconst14 * gconst27 * gconst35 * gconst6)) +
               (((-1.0) * gconst17 * gconst24 * gconst35 * gconst6)) +
               (((-1.0) * gconst12 * gconst30 * gconst35 * gconst5)) + ((gconst12 * gconst29 * gconst33 * gconst8)) +
               (((-1.0) * gconst12 * gconst18 * gconst23 * gconst29)) +
               (((-1.0) * gconst20 * gconst26 * gconst27 * gconst9)) + ((gconst17 * gconst25 * gconst34 * gconst6)) +
               (((-1.0) * gconst23 * gconst24 * gconst29 * gconst6)) + ((gconst11 * gconst15 * gconst26 * gconst30)) +
               ((gconst18 * gconst26 * gconst3 * gconst35)) + (((-1.0) * gconst10 * gconst16 * gconst26 * gconst30)) +
               (((-1.0) * gconst14 * gconst18 * gconst22 * gconst28)) + ((gconst21 * gconst26 * gconst28 * gconst7)) +
               (((-1.0) * gconst0 * gconst18 * gconst29 * gconst35)) +
               (((-1.0) * gconst16 * gconst18 * gconst22 * gconst26)) + ((gconst21 * gconst24 * gconst32 * gconst5)) +
               (((-1.0) * gconst11 * gconst12 * gconst29 * gconst30)) + ((gconst10 * gconst13 * gconst29 * gconst30)) +
               (((-1.0) * gconst19 * gconst25 * gconst29 * gconst9)) +
               (((-1.0) * gconst13 * gconst17 * gconst21 * gconst31)) +
               (((-1.0) * gconst21 * gconst25 * gconst31 * gconst5)) +
               (((-1.0) * gconst12 * gconst17 * gconst18 * gconst35)) + ((gconst19 * gconst2 * gconst28 * gconst33)) +
               ((gconst22 * gconst25 * gconst29 * gconst6)) + (((-1.0) * gconst1 * gconst21 * gconst29 * gconst31)) +
               (((-1.0) * gconst0 * gconst23 * gconst29 * gconst30)) +
               (((-1.0) * gconst14 * gconst3 * gconst32 * gconst33)) + ((gconst1 * gconst17 * gconst30 * gconst34)) +
               (((-1.0) * gconst16 * gconst26 * gconst34 * gconst6)) + ((gconst18 * gconst2 * gconst27 * gconst35)) +
               (((-1.0) * gconst14 * gconst15 * gconst20 * gconst33)) + ((gconst23 * gconst26 * gconst3 * gconst30)) +
               ((gconst0 * gconst17 * gconst32 * gconst33)) + ((gconst0 * gconst20 * gconst29 * gconst33)) +
               ((gconst12 * gconst32 * gconst33 * gconst5)) + (((-1.0) * gconst17 * gconst25 * gconst33 * gconst7)) +
               ((gconst2 * gconst23 * gconst27 * gconst30)) + (((-1.0) * gconst0 * gconst17 * gconst30 * gconst35)) +
               ((gconst14 * gconst28 * gconst31 * gconst9)) + (((-1.0) * gconst10 * gconst18 * gconst26 * gconst28)) +
               ((gconst14 * gconst3 * gconst30 * gconst35)) + (((-1.0) * gconst22 * gconst26 * gconst28 * gconst6)) +
               (((-1.0) * gconst14 * gconst16 * gconst22 * gconst30)) +
               (((-1.0) * gconst17 * gconst25 * gconst31 * gconst9)) + ((gconst1 * gconst18 * gconst29 * gconst34)) +
               ((gconst14 * gconst18 * gconst23 * gconst27)) + (((-1.0) * gconst20 * gconst26 * gconst3 * gconst33)) +
               ((gconst14 * gconst15 * gconst18 * gconst35)) + (((-1.0) * gconst13 * gconst29 * gconst33 * gconst7)) +
               (((-1.0) * gconst14 * gconst27 * gconst32 * gconst9)) + ((gconst14 * gconst16 * gconst19 * gconst33)) +
               ((gconst17 * gconst24 * gconst33 * gconst8)) + ((gconst13 * gconst29 * gconst34 * gconst6)) +
               (((-1.0) * gconst18 * gconst2 * gconst28 * gconst34)) + ((gconst0 * gconst21 * gconst29 * gconst32)) +
               (((-1.0) * gconst14 * gconst15 * gconst21 * gconst32)) +
               (((-1.0) * gconst13 * gconst17 * gconst19 * gconst33)) + ((gconst10 * gconst17 * gconst25 * gconst30)) +
               (((-1.0) * gconst18 * gconst24 * gconst35 * gconst5)) + ((gconst14 * gconst31 * gconst33 * gconst4)) +
               (((-1.0) * gconst14 * gconst20 * gconst21 * gconst27)) + ((gconst13 * gconst18 * gconst22 * gconst29)) +
               (((-1.0) * gconst16 * gconst2 * gconst30 * gconst34)) +
               (((-1.0) * gconst18 * gconst26 * gconst34 * gconst4)) +
               (((-1.0) * gconst15 * gconst26 * gconst32 * gconst9)) +
               (((-1.0) * gconst17 * gconst19 * gconst21 * gconst25)) + ((gconst17 * gconst20 * gconst21 * gconst24)) +
               ((gconst23 * gconst26 * gconst27 * gconst6)) + (((-1.0) * gconst15 * gconst2 * gconst32 * gconst33)) +
               ((gconst19 * gconst26 * gconst28 * gconst9)) + (((-1.0) * gconst1 * gconst17 * gconst31 * gconst33)) +
               ((gconst21 * gconst26 * gconst31 * gconst4)) + ((gconst13 * gconst17 * gconst18 * gconst34)) +
               ((gconst15 * gconst2 * gconst30 * gconst35)) + ((gconst16 * gconst26 * gconst31 * gconst9)) +
               (((-1.0) * gconst11 * gconst18 * gconst24 * gconst29)) + ((gconst21 * gconst24 * gconst29 * gconst8)) +
               (((-1.0) * gconst14 * gconst27 * gconst33 * gconst8)) + ((gconst11 * gconst18 * gconst26 * gconst27)) +
               ((gconst13 * gconst17 * gconst22 * gconst30)) + ((gconst1 * gconst22 * gconst29 * gconst30)));
      op[4] =
          (((gconst14 * gconst15 * gconst35 * gconst6)) + (((-1.0) * gconst25 * gconst29 * gconst7 * gconst9)) +
           (((-1.0) * gconst25 * gconst31 * gconst5 * gconst9)) + ((gconst12 * gconst20 * gconst29 * gconst9)) +
           ((gconst12 * gconst21 * gconst32 * gconst5)) + ((gconst10 * gconst13 * gconst18 * gconst29)) +
           (((-1.0) * gconst17 * gconst21 * gconst25 * gconst7)) + ((gconst0 * gconst20 * gconst21 * gconst29)) +
           (((-1.0) * gconst13 * gconst19 * gconst29 * gconst9)) +
           (((-1.0) * gconst13 * gconst19 * gconst33 * gconst5)) + ((gconst14 * gconst23 * gconst27 * gconst6)) +
           (((-1.0) * gconst14 * gconst15 * gconst33 * gconst8)) + ((gconst14 * gconst16 * gconst33 * gconst7)) +
           (((-1.0) * gconst25 * gconst33 * gconst5 * gconst7)) +
           (((-1.0) * gconst10 * gconst26 * gconst28 * gconst6)) +
           (((-1.0) * gconst14 * gconst21 * gconst27 * gconst8)) +
           (((-1.0) * gconst19 * gconst21 * gconst25 * gconst5)) + ((gconst10 * gconst13 * gconst17 * gconst30)) +
           ((gconst15 * gconst23 * gconst26 * gconst6)) + (((-1.0) * gconst0 * gconst29 * gconst35 * gconst6)) +
           ((gconst13 * gconst17 * gconst18 * gconst22)) + ((gconst26 * gconst28 * gconst7 * gconst9)) +
           (((-1.0) * gconst14 * gconst21 * gconst3 * gconst32)) +
           (((-1.0) * gconst26 * gconst3 * gconst33 * gconst8)) +
           (((-1.0) * gconst17 * gconst23 * gconst24 * gconst6)) + ((gconst1 * gconst29 * gconst34 * gconst6)) +
           (((-1.0) * gconst12 * gconst23 * gconst30 * gconst5)) +
           (((-1.0) * gconst18 * gconst22 * gconst26 * gconst4)) + ((gconst2 * gconst28 * gconst31 * gconst9)) +
           ((gconst0 * gconst17 * gconst20 * gconst33)) + ((gconst12 * gconst21 * gconst29 * gconst8)) +
           ((gconst16 * gconst2 * gconst21 * gconst31)) + (((-1.0) * gconst10 * gconst16 * gconst18 * gconst26)) +
           ((gconst25 * gconst34 * gconst5 * gconst6)) + (((-1.0) * gconst2 * gconst30 * gconst34 * gconst4)) +
           ((gconst0 * gconst17 * gconst21 * gconst32)) + (((-1.0) * gconst12 * gconst18 * gconst35 * gconst5)) +
           ((gconst12 * gconst17 * gconst33 * gconst8)) + ((gconst1 * gconst17 * gconst18 * gconst34)) +
           (((-1.0) * gconst14 * gconst16 * gconst18 * gconst22)) +
           (((-1.0) * gconst11 * gconst24 * gconst29 * gconst6)) +
           (((-1.0) * gconst0 * gconst17 * gconst18 * gconst35)) + ((gconst11 * gconst2 * gconst27 * gconst30)) +
           ((gconst13 * gconst17 * gconst34 * gconst6)) + ((gconst0 * gconst29 * gconst33 * gconst8)) +
           (((-1.0) * gconst2 * gconst28 * gconst34 * gconst6)) + ((gconst14 * gconst16 * gconst31 * gconst9)) +
           ((gconst2 * gconst27 * gconst35 * gconst6)) + ((gconst18 * gconst23 * gconst26 * gconst3)) +
           (((-1.0) * gconst2 * gconst27 * gconst33 * gconst8)) + ((gconst14 * gconst21 * gconst31 * gconst4)) +
           ((gconst2 * gconst3 * gconst30 * gconst35)) + ((gconst19 * gconst2 * gconst21 * gconst28)) +
           (((-1.0) * gconst2 * gconst20 * gconst21 * gconst27)) +
           (((-1.0) * gconst17 * gconst19 * gconst25 * gconst9)) +
           (((-1.0) * gconst15 * gconst2 * gconst21 * gconst32)) +
           (((-1.0) * gconst13 * gconst17 * gconst31 * gconst9)) + ((gconst19 * gconst21 * gconst26 * gconst4)) +
           (((-1.0) * gconst12 * gconst17 * gconst35 * gconst6)) + ((gconst10 * gconst17 * gconst18 * gconst25)) +
           ((gconst26 * gconst3 * gconst35 * gconst6)) + (((-1.0) * gconst15 * gconst20 * gconst26 * gconst9)) +
           (((-1.0) * gconst12 * gconst17 * gconst18 * gconst23)) +
           (((-1.0) * gconst0 * gconst17 * gconst23 * gconst30)) + ((gconst0 * gconst32 * gconst33 * gconst5)) +
           (((-1.0) * gconst0 * gconst11 * gconst29 * gconst30)) + ((gconst11 * gconst14 * gconst18 * gconst27)) +
           (((-1.0) * gconst1 * gconst31 * gconst33 * gconst5)) +
           (((-1.0) * gconst13 * gconst17 * gconst33 * gconst7)) +
           (((-1.0) * gconst14 * gconst15 * gconst32 * gconst9)) +
           (((-1.0) * gconst12 * gconst23 * gconst29 * gconst6)) + ((gconst11 * gconst14 * gconst15 * gconst30)) +
           (((-1.0) * gconst20 * gconst21 * gconst26 * gconst3)) + ((gconst12 * gconst17 * gconst20 * gconst21)) +
           (((-1.0) * gconst14 * gconst18 * gconst34 * gconst4)) + ((gconst12 * gconst20 * gconst33 * gconst5)) +
           (((-1.0) * gconst14 * gconst16 * gconst34 * gconst6)) +
           (((-1.0) * gconst1 * gconst19 * gconst21 * gconst29)) + ((gconst18 * gconst22 * gconst25 * gconst5)) +
           ((gconst2 * gconst28 * gconst33 * gconst7)) + ((gconst26 * gconst33 * gconst4 * gconst7)) +
           ((gconst16 * gconst21 * gconst26 * gconst7)) + ((gconst16 * gconst19 * gconst26 * gconst9)) +
           ((gconst17 * gconst21 * gconst24 * gconst8)) + (((-1.0) * gconst18 * gconst2 * gconst22 * gconst28)) +
           ((gconst14 * gconst18 * gconst3 * gconst35)) + (((-1.0) * gconst14 * gconst20 * gconst3 * gconst33)) +
           ((gconst18 * gconst2 * gconst23 * gconst27)) + (((-1.0) * gconst2 * gconst3 * gconst32 * gconst33)) +
           ((gconst26 * gconst31 * gconst4 * gconst9)) + ((gconst24 * gconst32 * gconst5 * gconst9)) +
           ((gconst10 * gconst25 * gconst30 * gconst5)) + (((-1.0) * gconst15 * gconst21 * gconst26 * gconst8)) +
           (((-1.0) * gconst15 * gconst2 * gconst20 * gconst33)) + ((gconst13 * gconst22 * gconst29 * gconst6)) +
           ((gconst1 * gconst30 * gconst34 * gconst5)) + (((-1.0) * gconst16 * gconst22 * gconst26 * gconst6)) +
           (((-1.0) * gconst13 * gconst17 * gconst19 * gconst21)) + ((gconst14 * gconst15 * gconst18 * gconst23)) +
           (((-1.0) * gconst14 * gconst20 * gconst27 * gconst9)) +
           (((-1.0) * gconst10 * gconst26 * gconst30 * gconst4)) +
           (((-1.0) * gconst11 * gconst17 * gconst18 * gconst24)) + ((gconst24 * gconst33 * gconst5 * gconst8)) +
           ((gconst15 * gconst2 * gconst23 * gconst30)) + (((-1.0) * gconst14 * gconst15 * gconst20 * gconst21)) +
           ((gconst14 * gconst19 * gconst28 * gconst9)) + (((-1.0) * gconst0 * gconst30 * gconst35 * gconst5)) +
           ((gconst10 * gconst25 * gconst29 * gconst6)) + ((gconst15 * gconst18 * gconst2 * gconst35)) +
           ((gconst17 * gconst22 * gconst25 * gconst6)) + (((-1.0) * gconst10 * gconst2 * gconst28 * gconst30)) +
           (((-1.0) * gconst16 * gconst18 * gconst2 * gconst34)) +
           (((-1.0) * gconst14 * gconst22 * gconst30 * gconst4)) +
           (((-1.0) * gconst11 * gconst12 * gconst17 * gconst30)) +
           (((-1.0) * gconst1 * gconst29 * gconst31 * gconst9)) + ((gconst14 * gconst23 * gconst3 * gconst30)) +
           ((gconst24 * gconst29 * gconst8 * gconst9)) + (((-1.0) * gconst10 * gconst14 * gconst16 * gconst30)) +
           (((-1.0) * gconst24 * gconst35 * gconst5 * gconst6)) + (((-1.0) * gconst26 * gconst3 * gconst32 * gconst9)) +
           (((-1.0) * gconst18 * gconst23 * gconst24 * gconst5)) +
           (((-1.0) * gconst26 * gconst27 * gconst8 * gconst9)) +
           (((-1.0) * gconst10 * gconst14 * gconst18 * gconst28)) + ((gconst2 * gconst31 * gconst33 * gconst4)) +
           (((-1.0) * gconst11 * gconst12 * gconst18 * gconst29)) + ((gconst1 * gconst18 * gconst22 * gconst29)) +
           ((gconst17 * gconst20 * gconst24 * gconst9)) + (((-1.0) * gconst26 * gconst34 * gconst4 * gconst6)) +
           (((-1.0) * gconst11 * gconst24 * gconst30 * gconst5)) + ((gconst14 * gconst19 * gconst33 * gconst4)) +
           ((gconst20 * gconst21 * gconst24 * gconst5)) + ((gconst11 * gconst26 * gconst27 * gconst6)) +
           (((-1.0) * gconst13 * gconst21 * gconst31 * gconst5)) +
           (((-1.0) * gconst14 * gconst22 * gconst28 * gconst6)) +
           (((-1.0) * gconst2 * gconst27 * gconst32 * gconst9)) + (((-1.0) * gconst1 * gconst29 * gconst33 * gconst7)) +
           (((-1.0) * gconst0 * gconst18 * gconst23 * gconst29)) + ((gconst11 * gconst15 * gconst18 * gconst26)) +
           (((-1.0) * gconst1 * gconst17 * gconst21 * gconst31)) + ((gconst1 * gconst17 * gconst22 * gconst30)) +
           ((gconst13 * gconst18 * gconst34 * gconst5)) + (((-1.0) * gconst13 * gconst21 * gconst29 * gconst7)) +
           (((-1.0) * gconst16 * gconst2 * gconst22 * gconst30)) + ((gconst1 * gconst10 * gconst29 * gconst30)) +
           ((gconst16 * gconst19 * gconst2 * gconst33)) + ((gconst14 * gconst16 * gconst19 * gconst21)) +
           ((gconst12 * gconst17 * gconst32 * gconst9)) + ((gconst0 * gconst29 * gconst32 * gconst9)) +
           ((gconst13 * gconst22 * gconst30 * gconst5)) + ((gconst11 * gconst26 * gconst3 * gconst30)) +
           (((-1.0) * gconst1 * gconst17 * gconst19 * gconst33)) + ((gconst14 * gconst21 * gconst28 * gconst7)));
      op[5] =
          (((gconst13 * gconst18 * gconst22 * gconst5)) + ((gconst14 * gconst3 * gconst35 * gconst6)) +
           (((-1.0) * gconst13 * gconst17 * gconst19 * gconst9)) + ((gconst2 * gconst23 * gconst3 * gconst30)) +
           (((-1.0) * gconst1 * gconst21 * gconst31 * gconst5)) + (((-1.0) * gconst2 * gconst21 * gconst27 * gconst8)) +
           ((gconst12 * gconst20 * gconst21 * gconst5)) + ((gconst16 * gconst19 * gconst2 * gconst21)) +
           (((-1.0) * gconst10 * gconst14 * gconst28 * gconst6)) + ((gconst14 * gconst15 * gconst23 * gconst6)) +
           ((gconst1 * gconst17 * gconst18 * gconst22)) + ((gconst2 * gconst23 * gconst27 * gconst6)) +
           (((-1.0) * gconst14 * gconst16 * gconst22 * gconst6)) + ((gconst0 * gconst21 * gconst32 * gconst5)) +
           (((-1.0) * gconst1 * gconst17 * gconst19 * gconst21)) +
           (((-1.0) * gconst1 * gconst19 * gconst29 * gconst9)) + ((gconst14 * gconst19 * gconst21 * gconst4)) +
           ((gconst21 * gconst26 * gconst4 * gconst7)) + (((-1.0) * gconst0 * gconst11 * gconst18 * gconst29)) +
           (((-1.0) * gconst19 * gconst25 * gconst5 * gconst9)) + (((-1.0) * gconst13 * gconst31 * gconst5 * gconst9)) +
           ((gconst10 * gconst17 * gconst25 * gconst6)) + (((-1.0) * gconst11 * gconst18 * gconst24 * gconst5)) +
           (((-1.0) * gconst14 * gconst34 * gconst4 * gconst6)) +
           (((-1.0) * gconst14 * gconst15 * gconst21 * gconst8)) + ((gconst2 * gconst21 * gconst28 * gconst7)) +
           ((gconst14 * gconst16 * gconst21 * gconst7)) + ((gconst14 * gconst28 * gconst7 * gconst9)) +
           (((-1.0) * gconst12 * gconst18 * gconst23 * gconst5)) +
           (((-1.0) * gconst15 * gconst26 * gconst8 * gconst9)) + (((-1.0) * gconst2 * gconst20 * gconst3 * gconst33)) +
           ((gconst16 * gconst2 * gconst33 * gconst7)) + (((-1.0) * gconst17 * gconst25 * gconst7 * gconst9)) +
           ((gconst11 * gconst14 * gconst27 * gconst6)) + ((gconst1 * gconst18 * gconst34 * gconst5)) +
           (((-1.0) * gconst22 * gconst26 * gconst4 * gconst6)) + (((-1.0) * gconst23 * gconst24 * gconst5 * gconst6)) +
           (((-1.0) * gconst1 * gconst17 * gconst31 * gconst9)) + ((gconst17 * gconst24 * gconst8 * gconst9)) +
           ((gconst13 * gconst17 * gconst22 * gconst6)) + (((-1.0) * gconst10 * gconst16 * gconst2 * gconst30)) +
           ((gconst10 * gconst13 * gconst29 * gconst6)) + ((gconst1 * gconst22 * gconst29 * gconst6)) +
           ((gconst11 * gconst14 * gconst15 * gconst18)) + ((gconst19 * gconst2 * gconst33 * gconst4)) +
           (((-1.0) * gconst20 * gconst26 * gconst3 * gconst9)) + (((-1.0) * gconst2 * gconst20 * gconst27 * gconst9)) +
           ((gconst0 * gconst21 * gconst29 * gconst8)) + (((-1.0) * gconst0 * gconst23 * gconst29 * gconst6)) +
           ((gconst15 * gconst2 * gconst35 * gconst6)) + (((-1.0) * gconst21 * gconst26 * gconst3 * gconst8)) +
           (((-1.0) * gconst18 * gconst2 * gconst34 * gconst4)) +
           (((-1.0) * gconst14 * gconst18 * gconst22 * gconst4)) +
           (((-1.0) * gconst2 * gconst22 * gconst28 * gconst6)) + ((gconst16 * gconst2 * gconst31 * gconst9)) +
           ((gconst10 * gconst13 * gconst30 * gconst5)) + ((gconst0 * gconst20 * gconst33 * gconst5)) +
           ((gconst19 * gconst26 * gconst4 * gconst9)) + (((-1.0) * gconst13 * gconst33 * gconst5 * gconst7)) +
           ((gconst11 * gconst14 * gconst3 * gconst30)) + ((gconst22 * gconst25 * gconst5 * gconst6)) +
           ((gconst2 * gconst21 * gconst31 * gconst4)) + (((-1.0) * gconst10 * gconst18 * gconst2 * gconst28)) +
           (((-1.0) * gconst15 * gconst2 * gconst33 * gconst8)) +
           (((-1.0) * gconst10 * gconst16 * gconst26 * gconst6)) +
           (((-1.0) * gconst11 * gconst12 * gconst30 * gconst5)) +
           (((-1.0) * gconst0 * gconst17 * gconst35 * gconst6)) + (((-1.0) * gconst1 * gconst21 * gconst29 * gconst7)) +
           ((gconst0 * gconst17 * gconst32 * gconst9)) + ((gconst13 * gconst34 * gconst5 * gconst6)) +
           ((gconst16 * gconst26 * gconst7 * gconst9)) + ((gconst14 * gconst31 * gconst4 * gconst9)) +
           ((gconst10 * gconst18 * gconst25 * gconst5)) + (((-1.0) * gconst14 * gconst27 * gconst8 * gconst9)) +
           (((-1.0) * gconst15 * gconst2 * gconst32 * gconst9)) +
           (((-1.0) * gconst0 * gconst11 * gconst17 * gconst30)) +
           (((-1.0) * gconst13 * gconst19 * gconst21 * gconst5)) + ((gconst12 * gconst17 * gconst21 * gconst8)) +
           ((gconst11 * gconst15 * gconst2 * gconst30)) + (((-1.0) * gconst10 * gconst14 * gconst16 * gconst18)) +
           (((-1.0) * gconst14 * gconst3 * gconst33 * gconst8)) + ((gconst11 * gconst18 * gconst2 * gconst27)) +
           (((-1.0) * gconst16 * gconst2 * gconst34 * gconst6)) + ((gconst0 * gconst20 * gconst29 * gconst9)) +
           ((gconst0 * gconst17 * gconst33 * gconst8)) + ((gconst20 * gconst24 * gconst5 * gconst9)) +
           (((-1.0) * gconst21 * gconst25 * gconst5 * gconst7)) +
           (((-1.0) * gconst10 * gconst14 * gconst30 * gconst4)) +
           (((-1.0) * gconst13 * gconst17 * gconst21 * gconst7)) + ((gconst23 * gconst26 * gconst3 * gconst6)) +
           (((-1.0) * gconst12 * gconst17 * gconst23 * gconst6)) + ((gconst12 * gconst33 * gconst5 * gconst8)) +
           (((-1.0) * gconst13 * gconst29 * gconst7 * gconst9)) + (((-1.0) * gconst0 * gconst23 * gconst30 * gconst5)) +
           ((gconst12 * gconst32 * gconst5 * gconst9)) + ((gconst11 * gconst18 * gconst26 * gconst3)) +
           (((-1.0) * gconst11 * gconst12 * gconst29 * gconst6)) +
           (((-1.0) * gconst10 * gconst18 * gconst26 * gconst4)) +
           (((-1.0) * gconst1 * gconst19 * gconst33 * gconst5)) +
           (((-1.0) * gconst11 * gconst17 * gconst24 * gconst6)) +
           (((-1.0) * gconst14 * gconst20 * gconst21 * gconst3)) +
           (((-1.0) * gconst12 * gconst35 * gconst5 * gconst6)) +
           (((-1.0) * gconst15 * gconst2 * gconst20 * gconst21)) + ((gconst1 * gconst22 * gconst30 * gconst5)) +
           ((gconst15 * gconst18 * gconst2 * gconst23)) + (((-1.0) * gconst16 * gconst18 * gconst2 * gconst22)) +
           ((gconst14 * gconst16 * gconst19 * gconst9)) + (((-1.0) * gconst14 * gconst15 * gconst20 * gconst9)) +
           ((gconst1 * gconst17 * gconst34 * gconst6)) + (((-1.0) * gconst0 * gconst18 * gconst35 * gconst5)) +
           ((gconst10 * gconst13 * gconst17 * gconst18)) + ((gconst0 * gconst17 * gconst20 * gconst21)) +
           (((-1.0) * gconst1 * gconst17 * gconst33 * gconst7)) + ((gconst12 * gconst17 * gconst20 * gconst9)) +
           (((-1.0) * gconst14 * gconst3 * gconst32 * gconst9)) + ((gconst12 * gconst29 * gconst8 * gconst9)) +
           (((-1.0) * gconst11 * gconst12 * gconst17 * gconst18)) +
           (((-1.0) * gconst2 * gconst22 * gconst30 * gconst4)) + ((gconst19 * gconst2 * gconst28 * gconst9)) +
           ((gconst18 * gconst2 * gconst3 * gconst35)) + ((gconst14 * gconst33 * gconst4 * gconst7)) +
           (((-1.0) * gconst2 * gconst21 * gconst3 * gconst32)) + ((gconst11 * gconst15 * gconst26 * gconst6)) +
           ((gconst1 * gconst10 * gconst17 * gconst30)) + ((gconst21 * gconst24 * gconst5 * gconst8)) +
           (((-1.0) * gconst0 * gconst17 * gconst18 * gconst23)) + ((gconst1 * gconst10 * gconst18 * gconst29)) +
           ((gconst14 * gconst18 * gconst23 * gconst3)));
      op[6] =
          ((((-1.0) * gconst26 * gconst3 * gconst8 * gconst9)) + (((-1.0) * gconst16 * gconst2 * gconst22 * gconst6)) +
           ((gconst14 * gconst21 * gconst4 * gconst7)) + (((-1.0) * gconst11 * gconst12 * gconst18 * gconst5)) +
           (((-1.0) * gconst25 * gconst5 * gconst7 * gconst9)) + (((-1.0) * gconst12 * gconst23 * gconst5 * gconst6)) +
           (((-1.0) * gconst1 * gconst17 * gconst19 * gconst9)) + ((gconst0 * gconst33 * gconst5 * gconst8)) +
           ((gconst1 * gconst10 * gconst29 * gconst6)) + (((-1.0) * gconst2 * gconst27 * gconst8 * gconst9)) +
           ((gconst14 * gconst23 * gconst3 * gconst6)) + (((-1.0) * gconst2 * gconst34 * gconst4 * gconst6)) +
           (((-1.0) * gconst0 * gconst17 * gconst23 * gconst6)) + ((gconst1 * gconst10 * gconst17 * gconst18)) +
           (((-1.0) * gconst11 * gconst12 * gconst17 * gconst6)) + ((gconst13 * gconst22 * gconst5 * gconst6)) +
           ((gconst12 * gconst20 * gconst5 * gconst9)) + ((gconst24 * gconst5 * gconst8 * gconst9)) +
           (((-1.0) * gconst11 * gconst24 * gconst5 * gconst6)) + ((gconst2 * gconst3 * gconst35 * gconst6)) +
           (((-1.0) * gconst15 * gconst2 * gconst21 * gconst8)) + ((gconst0 * gconst20 * gconst21 * gconst5)) +
           ((gconst15 * gconst2 * gconst23 * gconst6)) + ((gconst1 * gconst18 * gconst22 * gconst5)) +
           (((-1.0) * gconst1 * gconst31 * gconst5 * gconst9)) + (((-1.0) * gconst10 * gconst26 * gconst4 * gconst6)) +
           ((gconst10 * gconst25 * gconst5 * gconst6)) + (((-1.0) * gconst13 * gconst17 * gconst7 * gconst9)) +
           ((gconst14 * gconst16 * gconst7 * gconst9)) + ((gconst11 * gconst2 * gconst27 * gconst6)) +
           ((gconst0 * gconst32 * gconst5 * gconst9)) + ((gconst19 * gconst2 * gconst21 * gconst4)) +
           (((-1.0) * gconst0 * gconst11 * gconst17 * gconst18)) + ((gconst11 * gconst26 * gconst3 * gconst6)) +
           (((-1.0) * gconst1 * gconst29 * gconst7 * gconst9)) + ((gconst12 * gconst21 * gconst5 * gconst8)) +
           ((gconst11 * gconst15 * gconst18 * gconst2)) + ((gconst1 * gconst17 * gconst22 * gconst6)) +
           ((gconst10 * gconst13 * gconst17 * gconst6)) + ((gconst16 * gconst19 * gconst2 * gconst9)) +
           ((gconst18 * gconst2 * gconst23 * gconst3)) + (((-1.0) * gconst2 * gconst3 * gconst32 * gconst9)) +
           (((-1.0) * gconst15 * gconst2 * gconst20 * gconst9)) + (((-1.0) * gconst1 * gconst19 * gconst21 * gconst5)) +
           (((-1.0) * gconst10 * gconst2 * gconst30 * gconst4)) + ((gconst16 * gconst2 * gconst21 * gconst7)) +
           (((-1.0) * gconst14 * gconst15 * gconst8 * gconst9)) +
           (((-1.0) * gconst10 * gconst14 * gconst18 * gconst4)) +
           (((-1.0) * gconst2 * gconst20 * gconst21 * gconst3)) + (((-1.0) * gconst0 * gconst11 * gconst30 * gconst5)) +
           (((-1.0) * gconst13 * gconst21 * gconst5 * gconst7)) + ((gconst1 * gconst34 * gconst5 * gconst6)) +
           ((gconst10 * gconst13 * gconst18 * gconst5)) + (((-1.0) * gconst14 * gconst22 * gconst4 * gconst6)) +
           (((-1.0) * gconst13 * gconst19 * gconst5 * gconst9)) + (((-1.0) * gconst0 * gconst35 * gconst5 * gconst6)) +
           (((-1.0) * gconst10 * gconst14 * gconst16 * gconst6)) +
           (((-1.0) * gconst0 * gconst11 * gconst29 * gconst6)) + ((gconst26 * gconst4 * gconst7 * gconst9)) +
           ((gconst1 * gconst10 * gconst30 * gconst5)) + ((gconst2 * gconst28 * gconst7 * gconst9)) +
           (((-1.0) * gconst2 * gconst3 * gconst33 * gconst8)) + (((-1.0) * gconst18 * gconst2 * gconst22 * gconst4)) +
           ((gconst11 * gconst14 * gconst15 * gconst6)) + ((gconst12 * gconst17 * gconst8 * gconst9)) +
           ((gconst11 * gconst2 * gconst3 * gconst30)) + (((-1.0) * gconst0 * gconst18 * gconst23 * gconst5)) +
           ((gconst0 * gconst29 * gconst8 * gconst9)) + ((gconst14 * gconst19 * gconst4 * gconst9)) +
           (((-1.0) * gconst10 * gconst2 * gconst28 * gconst6)) + ((gconst11 * gconst14 * gconst18 * gconst3)) +
           ((gconst0 * gconst17 * gconst20 * gconst9)) + (((-1.0) * gconst1 * gconst33 * gconst5 * gconst7)) +
           (((-1.0) * gconst14 * gconst21 * gconst3 * gconst8)) + ((gconst2 * gconst31 * gconst4 * gconst9)) +
           (((-1.0) * gconst1 * gconst17 * gconst21 * gconst7)) +
           (((-1.0) * gconst10 * gconst16 * gconst18 * gconst2)) +
           (((-1.0) * gconst14 * gconst20 * gconst3 * gconst9)) + ((gconst2 * gconst33 * gconst4 * gconst7)) +
           ((gconst0 * gconst17 * gconst21 * gconst8)));
      op[7] =
          ((((-1.0) * gconst15 * gconst2 * gconst8 * x116)) + ((gconst17 * gconst9 * x114)) + ((x112 * x115)) +
           ((gconst21 * x142)) + ((gconst20 * gconst9 * x133)) + (((-1.0) * gconst4 * x110 * x112)) +
           ((gconst12 * gconst8 * x136)) + (((-1.0) * gconst19 * x116 * x122)) +
           (((-1.0) * gconst22 * gconst4 * x106)) + ((x113 * x114)) + ((gconst1 * gconst17 * x112)) +
           ((gconst14 * gconst7 * x137)) + ((gconst11 * gconst15 * x106)) + (((-1.0) * gconst20 * x116 * x121)) +
           (((-1.0) * x113 * x126)) + (((-1.0) * gconst10 * gconst16 * x106)) +
           (((-1.0) * gconst3 * gconst8 * gconst9 * x110)) + ((gconst23 * gconst3 * x106)) +
           (((-1.0) * gconst6 * x130 * x133)) + (((-1.0) * gconst5 * x120 * x125)) +
           (((-1.0) * gconst9 * x105 * x126)) + (((-1.0) * gconst11 * x133 * x134)) + ((gconst10 * gconst18 * x122)) +
           (((-1.0) * gconst0 * x105 * x125)) + (((-1.0) * gconst7 * x115 * x116)) + ((gconst19 * gconst2 * x137)) +
           ((x107 * x139)) + ((gconst16 * gconst2 * gconst7 * gconst9)) + ((x107 * x127)) +
           ((gconst22 * gconst6 * x122)) + (((-1.0) * gconst21 * gconst8 * x121)) + (((-1.0) * x127 * x140)));
      op[8] = (((x112 * x122)) + (((-1.0) * x125 * x133)) + ((x106 * x107)) + ((gconst2 * gconst7 * x137)) +
               (((-1.0) * gconst8 * x116 * x121)) + ((x114 * x136)) + (((-1.0) * gconst7 * x116 * x122)) +
               (((-1.0) * x106 * x140)));
      polyroots8(op, zeror, numroots);
      IkReal j32array[8], cj32array[8], sj32array[8], tempj32array[1];
      int numsolutions = 0;
      for (int ij32 = 0; ij32 < numroots; ++ij32)
      {
        IkReal htj32 = zeror[ij32];
        tempj32array[0] = ((2.0) * (atan(htj32)));
        for (int kj32 = 0; kj32 < 1; ++kj32)
        {
          j32array[numsolutions] = tempj32array[kj32];
          if (j32array[numsolutions] > IKPI)
          {
            j32array[numsolutions] -= IK2PI;
          }
          else if (j32array[numsolutions] < -IKPI)
          {
            j32array[numsolutions] += IK2PI;
          }
          sj32array[numsolutions] = IKsin(j32array[numsolutions]);
          cj32array[numsolutions] = IKcos(j32array[numsolutions]);
          numsolutions++;
        }
      }
      bool j32valid[8] = { true, true, true, true, true, true, true, true };
      _nj32 = 8;
      for (int ij32 = 0; ij32 < numsolutions; ++ij32)
      {
        if (!j32valid[ij32])
        {
          continue;
        }
        j32 = j32array[ij32];
        cj32 = cj32array[ij32];
        sj32 = sj32array[ij32];
        htj32 = IKtan(j32 / 2);

        _ij32[0] = ij32;
        _ij32[1] = -1;
        for (int iij32 = ij32 + 1; iij32 < numsolutions; ++iij32)
        {
          if (j32valid[iij32] && IKabs(cj32array[ij32] - cj32array[iij32]) < IKFAST_SOLUTION_THRESH &&
              IKabs(sj32array[ij32] - sj32array[iij32]) < IKFAST_SOLUTION_THRESH)
          {
            j32valid[iij32] = false;
            _ij32[1] = iij32;
            break;
          }
        }
        {
          IkReal j31eval[2];
          IkReal x143 = cj32 * cj32;
          IkReal x144 = (py * r00);
          IkReal x145 = ((0.00090000002123525) * cj32);
          IkReal x146 = (px * r01);
          IkReal x147 = (cj32 * sj32);
          IkReal x148 = ((0.00823799779437327) * sj32);
          IkReal x149 = ((9.15333066666667) * sj32);
          IkReal x150 = ((0.0372525580320032) * x143);
          IkReal x151 = ((41.3917301700438) * x143);
          j31eval[0] =
              (((x144 * x149)) + ((cj32 * x146)) + (((-1.0) * x144 * x151)) + (((-9.15333045069637) * x144 * x147)) +
               (((-1.0) * cj32 * x144)) + (((42.391730170066) * x144)) + ((x146 * x151)) + (((-1.0) * x146 * x149)) +
               (((9.15333045069637) * x146 * x147)) + (((-42.391730170066) * x146)));
          j31eval[1] =
              IKsign(((((-0.0381525580532584) * x146)) + ((x144 * x148)) + (((-1.0) * x144 * x150)) +
                      (((-1.0) * x144 * x145)) + ((x145 * x146)) + (((0.0381525580532584) * x144)) + ((x146 * x150)) +
                      (((-1.0) * x146 * x148)) + (((-0.0082379976) * x144 * x147)) + (((0.0082379976) * x146 * x147))));
          if (IKabs(j31eval[0]) < 0.0000010000000000 || IKabs(j31eval[1]) < 0.0000010000000000)
          {
            {
              IkReal evalcond[1];
              bool bgotonextstatement = true;
              do
              {
                evalcond[0] = ((IKabs(px)) + (IKabs(py)));
                if (IKabs(evalcond[0]) < 0.0000050000000000)
                {
                  bgotonextstatement = false;
                  {
                    IkReal j31eval[2];
                    px = 0;
                    py = 0;
                    pp = pz * pz;
                    IkReal x152 = r02 * r02;
                    IkReal x153 = cj32 * cj32;
                    IkReal x154 = pz * pz;
                    IkReal x155 = (cj32 * sj32);
                    IkReal x156 = ((610.222030046425) * pz);
                    IkReal x157 = ((3.8279945804304e-9) * sj32);
                    IkReal x158 = ((676.799984031092) * sj32);
                    IkReal x159 = ((2.99622093489279e-9) * pz);
                    IkReal x160 = ((3.04176349310316e-8) * sj32);
                    IkReal x161 = ((66.6666650936852) * pz);
                    IkReal x162 = (pz * x152);
                    IkReal x163 = (sj32 * x152);
                    IkReal x164 = (sj32 * x154);
                    IkReal x165 = (x152 * x153);
                    j31eval[0] =
                        ((-19.3053304271331) + (((-85.1738367161254) * sj32)) + (((85.1738367161254) * x163)) +
                         (((-1.0) * x161)) + (((-1.0) * pz * x158)) + (((91.9246107354696) * x152 * x155)) +
                         (((2222.22216978951) * x154 * x163)) + ((x152 * x161)) + (((-91.9246107354696) * x155)) +
                         (((-1.0) * x161 * x165)) + (((-2222.22216978951) * x164)) + ((x152 * x155 * x156)) +
                         (((19.3053304271331) * x153)) + (((19.3053304271331) * x152)) +
                         (((-19.3053304271331) * x165)) + (((-1.0) * x155 * x156)) + ((x158 * x162)) + ((x153 * x161)));
                    j31eval[1] = IKsign(
                        ((-8.67645548183838e-10) + ((x153 * x159)) + (((4.13139674424143e-9) * x152 * x155)) +
                         (((-1.0) * x157)) + (((-1.0) * x159)) + (((-8.67645548183838e-10) * x165)) +
                         (((-1.0) * x159 * x165)) + (((-2.74254009674629e-8) * pz * x155)) +
                         (((9.9874031163093e-8) * x154 * x163)) + ((x152 * x159)) + ((x152 * x157)) +
                         (((2.74254009674629e-8) * x155 * x162)) + (((-4.13139674424143e-9) * x155)) +
                         (((-9.9874031163093e-8) * x164)) + (((-1.0) * pz * x160)) + (((8.67645548183838e-10) * x153)) +
                         (((8.67645548183838e-10) * x152)) + ((x160 * x162))));
                    if (IKabs(j31eval[0]) < 0.0000010000000000 || IKabs(j31eval[1]) < 0.0000010000000000)
                    {
                      continue;  // no branches [j31]
                    }
                    else
                    {
                      {
                        IkReal j31array[1], cj31array[1], sj31array[1];
                        bool j31valid[1] = { false };
                        _nj31 = 1;
                        CheckValue<IkReal> x166 = IKPowWithIntegerCheck(
                            IKsign(
                                ((-8.67645548183838e-10) + (((-3.8279945804304e-9) * sj32)) +
                                 (((-4.13139674424143e-9) * cj32 * sj32)) +
                                 (((r02 * r02) *
                                   (((8.67645548183838e-10) + (((3.04176349310316e-8) * pz * sj32)) +
                                     (((4.13139674424143e-9) * cj32 * sj32)) +
                                     (((2.74254009674629e-8) * cj32 * pz * sj32)) +
                                     (((9.9874031163093e-8) * sj32 * (pz * pz))) + (((3.8279945804304e-9) * sj32)) +
                                     (((-2.99622093489279e-9) * pz * (cj32 * cj32))) +
                                     (((-8.67645548183838e-10) * (cj32 * cj32))) + (((2.99622093489279e-9) * pz)))))) +
                                 (((-2.74254009674629e-8) * cj32 * pz * sj32)) +
                                 (((2.99622093489279e-9) * pz * (cj32 * cj32))) + (((-2.99622093489279e-9) * pz)) +
                                 (((-9.9874031163093e-8) * sj32 * (pz * pz))) +
                                 (((8.67645548183838e-10) * (cj32 * cj32))) + (((-3.04176349310316e-8) * pz * sj32)))),
                            -1);
                        if (!x166.valid)
                        {
                          continue;
                        }
                        CheckValue<IkReal> x167 = IKatan2WithCheck(
                            IkReal(((((-0.00595873025336251) * cj32 * r01 * r02 * sj32)) +
                                    (((0.00470693029574106) * pz * r01 * sj32)) + (((-0.001833177990116) * r01 * r02)) +
                                    (((0.000592357154111894) * r01 * sj32)) +
                                    (((0.0144889) * cj32 * r01 * r02 * (pz * pz))) +
                                    (((-0.258809562482804) * r00 * r02 * sj32 * (pz * pz * pz))) +
                                    (((0.00776428687448413) * r00 * r02 * (cj32 * cj32) * (pz * pz))) +
                                    (((-0.0214118690683365) * cj32 * pz * r00 * r02 * sj32)) +
                                    (((-0.0172168993356158) * pz * r01 * r02)) +
                                    (((-3.59741105231115e-5) * r00 * (cj32 * cj32))) +
                                    (((-1.17896620738897e-5) * cj32 * r00 * r02)) +
                                    (((0.0004340815990313) * cj32 * pz * r01 * r02)) +
                                    (((0.000502976631044613) * r00 * r02 * (cj32 * cj32))) +
                                    (((-0.0434667765194764) * r01 * r02 * (pz * pz))) +
                                    (((0.00414095299972487) * r00 * sj32 * (pz * pz))) +
                                    (((-0.022039348658599) * pz * r00 * r02 * sj32)) +
                                    (((-0.00159657336372795) * cj32 * r00 * r02 * sj32)) +
                                    (((0.0167828029642465) * pz * r01 * r02 * (cj32 * cj32))) +
                                    (((0.00449679030636171) * pz * r00 * r02 * (cj32 * cj32))) +
                                    (((0.000639306656920826) * cj32 * r01 * sj32)) +
                                    (((0.000116338737104803) * cj32 * pz * r00 * r02)) +
                                    (((-0.00576363028972647) * r01 * r02 * sj32)) +
                                    (((0.0154548538735916) * r01 * sj32 * (pz * pz))) +
                                    (((0.0289778510129843) * r01 * r02 * (cj32 * cj32) * (pz * pz))) +
                                    (((3.59741105231115e-5) * r00)) + (((-0.000491179273469012) * r00 * r02)) +
                                    (((0.00113710536244821) * cj32 * pz * r00 * sj32)) +
                                    (((-0.00154429943710632) * r00 * r02 * sj32)) +
                                    (((-0.00461307311818736) * pz * r00 * r02)) +
                                    (((0.00017129497569977) * cj32 * r00 * sj32)) +
                                    (((-0.00013426248049762) * r01 * (cj32 * cj32))) +
                                    (((0.00424390163729995) * cj32 * pz * r01 * sj32)) +
                                    (((-0.265243852331247) * cj32 * r01 * r02 * sj32 * (pz * pz))) +
                                    (((0.000463645616207748) * pz * r01)) + (((0.000158715388336318) * r00 * sj32)) +
                                    (((-0.0710690851530131) * cj32 * r00 * r02 * sj32 * (pz * pz))) +
                                    (((-0.0116464303117262) * r00 * r02 * (pz * pz))) +
                                    (((-0.0799133328905538) * cj32 * pz * r01 * r02 * sj32)) +
                                    (((0.00013426248049762) * r01)) + (((0.00388224) * cj32 * r00 * r02 * (pz * pz))) +
                                    (((-0.965928367099476) * r01 * r02 * sj32 * (pz * pz * pz))) +
                                    (((-0.000124228589991746) * pz * r00 * (cj32 * cj32))) +
                                    (((-0.0822551989869037) * pz * r01 * r02 * sj32)) +
                                    (((0.000124228589991746) * pz * r00)) +
                                    (((-0.441274715225724) * r01 * r02 * sj32 * (pz * pz))) +
                                    (((-4.4016136502005e-5) * cj32 * r01 * r02)) +
                                    (((0.00187719209389589) * r01 * r02 * (cj32 * cj32))) +
                                    (((-0.118234560524644) * r00 * r02 * sj32 * (pz * pz))) +
                                    (((0.00126116864559621) * pz * r00 * sj32)) +
                                    (((-0.000463645616207748) * pz * r01 * (cj32 * cj32))))),
                            IkReal(((((-0.0434667765194764) * r00 * r02 * (pz * pz))) +
                                    (((-4.4016136502005e-5) * cj32 * r00 * r02)) +
                                    (((0.022039348658599) * pz * r01 * r02 * sj32)) +
                                    (((0.0710690851530131) * cj32 * r01 * r02 * sj32 * (pz * pz))) +
                                    (((0.00154429943710632) * r01 * r02 * sj32)) +
                                    (((0.000124228589991746) * pz * r01 * (cj32 * cj32))) +
                                    (((0.000491179273469012) * r01 * r02)) +
                                    (((-0.00595873025336251) * cj32 * r00 * r02 * sj32)) +
                                    (((-0.965928367099476) * r00 * r02 * sj32 * (pz * pz * pz))) +
                                    (((-0.0172168993356158) * pz * r00 * r02)) +
                                    (((-0.000116338737104803) * cj32 * pz * r01 * r02)) +
                                    (((-0.00776428687448413) * r01 * r02 * (cj32 * cj32) * (pz * pz))) +
                                    (((-0.000158715388336318) * r01 * sj32)) +
                                    (((0.0289778510129843) * r00 * r02 * (cj32 * cj32) * (pz * pz))) +
                                    (((-0.0799133328905538) * cj32 * pz * r00 * r02 * sj32)) +
                                    (((0.0154548538735916) * r00 * sj32 * (pz * pz))) +
                                    (((-0.00388224) * cj32 * r01 * r02 * (pz * pz))) +
                                    (((0.0004340815990313) * cj32 * pz * r00 * r02)) +
                                    (((0.000639306656920826) * cj32 * r00 * sj32)) +
                                    (((0.00424390163729995) * cj32 * pz * r00 * sj32)) +
                                    (((1.17896620738897e-5) * cj32 * r01 * r02)) +
                                    (((-0.00017129497569977) * cj32 * r01 * sj32)) +
                                    (((0.00461307311818736) * pz * r01 * r02)) +
                                    (((-0.00449679030636171) * pz * r01 * r02 * (cj32 * cj32))) +
                                    (((0.0214118690683365) * cj32 * pz * r01 * r02 * sj32)) +
                                    (((-0.00113710536244821) * cj32 * pz * r01 * sj32)) +
                                    (((-0.00126116864559621) * pz * r01 * sj32)) +
                                    (((3.59741105231115e-5) * r01 * (cj32 * cj32))) +
                                    (((-0.441274715225724) * r00 * r02 * sj32 * (pz * pz))) +
                                    (((0.000463645616207748) * pz * r00)) +
                                    (((-0.00013426248049762) * r00 * (cj32 * cj32))) +
                                    (((-0.265243852331247) * cj32 * r00 * r02 * sj32 * (pz * pz))) +
                                    (((-0.00576363028972647) * r00 * r02 * sj32)) + (((0.00013426248049762) * r00)) +
                                    (((-3.59741105231115e-5) * r01)) +
                                    (((0.258809562482804) * r01 * r02 * sj32 * (pz * pz * pz))) +
                                    (((0.00159657336372795) * cj32 * r01 * r02 * sj32)) +
                                    (((-0.0822551989869037) * pz * r00 * r02 * sj32)) +
                                    (((0.00187719209389589) * r00 * r02 * (cj32 * cj32))) +
                                    (((-0.000502976631044613) * r01 * r02 * (cj32 * cj32))) +
                                    (((-0.001833177990116) * r00 * r02)) + (((0.000592357154111894) * r00 * sj32)) +
                                    (((-0.000124228589991746) * pz * r01)) +
                                    (((0.0144889) * cj32 * r00 * r02 * (pz * pz))) +
                                    (((-0.00414095299972487) * r01 * sj32 * (pz * pz))) +
                                    (((0.0167828029642465) * pz * r00 * r02 * (cj32 * cj32))) +
                                    (((-0.000463645616207748) * pz * r00 * (cj32 * cj32))) +
                                    (((0.118234560524644) * r01 * r02 * sj32 * (pz * pz))) +
                                    (((0.00470693029574106) * pz * r00 * sj32)) +
                                    (((0.0116464303117262) * r01 * r02 * (pz * pz))))),
                            IKFAST_ATAN2_MAGTHRESH);
                        if (!x167.valid)
                        {
                          continue;
                        }
                        j31array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x166.value))) + (x167.value));
                        sj31array[0] = IKsin(j31array[0]);
                        cj31array[0] = IKcos(j31array[0]);
                        if (j31array[0] > IKPI)
                        {
                          j31array[0] -= IK2PI;
                        }
                        else if (j31array[0] < -IKPI)
                        {
                          j31array[0] += IK2PI;
                        }
                        j31valid[0] = true;
                        for (int ij31 = 0; ij31 < 1; ++ij31)
                        {
                          if (!j31valid[ij31])
                          {
                            continue;
                          }
                          _ij31[0] = ij31;
                          _ij31[1] = -1;
                          for (int iij31 = ij31 + 1; iij31 < 1; ++iij31)
                          {
                            if (j31valid[iij31] && IKabs(cj31array[ij31] - cj31array[iij31]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj31array[ij31] - sj31array[iij31]) < IKFAST_SOLUTION_THRESH)
                            {
                              j31valid[iij31] = false;
                              _ij31[1] = iij31;
                              break;
                            }
                          }
                          j31 = j31array[ij31];
                          cj31 = cj31array[ij31];
                          sj31 = sj31array[ij31];
                          {
                            IkReal evalcond[2];
                            IkReal x168 = IKcos(j31);
                            IkReal x169 = IKsin(j31);
                            IkReal x170 = pz * pz;
                            IkReal x171 = ((0.0004340815990313) * cj32);
                            IkReal x172 = (r02 * sj32);
                            IkReal x173 = ((4.54620195265453e-5) * sj32);
                            IkReal x174 = ((0.000116338737104803) * cj32);
                            IkReal x175 = (cj32 * r02);
                            IkReal x176 = ((0.0144889255064921) * cj32);
                            IkReal x177 = ((0.00776428687448413) * pz);
                            IkReal x178 = ((0.00388214343724207) * cj32);
                            IkReal x179 = (cj32 * pz);
                            IkReal x180 = ((0.0289778510129843) * pz);
                            IkReal x181 = ((0.000169684806411447) * sj32);
                            IkReal x182 = (pz * r02);
                            IkReal x183 = ((0.132621926165623) * sj32);
                            IkReal x184 = (pz * sj32);
                            IkReal x185 = ((0.0355345425765065) * sj32);
                            IkReal x186 = (r01 * x169);
                            IkReal x187 = (r00 * x169);
                            IkReal x188 = (sj32 * x170);
                            IkReal x189 = (r00 * x168);
                            IkReal x190 = (r01 * x168);
                            evalcond[0] =
                                ((-0.016) + ((x176 * x190)) + ((x178 * x189)) + ((x178 * x186)) +
                                 (((-0.00388224) * x186)) + (((-0.00388224) * x189)) + (((0.0144889) * x187)) +
                                 (((0.13729996) * x175)) + (((0.15228) * r02)) + x182 + (((-1.0) * x176 * x187)) +
                                 (((-0.0144889) * x190)) + (((0.015) * x172)) + (((-1.0) * x185 * x189)) +
                                 (((-1.0) * x185 * x186)) + ((x183 * x187)) + (((-1.0) * x183 * x190)));
                            evalcond[1] =
                                ((0.00439359872) + (((-1.0) * x170 * x175)) + ((x180 * x187)) +
                                 (((-0.0300000007078417) * pz * x172)) + (((0.0289778) * x179 * x190)) +
                                 (((-0.0457527274054029) * x175)) + (((-0.27459992) * x182)) +
                                 (((-1.0) * x180 * x190)) + ((x174 * x186)) + ((x174 * x189)) +
                                 (((-0.258809562482804) * x188 * x189)) + (((0.000434096371369244) * x187)) +
                                 (((-1.0) * x171 * x187)) + (((0.965928367099476) * x187 * x188)) + (((0.032) * x179)) +
                                 (((-1.0) * x177 * x186)) + (((-1.0) * x177 * x189)) + (((-0.0289778) * x179 * x187)) +
                                 (((-0.000434096371369244) * x190)) + (((-0.965928367099476) * x188 * x190)) +
                                 (((-0.0422660758282176) * r02)) + (((-0.0788230403497629) * x184 * x189)) +
                                 (((-0.0788230403497629) * x184 * x186)) + (((-0.00868739890779013) * x172)) +
                                 (((0.00776448) * x179 * x189)) + (((0.00776448) * x179 * x186)) + ((x171 * x190)) +
                                 (((-0.294183143483816) * x184 * x190)) + (((0.294183143483816) * x184 * x187)) +
                                 (((0.000480000011325467) * sj32)) + (((-0.258809562482804) * x186 * x188)) +
                                 (((-0.000116282811825644) * x189)) + (((-0.000116282811825644) * x186)) +
                                 (((-1.0) * x173 * x189)) + (((-1.0) * x173 * x186)) + (((-1.0) * x181 * x190)) +
                                 (((-0.30456) * pz * x175)) + ((x181 * x187)) + (((0.00487296) * cj32)));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                            {
                              continue;
                            }
                          }

                          innerfn(solutions);
                        }
                      }
                    }
                  }
                }
              } while (0);
              if (bgotonextstatement)
              {
                bool bgotonextstatement = true;
                do
                {
                  if (1)
                  {
                    bgotonextstatement = false;
                    continue;  // branch miss [j31]
                  }
                } while (0);
                if (bgotonextstatement)
                {
                }
              }
            }
          }
          else
          {
            {
              IkReal j31array[1], cj31array[1], sj31array[1];
              bool j31valid[1] = { false };
              _nj31 = 1;
              CheckValue<IkReal> x646 = IKatan2WithCheck(
                  IkReal(
                      ((((0.0079573155699374) * py * r02 * (cj32 * cj32))) + (((0.0083913971689687) * pz * r01)) +
                       (((-0.265243852331247) * px * py * r00 * sj32)) + (((0.00170747342947527) * r01)) +
                       (((-0.0144889) * r01 * (py * py))) + (((0.00113710536244821) * px * sj32)) +
                       (((0.0355345425765065) * r00 * sj32 * (py * py))) +
                       (((-0.000116282811825644) * cj32 * pz * r00)) + (((0.00424390163729995) * py * sj32)) +
                       (((-0.00175148956597728) * r01 * (cj32 * cj32))) + (((-0.0289778) * py * pz * r02)) +
                       (((0.0289778510129843) * cj32 * py * pz * r02)) +
                       (((-0.0710690851530131) * px * py * r01 * sj32)) +
                       (((0.0359833025501313) * cj32 * pz * r01 * sj32)) + (((1.17973575756015e-5) * cj32 * r00)) +
                       (((0.00388214343724207) * cj32 * r00 * (px * px))) +
                       (((-0.000434096371369244) * cj32 * pz * r01)) +
                       (((-0.00964131824562803) * cj32 * px * r02 * sj32)) + (((0.0004636448) * py)) +
                       (((0.000434096371369244) * cj32 * py * r02)) + (((-0.0022484112916952) * px * r02)) +
                       (((0.132621926165623) * r01 * sj32 * (pz * pz))) +
                       (((-0.0079573155699374) * pz * r01 * (cj32 * cj32))) + (((-0.0083913971689687) * py * r02)) +
                       (((-0.0359833025501313) * cj32 * py * r02 * sj32)) +
                       (((-0.00388214343724207) * cj32 * r00 * (pz * pz))) +
                       (((0.0408260008330022) * pz * r01 * sj32)) + (((0.0289778510129843) * cj32 * px * py * r00)) +
                       (((-0.265243852331247) * py * pz * r02 * sj32)) +
                       (((0.0355345425765065) * r00 * sj32 * (pz * pz))) + (((0.0144889) * r01 * (px * px))) +
                       (((0.00388224) * r00 * (pz * pz))) + (((0.00536017757596867) * cj32 * r01 * sj32)) +
                       (((0.000116282811825644) * cj32 * px * r02)) +
                       (((-0.0144889255064921) * cj32 * r01 * (pz * pz))) +
                       (((-0.0710690851530131) * px * pz * r02 * sj32)) + (((0.00388224) * r00 * (py * py))) +
                       (((-0.0289778) * px * py * r00)) + (((0.00776428687448413) * cj32 * px * py * r01)) +
                       (((4.40141037798865e-5) * cj32 * r01)) + (((-0.0109388674871008) * px * r02 * sj32)) +
                       (((0.0144889) * r01 * (pz * pz))) + (((-0.00776448) * px * py * r01)) +
                       (((-0.000124228589991746) * cj32 * px)) + (((0.0144889255064921) * cj32 * r01 * (py * py))) +
                       (((0.00139570259686717) * r00 * sj32)) + (((0.000457502123635819) * r00)) +
                       (((-0.132621926165623) * r01 * sj32 * (py * py))) + (((-0.00388224) * r00 * (px * px))) +
                       (((-0.0144889255064921) * cj32 * r01 * (px * px))) +
                       (((0.00776428687448413) * cj32 * px * pz * r02)) + (((-0.0408260008330022) * py * r02 * sj32)) +
                       (((-0.00776448) * px * pz * r02)) + (((0.00964131824562803) * cj32 * pz * r00 * sj32)) +
                       (((-0.0355345425765065) * r00 * sj32 * (px * px))) +
                       (((-0.00388214343724207) * cj32 * r00 * (py * py))) +
                       (((0.00213207255459039) * px * r02 * (cj32 * cj32))) + (((0.00520903420171125) * r01 * sj32)) +
                       (((-0.000469291785709709) * r00 * (cj32 * cj32))) +
                       (((0.132621926165623) * r01 * sj32 * (px * px))) + (((0.0109388674871008) * pz * r00 * sj32)) +
                       (((-0.00213207255459039) * pz * r00 * (cj32 * cj32))) + (((0.00012423168) * px)) +
                       (((0.0014361988533708) * cj32 * r00 * sj32)) + (((-0.000463645616207748) * cj32 * py)) +
                       (((0.0022484112916952) * pz * r00)))),
                  IkReal((
                      (((0.00213207255459039) * pz * r01 * (cj32 * cj32))) + (((-0.00139570259686717) * r01 * sj32)) +
                      (((0.0083913971689687) * pz * r00)) + (((-0.00388224) * r01 * (pz * pz))) +
                      (((-0.00213207255459039) * py * r02 * (cj32 * cj32))) + (((-0.000457502123635819) * r01)) +
                      (((0.00170747342947527) * r00)) + (((0.000124228589991746) * cj32 * py)) +
                      (((-0.00776428687448413) * cj32 * py * pz * r02)) + (((-1.17973575756015e-5) * cj32 * r01)) +
                      (((-0.265243852331247) * px * pz * r02 * sj32)) +
                      (((-0.00175148956597728) * r00 * (cj32 * cj32))) + (((0.0022484112916952) * py * r02)) +
                      (((-0.0144889255064921) * cj32 * r00 * (py * py))) + (((-0.00388224) * r01 * (px * px))) +
                      (((0.132621926165623) * r00 * sj32 * (py * py))) +
                      (((0.00388214343724207) * cj32 * r01 * (px * px))) +
                      (((0.000116282811825644) * cj32 * pz * r01)) + (((0.0359833025501313) * cj32 * pz * r00 * sj32)) +
                      (((0.000469291785709709) * r01 * (cj32 * cj32))) + (((0.0109388674871008) * py * r02 * sj32)) +
                      (((-0.000434096371369244) * cj32 * pz * r00)) + (((-0.0109388674871008) * pz * r01 * sj32)) +
                      (((0.0004636448) * px)) + (((0.00536017757596867) * cj32 * r00 * sj32)) +
                      (((-0.0408260008330022) * px * r02 * sj32)) + (((0.00964131824562803) * cj32 * py * r02 * sj32)) +
                      (((-0.000116282811825644) * cj32 * py * r02)) + (((-0.0083913971689687) * px * r02)) +
                      (((-0.0144889255064921) * cj32 * r00 * (pz * pz))) +
                      (((-0.0014361988533708) * cj32 * r01 * sj32)) +
                      (((-0.0079573155699374) * pz * r00 * (cj32 * cj32))) +
                      (((0.0289778510129843) * cj32 * px * py * r01)) +
                      (((-0.00964131824562803) * cj32 * pz * r01 * sj32)) + (((-0.00113710536244821) * py * sj32)) +
                      (((0.0408260008330022) * pz * r00 * sj32)) + (((0.0079573155699374) * px * r02 * (cj32 * cj32))) +
                      (((-0.0289778) * px * py * r01)) + (((-0.00388214343724207) * cj32 * r01 * (py * py))) +
                      (((0.0289778510129843) * cj32 * px * pz * r02)) + (((4.40141037798865e-5) * cj32 * r00)) +
                      (((0.00776448) * py * pz * r02)) + (((0.0355345425765065) * r01 * sj32 * (py * py))) +
                      (((-0.0355345425765065) * r01 * sj32 * (px * px))) +
                      (((0.132621926165623) * r00 * sj32 * (pz * pz))) + (((-0.0022484112916952) * pz * r01)) +
                      (((0.0144889) * r00 * (pz * pz))) + (((0.00388224) * r01 * (py * py))) +
                      (((0.00424390163729995) * px * sj32)) + (((-0.0144889) * r00 * (px * px))) +
                      (((0.000434096371369244) * cj32 * px * r02)) + (((-0.00012423168) * py)) +
                      (((0.00388214343724207) * cj32 * r01 * (pz * pz))) +
                      (((0.0144889255064921) * cj32 * r00 * (px * px))) +
                      (((-0.132621926165623) * r00 * sj32 * (px * px))) +
                      (((-0.00776428687448413) * cj32 * px * py * r00)) + (((0.0144889) * r00 * (py * py))) +
                      (((-0.0359833025501313) * cj32 * px * r02 * sj32)) + (((0.00520903420171125) * r00 * sj32)) +
                      (((-0.0289778) * px * pz * r02)) + (((-0.0355345425765065) * r01 * sj32 * (pz * pz))) +
                      (((0.0710690851530131) * px * py * r00 * sj32)) +
                      (((0.0710690851530131) * py * pz * r02 * sj32)) + (((0.00776448) * px * py * r00)) +
                      (((-0.000463645616207748) * cj32 * px)) + (((-0.265243852331247) * px * py * r01 * sj32)))),
                  IKFAST_ATAN2_MAGTHRESH);
              if (!x646.valid)
              {
                continue;
              }
              CheckValue<IkReal> x647 = IKPowWithIntegerCheck(
                  IKsign(((((0.00823799779437327) * py * r00 * sj32)) + (((-0.00090000002123525) * cj32 * py * r00)) +
                          (((0.0372525580320032) * px * r01 * (cj32 * cj32))) +
                          (((-0.00823799779437327) * px * r01 * sj32)) +
                          (((-0.0372525580320032) * py * r00 * (cj32 * cj32))) +
                          (((0.0082379976) * cj32 * px * r01 * sj32)) + (((-0.0082379976) * cj32 * py * r00 * sj32)) +
                          (((0.00090000002123525) * cj32 * px * r01)) + (((-0.0381525580532584) * px * r01)) +
                          (((0.0381525580532584) * py * r00)))),
                  -1);
              if (!x647.valid)
              {
                continue;
              }
              j31array[0] = ((-1.5707963267949) + (x646.value) + (((1.5707963267949) * (x647.value))));
              sj31array[0] = IKsin(j31array[0]);
              cj31array[0] = IKcos(j31array[0]);
              if (j31array[0] > IKPI)
              {
                j31array[0] -= IK2PI;
              }
              else if (j31array[0] < -IKPI)
              {
                j31array[0] += IK2PI;
              }
              j31valid[0] = true;
              for (int ij31 = 0; ij31 < 1; ++ij31)
              {
                if (!j31valid[ij31])
                {
                  continue;
                }
                _ij31[0] = ij31;
                _ij31[1] = -1;
                for (int iij31 = ij31 + 1; iij31 < 1; ++iij31)
                {
                  if (j31valid[iij31] && IKabs(cj31array[ij31] - cj31array[iij31]) < IKFAST_SOLUTION_THRESH &&
                      IKabs(sj31array[ij31] - sj31array[iij31]) < IKFAST_SOLUTION_THRESH)
                  {
                    j31valid[iij31] = false;
                    _ij31[1] = iij31;
                    break;
                  }
                }
                j31 = j31array[ij31];
                cj31 = cj31array[ij31];
                sj31 = sj31array[ij31];
                {
                  IkReal evalcond[3];
                  IkReal x648 = IKcos(j31);
                  IkReal x649 = IKsin(j31);
                  IkReal x650 = ((0.0710690851530131) * sj32);
                  IkReal x651 = ((0.0289778510129843) * cj32);
                  IkReal x652 = ((0.0144889255064921) * cj32);
                  IkReal x653 = ((0.00388214343724207) * cj32);
                  IkReal x654 = ((0.132621926165623) * sj32);
                  IkReal x655 = ((0.00776428687448413) * cj32);
                  IkReal x656 = ((0.265243852331247) * sj32);
                  IkReal x657 = ((0.0355345425765065) * sj32);
                  IkReal x658 = (py * x649);
                  IkReal x659 = (r00 * x649);
                  IkReal x660 = (py * x648);
                  IkReal x661 = (r01 * x649);
                  IkReal x662 = (r00 * x648);
                  IkReal x663 = (r01 * x648);
                  IkReal x664 = (px * x649);
                  IkReal x665 = (px * x648);
                  evalcond[0] =
                      ((-0.016) + (((-1.0) * x654 * x663)) + (((-0.0144889) * x663)) + ((px * r00)) +
                       (((-0.00388224) * x661)) + (((-0.00388224) * x662)) + (((0.0144889) * x659)) +
                       (((0.15228) * r02)) + (((0.015) * r02 * sj32)) + ((x654 * x659)) + (((-1.0) * x657 * x662)) +
                       (((-1.0) * x657 * x661)) + ((x653 * x662)) + ((x653 * x661)) + ((x652 * x663)) + ((pz * r02)) +
                       ((py * r01)) + (((-1.0) * x652 * x659)) + (((0.13729996) * cj32 * r02)));
                  evalcond[1] =
                      ((0.0383282274266003) + (((-0.0289778) * x660)) + ((x651 * x660)) + (((-0.00776448) * x665)) +
                       (((0.00868739889718663) * sj32)) + (((0.0413660758069824) * cj32)) + (px * px) +
                       (((0.0289778) * x664)) + ((x656 * x664)) + (py * py) + (((0.03) * pz * sj32)) + (pz * pz) +
                       (((0.30456) * pz)) + (((-1.0) * x656 * x660)) + ((x655 * x658)) + (((-1.0) * x650 * x658)) +
                       (((-1.0) * x650 * x665)) + (((0.27459992) * cj32 * pz)) + ((x655 * x665)) +
                       (((-1.0) * x651 * x664)) + (((-0.00776448) * x658)));
                  evalcond[2] =
                      ((0.00439359872) + (((0.0289778510129843) * pz * r00 * (IKsin(j31)))) +
                       (((0.000116338737104803) * cj32 * r01 * (IKsin(j31)))) +
                       (((1.99748062326186e-7) * px * r01 * sj32)) +
                       (((0.517619124965609) * py * pz * r02 * sj32 * (IKsin(j31)))) +
                       (((-0.258809562482804) * r00 * sj32 * (py * py) * (IKcos(j31)))) +
                       (((1.93185673419895) * py * pz * r02 * sj32 * (IKcos(j31)))) +
                       (((0.517619124965609) * px * py * r00 * sj32 * (IKsin(j31)))) +
                       (((-0.258809562482804) * r00 * sj32 * (pz * pz) * (IKcos(j31)))) +
                       (((0.0289778) * cj32 * pz * r01 * (IKcos(j31)))) +
                       (((0.000169684806411447) * r00 * sj32 * (IKsin(j31)))) +
                       (((-0.294183143483816) * px * r02 * sj32 * (IKsin(j31)))) +
                       (((-0.0289778510129843) * pz * r01 * (IKcos(j31)))) +
                       (((-4.54620195265453e-5) * r00 * sj32 * (IKcos(j31)))) +
                       (((-0.00868739890779013) * r02 * sj32)) + (((-0.27459992) * pz * r02)) +
                       ((cj32 * r02 * (px * px))) + (((-0.294183143483816) * pz * r01 * sj32 * (IKcos(j31)))) +
                       (((-0.965928367099476) * r01 * sj32 * (pz * pz) * (IKcos(j31)))) +
                       (((0.258809562482804) * r00 * sj32 * (px * px) * (IKcos(j31)))) +
                       (((-0.000169684806411447) * r01 * sj32 * (IKcos(j31)))) +
                       (((0.517619124965609) * px * py * r01 * sj32 * (IKcos(j31)))) +
                       (((-2.0) * cj32 * py * pz * r01)) +
                       (((-1.93185673419895) * px * py * r01 * sj32 * (IKsin(j31)))) +
                       (((-0.000434096371369244) * r01 * (IKcos(j31)))) + (((-0.0300000007078417) * py * r01 * sj32)) +
                       (((0.000434096371369244) * r00 * (IKsin(j31)))) +
                       (((0.00776428687448413) * py * r02 * (IKsin(j31)))) +
                       (((-0.00776428687448413) * pz * r01 * (IKsin(j31)))) +
                       (((0.00776448) * cj32 * pz * r00 * (IKcos(j31)))) +
                       (((-0.0788230403497629) * pz * r01 * sj32 * (IKsin(j31)))) +
                       (((0.294183143483816) * pz * r00 * sj32 * (IKsin(j31)))) +
                       (((0.258809562482804) * r01 * sj32 * (py * py) * (IKsin(j31)))) +
                       (((-0.0457527274054029) * cj32 * r02)) +
                       (((-0.258809562482804) * r01 * sj32 * (px * px) * (IKsin(j31)))) +
                       (((-4.54620195265453e-5) * r01 * sj32 * (IKsin(j31)))) +
                       (((0.000116338737104803) * cj32 * r00 * (IKcos(j31)))) + (((-0.27459992) * px * r00)) +
                       (((-0.000116282811825644) * r00 * (IKcos(j31)))) +
                       (((0.965928367099476) * r01 * sj32 * (py * py) * (IKcos(j31)))) +
                       (((0.965928367099476) * r00 * sj32 * (py * py) * (IKsin(j31)))) + (((0.032) * cj32 * pz)) +
                       (((-0.0289778510129843) * px * r02 * (IKsin(j31)))) +
                       (((1.93185673419895) * px * py * r00 * sj32 * (IKcos(j31)))) + (((-0.0422660758282176) * r02)) +
                       (((0.00776448) * cj32 * pz * r01 * (IKsin(j31)))) +
                       (((0.0289778) * cj32 * px * r02 * (IKsin(j31)))) +
                       (((-0.00776448) * cj32 * py * r02 * (IKsin(j31)))) +
                       (((-1.93185673419895) * px * pz * r02 * sj32 * (IKsin(j31)))) +
                       (((0.0788230403497629) * py * r02 * sj32 * (IKsin(j31)))) +
                       (((0.00776428687448413) * px * r02 * (IKcos(j31)))) +
                       (((0.517619124965609) * px * pz * r02 * sj32 * (IKcos(j31)))) +
                       (((-0.30456) * cj32 * pz * r02)) + (((-0.00828190599944974) * px * sj32 * (IKcos(j31)))) +
                       (((0.294183143483816) * py * r02 * sj32 * (IKcos(j31)))) +
                       (((0.0309097077471832) * px * sj32 * (IKsin(j31)))) +
                       (((-0.0289778) * cj32 * py * r02 * (IKcos(j31)))) + (((0.000480000011325467) * sj32)) +
                       (((-0.0300000007078417) * pz * r02 * sj32)) + (((-1.0) * cj32 * r02 * (pz * pz))) +
                       (((-0.0289778) * cj32 * pz * r00 * (IKsin(j31)))) + (((-0.30456) * cj32 * py * r01)) +
                       (((-0.30456) * cj32 * px * r00)) + (((-1.99748062326186e-7) * py * r00 * sj32)) +
                       (((-0.258809562482804) * r01 * sj32 * (pz * pz) * (IKsin(j31)))) +
                       (((0.0004340815990313) * cj32 * r01 * (IKcos(j31)))) +
                       (((-0.000116282811825644) * r01 * (IKsin(j31)))) +
                       (((-0.0004340815990313) * cj32 * r00 * (IKsin(j31)))) +
                       (((-0.0788230403497629) * pz * r00 * sj32 * (IKcos(j31)))) +
                       (((-0.965928367099476) * r00 * sj32 * (px * px) * (IKsin(j31)))) +
                       (((0.965928367099476) * r00 * sj32 * (pz * pz) * (IKsin(j31)))) + ((cj32 * r02 * (py * py))) +
                       (((-0.0300000007078417) * px * r00 * sj32)) + (((-0.27459992) * py * r01)) +
                       (((-0.965928367099476) * r01 * sj32 * (px * px) * (IKcos(j31)))) +
                       (((-2.0) * cj32 * px * pz * r00)) + (((0.00487296) * cj32)) +
                       (((-0.0309097077471832) * py * sj32 * (IKcos(j31)))) +
                       (((0.0289778510129843) * py * r02 * (IKcos(j31)))) +
                       (((-0.00776448) * cj32 * px * r02 * (IKcos(j31)))) +
                       (((-0.00776428687448413) * pz * r00 * (IKcos(j31)))) +
                       (((0.0788230403497629) * px * r02 * sj32 * (IKcos(j31)))) +
                       (((-0.00828190599944974) * py * sj32 * (IKsin(j31)))));
                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                  {
                    continue;
                  }
                }

                innerfn(solutions);
              }
            }
          }
        }
      }
    }
    return solutions.GetNumSolutions() > 0;
  }
  static inline void polyroots3(IkReal rawcoeffs[3 + 1], IkReal rawroots[3], int& numroots)
  {
    using std::complex;
    if (rawcoeffs[0] == 0)
    {
      // solve with one reduced degree
      polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for (int i = 0; i < 3; ++i)
    {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 3; ++i)
    {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step)
    {
      bool changed = false;
      for (int i = 0; i < 3; ++i)
      {
        if (err[i] >= tol)
        {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 3; ++j)
          {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 3; ++j)
          {
            if (i != j)
            {
              if (roots[i] != roots[j])
              {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed)
      {
        break;
      }
    }

    numroots = 0;
    bool visited[3] = { false };
    for (int i = 0; i < 3; ++i)
    {
      if (!visited[i])
      {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 3; ++j)
        {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
          {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1)
        {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt)
        {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
  static inline void polyroots2(IkReal rawcoeffs[2 + 1], IkReal rawroots[2], int& numroots)
  {
    IkReal det = rawcoeffs[1] * rawcoeffs[1] - 4 * rawcoeffs[0] * rawcoeffs[2];
    if (det < 0)
    {
      numroots = 0;
    }
    else if (det == 0)
    {
      rawroots[0] = -0.5 * rawcoeffs[1] / rawcoeffs[0];
      numroots = 1;
    }
    else
    {
      det = IKsqrt(det);
      rawroots[0] = (-rawcoeffs[1] + det) / (2 * rawcoeffs[0]);
      rawroots[1] = (-rawcoeffs[1] - det) / (2 * rawcoeffs[0]);  // rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
      numroots = 2;
    }
  }
  static inline void polyroots5(IkReal rawcoeffs[5 + 1], IkReal rawroots[5], int& numroots)
  {
    using std::complex;
    if (rawcoeffs[0] == 0)
    {
      // solve with one reduced degree
      polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for (int i = 0; i < 5; ++i)
    {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 5; ++i)
    {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step)
    {
      bool changed = false;
      for (int i = 0; i < 5; ++i)
      {
        if (err[i] >= tol)
        {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 5; ++j)
          {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 5; ++j)
          {
            if (i != j)
            {
              if (roots[i] != roots[j])
              {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed)
      {
        break;
      }
    }

    numroots = 0;
    bool visited[5] = { false };
    for (int i = 0; i < 5; ++i)
    {
      if (!visited[i])
      {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 5; ++j)
        {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
          {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1)
        {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt)
        {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
  static inline void polyroots4(IkReal rawcoeffs[4 + 1], IkReal rawroots[4], int& numroots)
  {
    using std::complex;
    if (rawcoeffs[0] == 0)
    {
      // solve with one reduced degree
      polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for (int i = 0; i < 4; ++i)
    {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 4; ++i)
    {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step)
    {
      bool changed = false;
      for (int i = 0; i < 4; ++i)
      {
        if (err[i] >= tol)
        {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 4; ++j)
          {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 4; ++j)
          {
            if (i != j)
            {
              if (roots[i] != roots[j])
              {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed)
      {
        break;
      }
    }

    numroots = 0;
    bool visited[4] = { false };
    for (int i = 0; i < 4; ++i)
    {
      if (!visited[i])
      {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 4; ++j)
        {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
          {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1)
        {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt)
        {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
  static inline void polyroots7(IkReal rawcoeffs[7 + 1], IkReal rawroots[7], int& numroots)
  {
    using std::complex;
    if (rawcoeffs[0] == 0)
    {
      // solve with one reduced degree
      polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for (int i = 0; i < 7; ++i)
    {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 7; ++i)
    {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step)
    {
      bool changed = false;
      for (int i = 0; i < 7; ++i)
      {
        if (err[i] >= tol)
        {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 7; ++j)
          {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 7; ++j)
          {
            if (i != j)
            {
              if (roots[i] != roots[j])
              {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed)
      {
        break;
      }
    }

    numroots = 0;
    bool visited[7] = { false };
    for (int i = 0; i < 7; ++i)
    {
      if (!visited[i])
      {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 7; ++j)
        {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
          {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1)
        {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt)
        {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
  static inline void polyroots6(IkReal rawcoeffs[6 + 1], IkReal rawroots[6], int& numroots)
  {
    using std::complex;
    if (rawcoeffs[0] == 0)
    {
      // solve with one reduced degree
      polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for (int i = 0; i < 6; ++i)
    {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 6; ++i)
    {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step)
    {
      bool changed = false;
      for (int i = 0; i < 6; ++i)
      {
        if (err[i] >= tol)
        {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 6; ++j)
          {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 6; ++j)
          {
            if (i != j)
            {
              if (roots[i] != roots[j])
              {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed)
      {
        break;
      }
    }

    numroots = 0;
    bool visited[6] = { false };
    for (int i = 0; i < 6; ++i)
    {
      if (!visited[i])
      {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 6; ++j)
        {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
          {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1)
        {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt)
        {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
  static inline void polyroots8(IkReal rawcoeffs[8 + 1], IkReal rawroots[8], int& numroots)
  {
    using std::complex;
    if (rawcoeffs[0] == 0)
    {
      // solve with one reduced degree
      polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for (int i = 0; i < 8; ++i)
    {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 8; ++i)
    {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step)
    {
      bool changed = false;
      for (int i = 0; i < 8; ++i)
      {
        if (err[i] >= tol)
        {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 8; ++j)
          {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 8; ++j)
          {
            if (i != j)
            {
              if (roots[i] != roots[j])
              {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed)
      {
        break;
      }
    }

    numroots = 0;
    bool visited[8] = { false };
    for (int i = 0; i < 8; ++i)
    {
      if (!visited[i])
      {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 8; ++j)
        {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
          {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1)
        {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt)
        {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
  inline void innerfn(IkSolutionListBase<IkReal>& solutions)
  {
    for (int fniter = 0; fniter < 1; ++fniter)
    {
      {
        IkReal j34array[2], cj34array[2], sj34array[2];
        bool j34valid[2] = { false };
        _nj34 = 2;
        IkReal x191 = (cj31 * sj32);
        IkReal x192 = (sj31 * sj32);
        sj34array[0] = ((((0.965928367099476) * r00 * x192)) + (((-0.965928367099476) * r01 * x191)) +
                        (((-0.258809562482804) * r01 * x192)) + ((cj32 * r02)) + (((-0.258809562482804) * r00 * x191)));
        if (sj34array[0] >= -1 - IKFAST_SINCOS_THRESH && sj34array[0] <= 1 + IKFAST_SINCOS_THRESH)
        {
          j34valid[0] = j34valid[1] = true;
          j34array[0] = IKasin(sj34array[0]);
          cj34array[0] = IKcos(j34array[0]);
          sj34array[1] = sj34array[0];
          j34array[1] = j34array[0] > 0 ? (IKPI - j34array[0]) : (-IKPI - j34array[0]);
          cj34array[1] = -cj34array[0];
        }
        else if (isnan(sj34array[0]))
        {
          // probably any value will work
          j34valid[0] = true;
          cj34array[0] = 1;
          sj34array[0] = 0;
          j34array[0] = 0;
        }
        for (int ij34 = 0; ij34 < 2; ++ij34)
        {
          if (!j34valid[ij34])
          {
            continue;
          }
          _ij34[0] = ij34;
          _ij34[1] = -1;
          for (int iij34 = ij34 + 1; iij34 < 2; ++iij34)
          {
            if (j34valid[iij34] && IKabs(cj34array[ij34] - cj34array[iij34]) < IKFAST_SOLUTION_THRESH &&
                IKabs(sj34array[ij34] - sj34array[iij34]) < IKFAST_SOLUTION_THRESH)
            {
              j34valid[iij34] = false;
              _ij34[1] = iij34;
              break;
            }
          }
          j34 = j34array[ij34];
          cj34 = cj34array[ij34];
          sj34 = sj34array[ij34];

          {
            IkReal j33eval[2];
            IkReal x193 = cj31 * cj31;
            IkReal x194 = r01 * r01;
            IkReal x195 = cj32 * cj32;
            IkReal x196 = r00 * r00;
            IkReal x197 = r02 * r02;
            IkReal x198 = (cj31 * sj31);
            IkReal x199 = (r00 * r01);
            IkReal x200 = ((12.9292971702848) * x193);
            IkReal x201 = ((14.9292971702848) * x197);
            IkReal x202 = ((0.99996599231498) * x193);
            IkReal x203 = ((0.866035220734919) * x193);
            IkReal x204 = ((14.928789459449) * x193);
            IkReal x205 = (x195 * x196);
            IkReal x206 = (x193 * x196);
            IkReal x207 = (cj32 * r00 * r02 * sj32);
            IkReal x208 = (x194 * x195);
            IkReal x209 = (cj31 * cj32 * r01 * r02 * sj32);
            IkReal x210 = (cj32 * r01 * r02 * sj31 * sj32);
            j33eval[0] = ((((-1.0) * x200 * x208)) + (((-7.46439472972451) * x199)) + (((-13.9292971702848) * x205)) +
                          ((x194 * x200)) + ((x200 * x205)) + ((x195 * x201)) + (((-1.0) * x196)) +
                          (((25.8585943405695) * x195 * x198 * x199)) + (((-25.8585943405695) * x198 * x199)) +
                          (((-28.8412632752719) * x209)) + (((-1.0) * x201)) + (((-1.0) * x195 * x199 * x204)) +
                          (((7.46439472972451) * x194 * x198)) + (((7.46439472972451) * x198 * x205)) +
                          (((-7.72768973763434) * cj31 * x207)) + (((7.46439472972451) * x195 * x199)) +
                          (((-7.72768973763434) * x210)) + (((-13.9292971702848) * x194)) + (((-1.0) * x196 * x200)) +
                          (((-7.46439472972451) * x198 * x208)) + (((-1.0) * x208)) + ((x199 * x204)) +
                          (((-7.46439472972451) * x196 * x198)) + (((28.8412632752719) * sj31 * x207)));
            j33eval[1] = IKsign(
                ((((-1.0) * x203 * x208)) + ((x194 * x203)) + (((0.49998299615749) * x195 * x199)) +
                 (((-0.49998299615749) * x199)) + (((-1.0) * x197)) + (((-0.0669823896325406) * x196)) +
                 (((0.49998299615749) * x194 * x198)) + (((-0.933017610367459) * x194)) +
                 (((-1.0) * x195 * x199 * x202)) + ((x195 * x197)) + (((-0.933017610367459) * x205)) +
                 (((-0.49998299615749) * x196 * x198)) + (((0.49998299615749) * x198 * x205)) + ((x203 * x205)) +
                 (((1.73207044146984) * x195 * x198 * x199)) + (((-0.517619124965609) * x210)) +
                 (((-1.73207044146984) * x198 * x199)) + (((-0.517619124965609) * cj31 * x207)) +
                 (((-1.0) * x196 * x203)) + (((-0.49998299615749) * x198 * x208)) + (((-0.0669823896325406) * x208)) +
                 (((-1.93185673419895) * x209)) + ((x199 * x202)) + (((1.93185673419895) * sj31 * x207))));
            if (IKabs(j33eval[0]) < 0.0000010000000000 || IKabs(j33eval[1]) < 0.0000010000000000)
            {
              {
                IkReal j35eval[3];
                if ((cj34 * cj34) < -0.00001)
                  continue;
                j35eval[0] = ((6250000.00002312) * (IKsqrt(cj34 * cj34)));
                j35eval[1] = 0.06250017;
                j35eval[2] = cj34;
                if (IKabs(j35eval[0]) < 0.0000010000000000 || IKabs(j35eval[1]) < 0.0000010000000000 ||
                    IKabs(j35eval[2]) < 0.0000010000000000)
                {
                  {
                    IkReal evalcond[1];
                    bool bgotonextstatement = true;
                    do
                    {
                      evalcond[0] =
                          ((-3.14159265358979) +
                           (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j34)))), 6.28318530717959)));
                      if (IKabs(evalcond[0]) < 0.0000050000000000)
                      {
                        bgotonextstatement = false;
                        {
                          IkReal j33array[2], cj33array[2], sj33array[2];
                          bool j33valid[2] = { false };
                          _nj33 = 2;
                          IkReal x211 = ((0.965928367099476) * cj32);
                          IkReal x212 = (r00 * sj31);
                          IkReal x213 = (cj31 * r01);
                          IkReal x214 = (cj31 * r00);
                          IkReal x215 = ((0.258809562482804) * cj32);
                          IkReal x216 = (r01 * sj31);
                          CheckValue<IkReal> x218 = IKatan2WithCheck(
                              IkReal((((x214 * x215)) + ((x215 * x216)) + ((x211 * x213)) + ((r02 * sj32)) +
                                      (((-1.0) * x211 * x212)))),
                              IkReal(((((-0.965928367099476) * x216)) + (((-0.965928367099476) * x214)) +
                                      (((0.258809562482804) * x213)) + (((-0.258809562482804) * x212)))),
                              IKFAST_ATAN2_MAGTHRESH);
                          if (!x218.valid)
                          {
                            continue;
                          }
                          IkReal x217 = x218.value;
                          j33array[0] = ((-1.0) * x217);
                          sj33array[0] = IKsin(j33array[0]);
                          cj33array[0] = IKcos(j33array[0]);
                          j33array[1] = ((3.14159265358979) + (((-1.0) * x217)));
                          sj33array[1] = IKsin(j33array[1]);
                          cj33array[1] = IKcos(j33array[1]);
                          if (j33array[0] > IKPI)
                          {
                            j33array[0] -= IK2PI;
                          }
                          else if (j33array[0] < -IKPI)
                          {
                            j33array[0] += IK2PI;
                          }
                          j33valid[0] = true;
                          if (j33array[1] > IKPI)
                          {
                            j33array[1] -= IK2PI;
                          }
                          else if (j33array[1] < -IKPI)
                          {
                            j33array[1] += IK2PI;
                          }
                          j33valid[1] = true;
                          for (int ij33 = 0; ij33 < 2; ++ij33)
                          {
                            if (!j33valid[ij33])
                            {
                              continue;
                            }
                            _ij33[0] = ij33;
                            _ij33[1] = -1;
                            for (int iij33 = ij33 + 1; iij33 < 2; ++iij33)
                            {
                              if (j33valid[iij33] &&
                                  IKabs(cj33array[ij33] - cj33array[iij33]) < IKFAST_SOLUTION_THRESH &&
                                  IKabs(sj33array[ij33] - sj33array[iij33]) < IKFAST_SOLUTION_THRESH)
                              {
                                j33valid[iij33] = false;
                                _ij33[1] = iij33;
                                break;
                              }
                            }
                            j33 = j33array[ij33];
                            cj33 = cj33array[ij33];
                            sj33 = sj33array[ij33];
                            {
                              IkReal evalcond[1];
                              IkReal x219 = IKsin(j33);
                              IkReal x220 = IKcos(j33);
                              IkReal x221 = ((0.965928367099476) * r00);
                              IkReal x222 = ((0.965928367099476) * r01);
                              IkReal x223 = ((0.258809562482804) * r01);
                              IkReal x224 = ((0.258809562482804) * r00);
                              IkReal x225 = (cj32 * x219);
                              IkReal x226 = (cj31 * x220);
                              IkReal x227 = (sj31 * x220);
                              evalcond[0] = ((((-1.0) * sj31 * x223 * x225)) + ((sj31 * x221 * x225)) +
                                             (((-1.0) * x224 * x227)) + (((-1.0) * cj31 * x224 * x225)) +
                                             (((-1.0) * x222 * x227)) + ((x223 * x226)) + (((-1.0) * x221 * x226)) +
                                             (((-1.0) * r02 * sj32 * x219)) + (((-1.0) * cj31 * x222 * x225)));
                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH)
                              {
                                continue;
                              }
                            }

                            {
                              IkReal j35array[1], cj35array[1], sj35array[1];
                              bool j35valid[1] = { false };
                              _nj35 = 1;
                              IkReal x228 = ((15.4548538734773) * sj31);
                              IkReal x229 = ((4.14095299969423) * cj31);
                              IkReal x230 = (cj32 * py);
                              IkReal x231 = ((1.12633921591683e-5) * sj31);
                              IkReal x232 = ((15.4548538734773) * cj31);
                              IkReal x233 = (cj33 * sj32);
                              IkReal x234 = (cj33 * py);
                              IkReal x235 = ((4.20372025358582e-5) * sj33);
                              IkReal x236 = (px * sj33);
                              IkReal x237 = (cj31 * px);
                              IkReal x238 = ((4.20372025358582e-5) * cj33);
                              IkReal x239 = (sj32 * sj33);
                              IkReal x240 = ((0.240000005660958) * cj32);
                              IkReal x241 = ((15.9999999998816) * pz);
                              IkReal x242 = (px * sj31);
                              IkReal x243 = ((4.14095299969423) * sj31);
                              IkReal x244 = ((4.20372025358582e-5) * sj31);
                              IkReal x245 = (cj33 * px);
                              IkReal x246 = (py * sj33);
                              IkReal x247 = ((6.52800015397805e-7) * cj32);
                              IkReal x248 = ((4.3519999999678e-5) * pz);
                              IkReal x249 = ((1.12633921591683e-5) * cj31);
                              IkReal x250 = (py * x249);
                              IkReal x251 = (cj32 * x245);
                              if (IKabs(((((-1.0) * cj33 * x230 * x243)) + ((cj32 * x235 * x242)) +
                                         (((-2.25078449859284e-6) * sj33)) + (((-6.62722559995097e-6) * x239)) +
                                         (((-2.43647999998197) * x233)) + (((-1.0) * x229 * x246)) + ((cj33 * x240)) +
                                         ((x232 * x236)) + ((x234 * x249)) + (((-1.0) * x231 * x245)) +
                                         ((x228 * x251)) + ((x236 * x243)) + (((-1.0) * x229 * x251)) +
                                         (((-1.0) * x234 * x244)) + ((x228 * x246)) + (((-1.0) * cj31 * x230 * x235)) +
                                         (((-1.0) * cj32 * x236 * x249)) + (((-1.0) * x233 * x241)) +
                                         (((-0.239999999993878) * cj33)) + (((-1.0) * x237 * x238)) +
                                         (((-1.0) * cj33 * x230 * x232)) + ((sj33 * x247)) + (((-1.0) * x239 * x248)) +
                                         (((-1.0) * sj33 * x230 * x231)))) < IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs((((cj32 * x228 * x236)) + (((-1.0) * cj33 * x247)) +
                                         (((-2.43647999998197) * x239)) + (((-1.0) * py * sj31 * x235)) +
                                         ((x229 * x234)) + ((x233 * x248)) + (((-1.0) * x235 * x237)) +
                                         (((1.12633921591683e-5) * cj32 * cj33 * x237)) + ((cj33 * x230 * x231)) +
                                         (((6.62722559995097e-6) * x233)) + (((-1.0) * x232 * x245)) +
                                         (((-0.239999999993878) * sj33)) + (((-1.0) * sj33 * x230 * x243)) +
                                         (((-1.0) * cj32 * x229 * x236)) + (((-1.0) * x231 * x236)) +
                                         (((2.25078449859284e-6) * cj33)) + (((-4.14095299969423) * cj33 * x242)) +
                                         ((sj33 * x240)) + (((-1.0) * x239 * x241)) + ((x246 * x249)) +
                                         (((-1.0) * sj33 * x230 * x232)) + (((-1.0) * x228 * x234)) +
                                         (((-1.0) * cj32 * x238 * x242)) + ((cj31 * x230 * x238)))) <
                                      IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs(
                                      IKsqr(((((-1.0) * cj33 * x230 * x243)) + ((cj32 * x235 * x242)) +
                                             (((-2.25078449859284e-6) * sj33)) + (((-6.62722559995097e-6) * x239)) +
                                             (((-2.43647999998197) * x233)) + (((-1.0) * x229 * x246)) +
                                             ((cj33 * x240)) + ((x232 * x236)) + ((x234 * x249)) +
                                             (((-1.0) * x231 * x245)) + ((x228 * x251)) + ((x236 * x243)) +
                                             (((-1.0) * x229 * x251)) + (((-1.0) * x234 * x244)) + ((x228 * x246)) +
                                             (((-1.0) * cj31 * x230 * x235)) + (((-1.0) * cj32 * x236 * x249)) +
                                             (((-1.0) * x233 * x241)) + (((-0.239999999993878) * cj33)) +
                                             (((-1.0) * x237 * x238)) + (((-1.0) * cj33 * x230 * x232)) +
                                             ((sj33 * x247)) + (((-1.0) * x239 * x248)) +
                                             (((-1.0) * sj33 * x230 * x231)))) +
                                      IKsqr((((cj32 * x228 * x236)) + (((-1.0) * cj33 * x247)) +
                                             (((-2.43647999998197) * x239)) + (((-1.0) * py * sj31 * x235)) +
                                             ((x229 * x234)) + ((x233 * x248)) + (((-1.0) * x235 * x237)) +
                                             (((1.12633921591683e-5) * cj32 * cj33 * x237)) + ((cj33 * x230 * x231)) +
                                             (((6.62722559995097e-6) * x233)) + (((-1.0) * x232 * x245)) +
                                             (((-0.239999999993878) * sj33)) + (((-1.0) * sj33 * x230 * x243)) +
                                             (((-1.0) * cj32 * x229 * x236)) + (((-1.0) * x231 * x236)) +
                                             (((2.25078449859284e-6) * cj33)) + (((-4.14095299969423) * cj33 * x242)) +
                                             ((sj33 * x240)) + (((-1.0) * x239 * x241)) + ((x246 * x249)) +
                                             (((-1.0) * sj33 * x230 * x232)) + (((-1.0) * x228 * x234)) +
                                             (((-1.0) * cj32 * x238 * x242)) + ((cj31 * x230 * x238)))) -
                                      1) <= IKFAST_SINCOS_THRESH)
                                continue;
                              j35array[0] = IKatan2(
                                  ((((-1.0) * cj33 * x230 * x243)) + ((cj32 * x235 * x242)) +
                                   (((-2.25078449859284e-6) * sj33)) + (((-6.62722559995097e-6) * x239)) +
                                   (((-2.43647999998197) * x233)) + (((-1.0) * x229 * x246)) + ((cj33 * x240)) +
                                   ((x232 * x236)) + ((x234 * x249)) + (((-1.0) * x231 * x245)) + ((x228 * x251)) +
                                   ((x236 * x243)) + (((-1.0) * x229 * x251)) + (((-1.0) * x234 * x244)) +
                                   ((x228 * x246)) + (((-1.0) * cj31 * x230 * x235)) + (((-1.0) * cj32 * x236 * x249)) +
                                   (((-1.0) * x233 * x241)) + (((-0.239999999993878) * cj33)) +
                                   (((-1.0) * x237 * x238)) + (((-1.0) * cj33 * x230 * x232)) + ((sj33 * x247)) +
                                   (((-1.0) * x239 * x248)) + (((-1.0) * sj33 * x230 * x231))),
                                  (((cj32 * x228 * x236)) + (((-1.0) * cj33 * x247)) + (((-2.43647999998197) * x239)) +
                                   (((-1.0) * py * sj31 * x235)) + ((x229 * x234)) + ((x233 * x248)) +
                                   (((-1.0) * x235 * x237)) + (((1.12633921591683e-5) * cj32 * cj33 * x237)) +
                                   ((cj33 * x230 * x231)) + (((6.62722559995097e-6) * x233)) +
                                   (((-1.0) * x232 * x245)) + (((-0.239999999993878) * sj33)) +
                                   (((-1.0) * sj33 * x230 * x243)) + (((-1.0) * cj32 * x229 * x236)) +
                                   (((-1.0) * x231 * x236)) + (((2.25078449859284e-6) * cj33)) +
                                   (((-4.14095299969423) * cj33 * x242)) + ((sj33 * x240)) + (((-1.0) * x239 * x241)) +
                                   ((x246 * x249)) + (((-1.0) * sj33 * x230 * x232)) + (((-1.0) * x228 * x234)) +
                                   (((-1.0) * cj32 * x238 * x242)) + ((cj31 * x230 * x238))));
                              sj35array[0] = IKsin(j35array[0]);
                              cj35array[0] = IKcos(j35array[0]);
                              if (j35array[0] > IKPI)
                              {
                                j35array[0] -= IK2PI;
                              }
                              else if (j35array[0] < -IKPI)
                              {
                                j35array[0] += IK2PI;
                              }
                              j35valid[0] = true;
                              for (int ij35 = 0; ij35 < 1; ++ij35)
                              {
                                if (!j35valid[ij35])
                                {
                                  continue;
                                }
                                _ij35[0] = ij35;
                                _ij35[1] = -1;
                                for (int iij35 = ij35 + 1; iij35 < 1; ++iij35)
                                {
                                  if (j35valid[iij35] &&
                                      IKabs(cj35array[ij35] - cj35array[iij35]) < IKFAST_SOLUTION_THRESH &&
                                      IKabs(sj35array[ij35] - sj35array[iij35]) < IKFAST_SOLUTION_THRESH)
                                  {
                                    j35valid[iij35] = false;
                                    _ij35[1] = iij35;
                                    break;
                                  }
                                }
                                j35 = j35array[ij35];
                                cj35 = cj35array[ij35];
                                sj35 = sj35array[ij35];
                                {
                                  IkReal evalcond[2];
                                  IkReal x252 = IKcos(j35);
                                  IkReal x253 = IKsin(j35);
                                  IkReal x254 = (cj32 * sj31);
                                  IkReal x255 = ((0.258809562482804) * cj33);
                                  IkReal x256 = ((0.965928367099476) * sj33);
                                  IkReal x257 = (px * sj31);
                                  IkReal x258 = (py * sj31);
                                  IkReal x259 = ((0.258809562482804) * sj33);
                                  IkReal x260 = (cj33 * sj32);
                                  IkReal x261 = (cj32 * cj33);
                                  IkReal x262 = (sj32 * sj33);
                                  IkReal x263 = (cj31 * py);
                                  IkReal x264 = (cj31 * cj32 * px);
                                  IkReal x265 = ((0.965928367099476) * cj33 * px);
                                  evalcond[0] =
                                      (((x259 * x263)) + (((0.965928367099476) * x261 * x263)) +
                                       (((-1.0) * x256 * x258)) + (((-1.0) * x257 * x259)) +
                                       (((-0.0150000003539208) * x261)) + (((0.15228) * x260)) + ((x255 * x264)) +
                                       ((pz * x260)) + (((-1.7e-7) * x252)) + ((py * x254 * x255)) +
                                       (((0.0625) * x253)) + (((9.9874031163093e-8) * sj33)) +
                                       (((-1.0) * x254 * x265)) + (((0.015) * cj33)) + (((-1.0) * cj31 * px * x256)));
                                  evalcond[1] =
                                      ((((-1.0) * py * x254 * x259)) + (((-1.0) * pz * x262)) +
                                       (((-0.965928367099476) * cj33 * x258)) + (((-0.015) * sj33)) +
                                       (((-1.0) * x255 * x257)) + (((-0.0625) * x252)) + (((-0.15228) * x262)) +
                                       (((9.9874031163093e-8) * cj33)) + (((-1.0) * x259 * x264)) + ((x255 * x263)) +
                                       (((-1.0) * cj31 * x265)) + ((px * x254 * x256)) + (((-1.7e-7) * x253)) +
                                       (((0.0150000003539208) * cj32 * sj33)) + (((-1.0) * cj32 * x256 * x263)));
                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                  {
                                    continue;
                                  }
                                }

                                {
                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                  vinfos[0].jointtype = 1;
                                  vinfos[0].foffset = j29;
                                  vinfos[0].indices[0] = _ij29[0];
                                  vinfos[0].indices[1] = _ij29[1];
                                  vinfos[0].maxsolutions = _nj29;
                                  vinfos[1].jointtype = 1;
                                  vinfos[1].foffset = j30;
                                  vinfos[1].indices[0] = _ij30[0];
                                  vinfos[1].indices[1] = _ij30[1];
                                  vinfos[1].maxsolutions = _nj30;
                                  vinfos[2].jointtype = 1;
                                  vinfos[2].foffset = j31;
                                  vinfos[2].indices[0] = _ij31[0];
                                  vinfos[2].indices[1] = _ij31[1];
                                  vinfos[2].maxsolutions = _nj31;
                                  vinfos[3].jointtype = 1;
                                  vinfos[3].foffset = j32;
                                  vinfos[3].indices[0] = _ij32[0];
                                  vinfos[3].indices[1] = _ij32[1];
                                  vinfos[3].maxsolutions = _nj32;
                                  vinfos[4].jointtype = 1;
                                  vinfos[4].foffset = j33;
                                  vinfos[4].indices[0] = _ij33[0];
                                  vinfos[4].indices[1] = _ij33[1];
                                  vinfos[4].maxsolutions = _nj33;
                                  vinfos[5].jointtype = 1;
                                  vinfos[5].foffset = j34;
                                  vinfos[5].indices[0] = _ij34[0];
                                  vinfos[5].indices[1] = _ij34[1];
                                  vinfos[5].maxsolutions = _nj34;
                                  vinfos[6].jointtype = 1;
                                  vinfos[6].foffset = j35;
                                  vinfos[6].indices[0] = _ij35[0];
                                  vinfos[6].indices[1] = _ij35[1];
                                  vinfos[6].maxsolutions = _nj35;
                                  std::vector<int> vfree(0);
                                  solutions.AddSolution(vinfos, vfree);
                                }
                              }
                            }
                          }
                        }
                      }
                    } while (0);
                    if (bgotonextstatement)
                    {
                      bool bgotonextstatement = true;
                      do
                      {
                        evalcond[0] =
                            ((-3.14159265358979) +
                             (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j34)))), 6.28318530717959)));
                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                        {
                          bgotonextstatement = false;
                          {
                            IkReal j33array[2], cj33array[2], sj33array[2];
                            bool j33valid[2] = { false };
                            _nj33 = 2;
                            IkReal x266 = ((0.965928367099476) * cj32);
                            IkReal x267 = (r00 * sj31);
                            IkReal x268 = (cj31 * r01);
                            IkReal x269 = (cj31 * r00);
                            IkReal x270 = ((0.258809562482804) * cj32);
                            IkReal x271 = (r01 * sj31);
                            CheckValue<IkReal> x273 = IKatan2WithCheck(
                                IkReal((((x266 * x268)) + ((x270 * x271)) + ((r02 * sj32)) + (((-1.0) * x266 * x267)) +
                                        ((x269 * x270)))),
                                IkReal(((((-0.258809562482804) * x267)) + (((-0.965928367099476) * x269)) +
                                        (((-0.965928367099476) * x271)) + (((0.258809562482804) * x268)))),
                                IKFAST_ATAN2_MAGTHRESH);
                            if (!x273.valid)
                            {
                              continue;
                            }
                            IkReal x272 = x273.value;
                            j33array[0] = ((-1.0) * x272);
                            sj33array[0] = IKsin(j33array[0]);
                            cj33array[0] = IKcos(j33array[0]);
                            j33array[1] = ((3.14159265358979) + (((-1.0) * x272)));
                            sj33array[1] = IKsin(j33array[1]);
                            cj33array[1] = IKcos(j33array[1]);
                            if (j33array[0] > IKPI)
                            {
                              j33array[0] -= IK2PI;
                            }
                            else if (j33array[0] < -IKPI)
                            {
                              j33array[0] += IK2PI;
                            }
                            j33valid[0] = true;
                            if (j33array[1] > IKPI)
                            {
                              j33array[1] -= IK2PI;
                            }
                            else if (j33array[1] < -IKPI)
                            {
                              j33array[1] += IK2PI;
                            }
                            j33valid[1] = true;
                            for (int ij33 = 0; ij33 < 2; ++ij33)
                            {
                              if (!j33valid[ij33])
                              {
                                continue;
                              }
                              _ij33[0] = ij33;
                              _ij33[1] = -1;
                              for (int iij33 = ij33 + 1; iij33 < 2; ++iij33)
                              {
                                if (j33valid[iij33] &&
                                    IKabs(cj33array[ij33] - cj33array[iij33]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj33array[ij33] - sj33array[iij33]) < IKFAST_SOLUTION_THRESH)
                                {
                                  j33valid[iij33] = false;
                                  _ij33[1] = iij33;
                                  break;
                                }
                              }
                              j33 = j33array[ij33];
                              cj33 = cj33array[ij33];
                              sj33 = sj33array[ij33];
                              {
                                IkReal evalcond[1];
                                IkReal x274 = IKsin(j33);
                                IkReal x275 = IKcos(j33);
                                IkReal x276 = ((0.965928367099476) * r00);
                                IkReal x277 = ((0.965928367099476) * r01);
                                IkReal x278 = ((0.258809562482804) * r01);
                                IkReal x279 = ((0.258809562482804) * r00);
                                IkReal x280 = (cj32 * x274);
                                IkReal x281 = (cj31 * x275);
                                IkReal x282 = (sj31 * x275);
                                evalcond[0] = ((((-1.0) * x277 * x282)) + ((x278 * x281)) + (((-1.0) * x276 * x281)) +
                                               (((-1.0) * sj31 * x278 * x280)) + (((-1.0) * r02 * sj32 * x274)) +
                                               (((-1.0) * cj31 * x279 * x280)) + (((-1.0) * cj31 * x277 * x280)) +
                                               (((-1.0) * x279 * x282)) + ((sj31 * x276 * x280)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH)
                                {
                                  continue;
                                }
                              }

                              {
                                IkReal j35array[1], cj35array[1], sj35array[1];
                                bool j35valid[1] = { false };
                                _nj35 = 1;
                                IkReal x283 = (cj33 * sj32);
                                IkReal x284 = ((4.3519999999678e-5) * pz);
                                IkReal x285 = ((15.4548538734773) * px);
                                IkReal x286 = ((1.12633921591683e-5) * py);
                                IkReal x287 = (sj31 * sj33);
                                IkReal x288 = ((4.20372025358582e-5) * py);
                                IkReal x289 = ((1.12633921591683e-5) * px);
                                IkReal x290 = (cj33 * sj31);
                                IkReal x291 = ((15.4548538734773) * py);
                                IkReal x292 = (sj32 * sj33);
                                IkReal x293 = ((0.240000005660958) * cj32);
                                IkReal x294 = ((15.9999999998816) * pz);
                                IkReal x295 = ((4.20372025358582e-5) * cj32);
                                IkReal x296 = ((6.52800015397805e-7) * cj32);
                                IkReal x297 = ((4.14095299969423) * py);
                                IkReal x298 = (cj31 * cj33);
                                IkReal x299 = ((4.14095299969423) * px);
                                IkReal x300 = (cj31 * sj33);
                                IkReal x301 = (cj31 * x286);
                                IkReal x302 = (cj32 * x290);
                                IkReal x303 = (py * x298);
                                IkReal x304 = ((4.20372025358582e-5) * cj31 * px);
                                IkReal x305 = (cj32 * py * x300);
                                if (IKabs((((x289 * x290)) + ((cj33 * x293)) + ((x285 * x302)) + ((x285 * x300)) +
                                           (((-9.45184498602496e-7) * sj33)) + (((-1.0) * cj32 * x291 * x298)) +
                                           (((-1.0) * x286 * x298)) + (((-1.0) * sj33 * x296)) +
                                           (((6.62722559995097e-6) * x292)) + (((-1.0) * x297 * x302)) +
                                           (((-1.0) * x297 * x300)) + (((-2.43647999998197) * x283)) +
                                           (((-0.240000000002571) * cj33)) + ((cj32 * x286 * x287)) + ((x287 * x291)) +
                                           ((x287 * x299)) + ((x284 * x292)) + (((-1.0) * x283 * x294)) +
                                           ((cj32 * x289 * x300)) + (((4.20372025358582e-5) * px * x298)) +
                                           (((-1.0) * px * x287 * x295)) + (((-1.0) * cj32 * x298 * x299)) +
                                           ((x288 * x290)) + ((cj32 * x288 * x300)))) < IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs((((cj32 * x288 * x298)) + ((x290 * x291)) + ((x290 * x299)) +
                                           ((cj32 * x289 * x298)) + ((cj32 * x291 * x300)) + (((-1.0) * x287 * x289)) +
                                           (((-1.0) * x287 * x288)) + (((0.240000000002571) * sj33)) +
                                           ((cj32 * x299 * x300)) + ((x286 * x300)) + ((x286 * x302)) +
                                           (((-1.0) * sj33 * x293)) + (((-1.0) * x297 * x298)) +
                                           (((-4.20372025358582e-5) * px * x300)) + (((-1.0) * cj32 * x285 * x287)) +
                                           ((x285 * x298)) + (((-1.0) * px * x290 * x295)) +
                                           (((-9.45184498602496e-7) * cj33)) + (((2.43647999998197) * x292)) +
                                           (((6.62722559995097e-6) * x283)) + (((-1.0) * cj33 * x296)) +
                                           ((x292 * x294)) + ((cj32 * x287 * x297)) + ((x283 * x284)))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(IKsqr((((x289 * x290)) + ((cj33 * x293)) + ((x285 * x302)) + ((x285 * x300)) +
                                                 (((-9.45184498602496e-7) * sj33)) + (((-1.0) * cj32 * x291 * x298)) +
                                                 (((-1.0) * x286 * x298)) + (((-1.0) * sj33 * x296)) +
                                                 (((6.62722559995097e-6) * x292)) + (((-1.0) * x297 * x302)) +
                                                 (((-1.0) * x297 * x300)) + (((-2.43647999998197) * x283)) +
                                                 (((-0.240000000002571) * cj33)) + ((cj32 * x286 * x287)) +
                                                 ((x287 * x291)) + ((x287 * x299)) + ((x284 * x292)) +
                                                 (((-1.0) * x283 * x294)) + ((cj32 * x289 * x300)) +
                                                 (((4.20372025358582e-5) * px * x298)) + (((-1.0) * px * x287 * x295)) +
                                                 (((-1.0) * cj32 * x298 * x299)) + ((x288 * x290)) +
                                                 ((cj32 * x288 * x300)))) +
                                          IKsqr((((cj32 * x288 * x298)) + ((x290 * x291)) + ((x290 * x299)) +
                                                 ((cj32 * x289 * x298)) + ((cj32 * x291 * x300)) +
                                                 (((-1.0) * x287 * x289)) + (((-1.0) * x287 * x288)) +
                                                 (((0.240000000002571) * sj33)) + ((cj32 * x299 * x300)) +
                                                 ((x286 * x300)) + ((x286 * x302)) + (((-1.0) * sj33 * x293)) +
                                                 (((-1.0) * x297 * x298)) + (((-4.20372025358582e-5) * px * x300)) +
                                                 (((-1.0) * cj32 * x285 * x287)) + ((x285 * x298)) +
                                                 (((-1.0) * px * x290 * x295)) + (((-9.45184498602496e-7) * cj33)) +
                                                 (((2.43647999998197) * x292)) + (((6.62722559995097e-6) * x283)) +
                                                 (((-1.0) * cj33 * x296)) + ((x292 * x294)) + ((cj32 * x287 * x297)) +
                                                 ((x283 * x284)))) -
                                          1) <= IKFAST_SINCOS_THRESH)
                                  continue;
                                j35array[0] = IKatan2(
                                    (((x289 * x290)) + ((cj33 * x293)) + ((x285 * x302)) + ((x285 * x300)) +
                                     (((-9.45184498602496e-7) * sj33)) + (((-1.0) * cj32 * x291 * x298)) +
                                     (((-1.0) * x286 * x298)) + (((-1.0) * sj33 * x296)) +
                                     (((6.62722559995097e-6) * x292)) + (((-1.0) * x297 * x302)) +
                                     (((-1.0) * x297 * x300)) + (((-2.43647999998197) * x283)) +
                                     (((-0.240000000002571) * cj33)) + ((cj32 * x286 * x287)) + ((x287 * x291)) +
                                     ((x287 * x299)) + ((x284 * x292)) + (((-1.0) * x283 * x294)) +
                                     ((cj32 * x289 * x300)) + (((4.20372025358582e-5) * px * x298)) +
                                     (((-1.0) * px * x287 * x295)) + (((-1.0) * cj32 * x298 * x299)) + ((x288 * x290)) +
                                     ((cj32 * x288 * x300))),
                                    (((cj32 * x288 * x298)) + ((x290 * x291)) + ((x290 * x299)) +
                                     ((cj32 * x289 * x298)) + ((cj32 * x291 * x300)) + (((-1.0) * x287 * x289)) +
                                     (((-1.0) * x287 * x288)) + (((0.240000000002571) * sj33)) +
                                     ((cj32 * x299 * x300)) + ((x286 * x300)) + ((x286 * x302)) +
                                     (((-1.0) * sj33 * x293)) + (((-1.0) * x297 * x298)) +
                                     (((-4.20372025358582e-5) * px * x300)) + (((-1.0) * cj32 * x285 * x287)) +
                                     ((x285 * x298)) + (((-1.0) * px * x290 * x295)) +
                                     (((-9.45184498602496e-7) * cj33)) + (((2.43647999998197) * x292)) +
                                     (((6.62722559995097e-6) * x283)) + (((-1.0) * cj33 * x296)) + ((x292 * x294)) +
                                     ((cj32 * x287 * x297)) + ((x283 * x284))));
                                sj35array[0] = IKsin(j35array[0]);
                                cj35array[0] = IKcos(j35array[0]);
                                if (j35array[0] > IKPI)
                                {
                                  j35array[0] -= IK2PI;
                                }
                                else if (j35array[0] < -IKPI)
                                {
                                  j35array[0] += IK2PI;
                                }
                                j35valid[0] = true;
                                for (int ij35 = 0; ij35 < 1; ++ij35)
                                {
                                  if (!j35valid[ij35])
                                  {
                                    continue;
                                  }
                                  _ij35[0] = ij35;
                                  _ij35[1] = -1;
                                  for (int iij35 = ij35 + 1; iij35 < 1; ++iij35)
                                  {
                                    if (j35valid[iij35] &&
                                        IKabs(cj35array[ij35] - cj35array[iij35]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj35array[ij35] - sj35array[iij35]) < IKFAST_SOLUTION_THRESH)
                                    {
                                      j35valid[iij35] = false;
                                      _ij35[1] = iij35;
                                      break;
                                    }
                                  }
                                  j35 = j35array[ij35];
                                  cj35 = cj35array[ij35];
                                  sj35 = sj35array[ij35];
                                  {
                                    IkReal evalcond[2];
                                    IkReal x306 = IKcos(j35);
                                    IkReal x307 = IKsin(j35);
                                    IkReal x308 = (cj32 * sj31);
                                    IkReal x309 = ((0.258809562482804) * cj33);
                                    IkReal x310 = ((0.965928367099476) * sj33);
                                    IkReal x311 = (px * sj31);
                                    IkReal x312 = (py * sj31);
                                    IkReal x313 = (cj33 * sj32);
                                    IkReal x314 = (cj32 * cj33);
                                    IkReal x315 = ((0.258809562482804) * sj33);
                                    IkReal x316 = (sj32 * sj33);
                                    IkReal x317 = (cj31 * py);
                                    IkReal x318 = (cj31 * cj32 * px);
                                    IkReal x319 = ((0.965928367099476) * cj33 * px);
                                    evalcond[0] =
                                        ((((0.15228) * x313)) + (((-1.0) * x310 * x312)) +
                                         (((-1.0) * cj31 * px * x310)) + ((py * x308 * x309)) + ((x315 * x317)) +
                                         (((-1.0) * x308 * x319)) + ((x309 * x318)) + (((0.0625) * x307)) +
                                         (((0.965928367099476) * x314 * x317)) + ((pz * x313)) +
                                         (((-0.0150000003539208) * x314)) + (((9.9874031163093e-8) * sj33)) +
                                         (((-1.7e-7) * x306)) + (((0.015) * cj33)) + (((-1.0) * x311 * x315)));
                                    evalcond[1] =
                                        ((((-0.015) * sj33)) + (((1.7e-7) * x307)) + (((-1.0) * cj31 * x319)) +
                                         (((9.9874031163093e-8) * cj33)) + (((-0.15228) * x316)) +
                                         (((-1.0) * py * x308 * x315)) + ((px * x308 * x310)) +
                                         (((-0.965928367099476) * cj33 * x312)) + (((-1.0) * pz * x316)) +
                                         ((x309 * x317)) + (((0.0625) * x306)) + (((-1.0) * x315 * x318)) +
                                         (((-1.0) * x309 * x311)) + (((0.0150000003539208) * cj32 * sj33)) +
                                         (((-1.0) * cj32 * x310 * x317)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                    {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j29;
                                    vinfos[0].indices[0] = _ij29[0];
                                    vinfos[0].indices[1] = _ij29[1];
                                    vinfos[0].maxsolutions = _nj29;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j30;
                                    vinfos[1].indices[0] = _ij30[0];
                                    vinfos[1].indices[1] = _ij30[1];
                                    vinfos[1].maxsolutions = _nj30;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j31;
                                    vinfos[2].indices[0] = _ij31[0];
                                    vinfos[2].indices[1] = _ij31[1];
                                    vinfos[2].maxsolutions = _nj31;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j32;
                                    vinfos[3].indices[0] = _ij32[0];
                                    vinfos[3].indices[1] = _ij32[1];
                                    vinfos[3].maxsolutions = _nj32;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j33;
                                    vinfos[4].indices[0] = _ij33[0];
                                    vinfos[4].indices[1] = _ij33[1];
                                    vinfos[4].maxsolutions = _nj33;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j34;
                                    vinfos[5].indices[0] = _ij34[0];
                                    vinfos[5].indices[1] = _ij34[1];
                                    vinfos[5].maxsolutions = _nj34;
                                    vinfos[6].jointtype = 1;
                                    vinfos[6].foffset = j35;
                                    vinfos[6].indices[0] = _ij35[0];
                                    vinfos[6].indices[1] = _ij35[1];
                                    vinfos[6].maxsolutions = _nj35;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }
                        }
                      } while (0);
                      if (bgotonextstatement)
                      {
                        bool bgotonextstatement = true;
                        do
                        {
                          if (1)
                          {
                            bgotonextstatement = false;
                            continue;  // branch miss [j33, j35]
                          }
                        } while (0);
                        if (bgotonextstatement)
                        {
                        }
                      }
                    }
                  }
                }
                else
                {
                  {
                    IkReal j35array[2], cj35array[2], sj35array[2];
                    bool j35valid[2] = { false };
                    _nj35 = 2;
                    IkReal x320 = (sj31 * sj32);
                    IkReal x321 = (cj31 * sj32);
                    CheckValue<IkReal> x324 =
                        IKatan2WithCheck(IkReal(((0.0625) * cj34)), IkReal(((1.7e-7) * cj34)), IKFAST_ATAN2_MAGTHRESH);
                    if (!x324.valid)
                    {
                      continue;
                    }
                    IkReal x322 = ((1.0) * (x324.value));
                    if ((cj34 * cj34) < -0.00001)
                      continue;
                    CheckValue<IkReal> x325 =
                        IKPowWithIntegerCheck(IKabs(((6250000.00002312) * (IKsqrt(cj34 * cj34)))), -1);
                    if (!x325.valid)
                    {
                      continue;
                    }
                    if ((((100000000.0) * (x325.value) *
                          (((0.13729996) + (((-0.258809562482804) * px * x321)) + ((cj32 * pz)) +
                            (((-0.965928367099476) * py * x321)) + (((0.15228) * cj32)) +
                            (((0.965928367099476) * px * x320)) + (((-0.016) * sj34)) +
                            (((-0.258809562482804) * py * x320)) + (((0.0150000003539208) * sj32)))))) <
                            -1 - IKFAST_SINCOS_THRESH ||
                        (((100000000.0) * (x325.value) *
                          (((0.13729996) + (((-0.258809562482804) * px * x321)) + ((cj32 * pz)) +
                            (((-0.965928367099476) * py * x321)) + (((0.15228) * cj32)) +
                            (((0.965928367099476) * px * x320)) + (((-0.016) * sj34)) +
                            (((-0.258809562482804) * py * x320)) + (((0.0150000003539208) * sj32)))))) >
                            1 + IKFAST_SINCOS_THRESH)
                      continue;
                    IkReal x323 = IKasin(((100000000.0) * (x325.value) *
                                          (((0.13729996) + (((-0.258809562482804) * px * x321)) + ((cj32 * pz)) +
                                            (((-0.965928367099476) * py * x321)) + (((0.15228) * cj32)) +
                                            (((0.965928367099476) * px * x320)) + (((-0.016) * sj34)) +
                                            (((-0.258809562482804) * py * x320)) + (((0.0150000003539208) * sj32))))));
                    j35array[0] = ((((-1.0) * x322)) + (((-1.0) * x323)));
                    sj35array[0] = IKsin(j35array[0]);
                    cj35array[0] = IKcos(j35array[0]);
                    j35array[1] = ((3.14159265358979) + (((-1.0) * x322)) + x323);
                    sj35array[1] = IKsin(j35array[1]);
                    cj35array[1] = IKcos(j35array[1]);
                    if (j35array[0] > IKPI)
                    {
                      j35array[0] -= IK2PI;
                    }
                    else if (j35array[0] < -IKPI)
                    {
                      j35array[0] += IK2PI;
                    }
                    j35valid[0] = true;
                    if (j35array[1] > IKPI)
                    {
                      j35array[1] -= IK2PI;
                    }
                    else if (j35array[1] < -IKPI)
                    {
                      j35array[1] += IK2PI;
                    }
                    j35valid[1] = true;
                    for (int ij35 = 0; ij35 < 2; ++ij35)
                    {
                      if (!j35valid[ij35])
                      {
                        continue;
                      }
                      _ij35[0] = ij35;
                      _ij35[1] = -1;
                      for (int iij35 = ij35 + 1; iij35 < 2; ++iij35)
                      {
                        if (j35valid[iij35] && IKabs(cj35array[ij35] - cj35array[iij35]) < IKFAST_SOLUTION_THRESH &&
                            IKabs(sj35array[ij35] - sj35array[iij35]) < IKFAST_SOLUTION_THRESH)
                        {
                          j35valid[iij35] = false;
                          _ij35[1] = iij35;
                          break;
                        }
                      }
                      j35 = j35array[ij35];
                      cj35 = cj35array[ij35];
                      sj35 = sj35array[ij35];

                      {
                        IkReal j33eval[2];
                        IkReal x326 = cj31 * cj31;
                        IkReal x327 = r01 * r01;
                        IkReal x328 = cj32 * cj32;
                        IkReal x329 = r00 * r00;
                        IkReal x330 = r02 * r02;
                        IkReal x331 = (cj31 * sj31);
                        IkReal x332 = (r00 * r01);
                        IkReal x333 = ((12.9292971702848) * x326);
                        IkReal x334 = ((14.9292971702848) * x330);
                        IkReal x335 = ((0.99996599231498) * x326);
                        IkReal x336 = ((0.866035220734919) * x326);
                        IkReal x337 = ((14.928789459449) * x326);
                        IkReal x338 = (x328 * x329);
                        IkReal x339 = (x326 * x329);
                        IkReal x340 = (cj32 * r00 * r02 * sj32);
                        IkReal x341 = (x327 * x328);
                        IkReal x342 = (cj31 * cj32 * r01 * r02 * sj32);
                        IkReal x343 = (cj32 * r01 * r02 * sj31 * sj32);
                        j33eval[0] =
                            ((((-1.0) * x329 * x333)) + (((-7.72768973763434) * cj31 * x340)) + ((x332 * x337)) +
                             (((-7.46439472972451) * x332)) + (((-28.8412632752719) * x342)) + (((-1.0) * x329)) +
                             (((-13.9292971702848) * x327)) + (((-13.9292971702848) * x338)) +
                             (((7.46439472972451) * x331 * x338)) + ((x327 * x333)) +
                             (((7.46439472972451) * x328 * x332)) + ((x333 * x338)) +
                             (((28.8412632752719) * sj31 * x340)) + ((x328 * x334)) + (((-1.0) * x334)) +
                             (((-25.8585943405695) * x331 * x332)) + (((-1.0) * x328 * x332 * x337)) +
                             (((-1.0) * x333 * x341)) + (((25.8585943405695) * x328 * x331 * x332)) +
                             (((-7.46439472972451) * x331 * x341)) + (((-7.72768973763434) * x343)) +
                             (((-7.46439472972451) * x329 * x331)) + (((-1.0) * x341)) +
                             (((7.46439472972451) * x327 * x331)));
                        j33eval[1] = IKsign(
                            ((((-0.517619124965609) * x343)) + ((x336 * x338)) + (((-1.0) * x336 * x341)) +
                             (((-0.933017610367459) * x327)) + (((-0.0669823896325406) * x341)) +
                             (((-0.0669823896325406) * x329)) + (((-1.0) * x329 * x336)) + ((x332 * x335)) +
                             (((-0.49998299615749) * x331 * x341)) + (((-1.73207044146984) * x331 * x332)) +
                             (((-0.933017610367459) * x338)) + (((-0.49998299615749) * x332)) +
                             (((0.49998299615749) * x328 * x332)) + (((-1.0) * x330)) +
                             (((-0.517619124965609) * cj31 * x340)) + (((-1.93185673419895) * x342)) + ((x327 * x336)) +
                             (((0.49998299615749) * x327 * x331)) + (((0.49998299615749) * x331 * x338)) +
                             ((x328 * x330)) + (((-0.49998299615749) * x329 * x331)) + (((-1.0) * x328 * x332 * x335)) +
                             (((1.93185673419895) * sj31 * x340)) + (((1.73207044146984) * x328 * x331 * x332))));
                        if (IKabs(j33eval[0]) < 0.0000010000000000 || IKabs(j33eval[1]) < 0.0000010000000000)
                        {
                          {
                            IkReal j33eval[2];
                            IkReal x344 = (cj32 * r01);
                            IkReal x345 = (r00 * sj31);
                            IkReal x346 = (r02 * sj32);
                            IkReal x347 = (cj31 * r00);
                            IkReal x348 = (px * sj31);
                            IkReal x349 = (cj31 * px);
                            IkReal x350 = ((2591359.93079294) * pz);
                            IkReal x351 = (r01 * sj31);
                            IkReal x352 = (cj31 * r01);
                            IkReal x353 = ((0.258809562482804) * pz);
                            IkReal x354 = ((1472770.94985492) * sj32);
                            IkReal x355 = (py * sj31);
                            IkReal x356 = ((0.147091571741908) * sj32);
                            IkReal x357 = (cj31 * py);
                            IkReal x358 = (cj32 * py * r00);
                            IkReal x359 = (sj32 * x352);
                            IkReal x360 = ((9671466.70511504) * pz * sj32);
                            IkReal x361 = ((0.965928367099476) * pz * sj32);
                            j33eval[0] =
                                ((((-38870.3989618941) * x345)) + (((-145072.000576726) * x347)) +
                                 (((-1.0) * x347 * x360)) + (((-38871.3658073974) * cj31 * x344)) +
                                 (((-2591359.93079294) * x346 * x357)) + (((10012612.7718527) * px * x344)) +
                                 (((-394612.290261149) * sj32 * x345)) + (((9671466.70511504) * x346 * x349)) +
                                 (((2591359.93079294) * x346 * x348)) + (((-1.0) * x347 * x354)) +
                                 (((38871.3658073974) * cj32 * x345)) + ((x350 * x359)) +
                                 (((145071.745190097) * cj32 * x347)) + (((-1.0) * x351 * x354)) +
                                 (((-10012612.7718527) * x358)) + (((38870.3989618941) * x352)) +
                                 (((-145072.000576726) * x351)) + (((394612.290261149) * x359)) +
                                 (((145071.745190097) * sj31 * x344)) + (((-1.0) * sj32 * x345 * x350)) +
                                 (((9671466.70511504) * x346 * x355)) + (((-1.0) * x351 * x360)) + (((-1.0) * x346)));
                            j33eval[1] = IKsign(
                                ((((-1.0) * x347 * x361)) + (((0.965928367099476) * x346 * x349)) +
                                 (((-0.00388214343724207) * x345)) + (((0.258809562482804) * x346 * x348)) +
                                 (((0.965928367099476) * x346 * x355)) + (((-0.0394115201748815) * sj32 * x345)) +
                                 (((-9.9874031163093e-8) * x346)) + ((x353 * x359)) + (((0.0144889) * sj31 * x344)) +
                                 (((-1.0) * x358)) + (((-1.0) * x347 * x356)) + (((-0.00388224) * cj31 * x344)) +
                                 (((-1.0) * x351 * x356)) + (((-0.258809562482804) * x346 * x357)) +
                                 (((-0.0144889255064921) * x351)) + (((-1.0) * sj32 * x345 * x353)) +
                                 (((0.00388224) * cj32 * x345)) + (((0.00388214343724207) * x352)) +
                                 (((-0.0144889255064921) * x347)) + (((0.0394115201748815) * x359)) +
                                 (((-1.0) * x351 * x361)) + ((px * x344)) + (((0.0144889) * cj32 * x347))));
                            if (IKabs(j33eval[0]) < 0.0000010000000000 || IKabs(j33eval[1]) < 0.0000010000000000)
                            {
                              {
                                IkReal j33eval[2];
                                IkReal x362 = cj31 * cj31;
                                IkReal x363 = cj32 * cj32;
                                IkReal x364 = (cj32 * sj32);
                                IkReal x365 = (r01 * sj31);
                                IkReal x366 = (cj31 * r00);
                                IkReal x367 = ((33504462.6203904) * px);
                                IkReal x368 = ((0.00388214343724207) * cj32);
                                IkReal x369 = (px * r00);
                                IkReal x370 = ((19342933.4102301) * cj31);
                                IkReal x371 = (py * r01);
                                IkReal x372 = ((150189.191577791) * cj32);
                                IkReal x373 = ((33504462.6203904) * sj31);
                                IkReal x374 = (r00 * sj31);
                                IkReal x375 = (py * r00);
                                IkReal x376 = ((37369047.0024948) * pz);
                                IkReal x377 = (r02 * sj32);
                                IkReal x378 = ((5891284.14835535) * r02);
                                IkReal x379 = (cj31 * r01);
                                IkReal x380 = ((0.49998299615749) * px);
                                IkReal x381 = ((0.49998299615749) * cj31);
                                IkReal x382 = ((560535.705037422) * cj32);
                                IkReal x383 = ((0.866035220734919) * sj31);
                                IkReal x384 = (r02 * sj31);
                                IkReal x385 = (px * r01);
                                IkReal x386 = ((0.15228) * r02);
                                IkReal x387 = ((19342933.4102301) * px);
                                IkReal x388 = ((0.965928367099476) * pz);
                                IkReal x389 = (cj31 * r02);
                                IkReal x390 = ((10012612.7718527) * pz);
                                IkReal x391 = ((0.0144889255064921) * cj32);
                                IkReal x392 = (pz * r02);
                                IkReal x393 = ((0.258809562482804) * pz);
                                IkReal x394 = (py * x363);
                                IkReal x395 = ((0.0144889258483543) * x363);
                                IkReal x396 = ((19342933.4102301) * x362);
                                IkReal x397 = (r00 * x362);
                                IkReal x398 = (r01 * x362);
                                IkReal x399 = (sj31 * x363);
                                IkReal x400 = ((0.866035220734919) * cj31 * px);
                                IkReal x401 = ((0.49998299615749) * x362);
                                IkReal x402 = ((0.00388214352884016) * x363);
                                IkReal x403 = ((0.866035220734919) * x362);
                                IkReal x404 = ((560535.718263106) * x363);
                                IkReal x405 = ((150189.195121463) * x363);
                                IkReal x406 = (x363 * x385);
                                IkReal x407 = (x363 * x392);
                                IkReal x408 = (x363 * x403);
                                j33eval[0] =
                                    ((((9671466.70511504) * x385)) + (((-1.0) * cj31 * x363 * x365 * x367)) +
                                     (((-1.0) * x374)) + (((-1.0) * x363 * x378)) + ((cj31 * x365 * x367)) +
                                     (((-1.0) * x366 * x405)) + (((10012612.7718527) * py * x364 * x384)) +
                                     ((x367 * x397)) + (((-33504462.6203904) * x362 * x371)) +
                                     (((-1.0) * x385 * x396)) + (((-1.0) * x374 * x382)) + (((-1.0) * x365 * x405)) +
                                     (((-1.0) * x364 * x374 * x376)) + (((36095822.5511834) * x371)) + ((x365 * x372)) +
                                     (((-1.0) * x366 * x387 * x399)) + ((x374 * x404)) + (((-1.0) * x379 * x404)) +
                                     (((-1.0) * x366 * x373 * x394)) + ((x366 * x372)) +
                                     (((1524720.67289773) * x364 * x365)) + (((1524720.67289773) * x364 * x366)) +
                                     x379 + x378 + (((-38687182.4819763) * x407)) +
                                     (((36095822.5511834) * x363 * x369)) + (((5690558.47753991) * x364 * x379)) +
                                     (((-37369047.0024948) * px * x364 * x384)) + ((x379 * x382)) +
                                     (((-580307.750921844) * r02 * x364)) + ((sj31 * x366 * x387)) +
                                     ((x365 * x370 * x394)) + (((33504462.6203904) * x362 * x363 * x371)) +
                                     (((-9671466.70511504) * x406)) + (((9671466.70511504) * x375)) +
                                     (((2591359.93079294) * x363 * x371)) + (((-5690558.47753991) * x364 * x374)) +
                                     (((10012612.7718527) * px * x364 * x389)) + ((x364 * x365 * x390)) +
                                     ((x363 * x375 * x396)) + (((-1.0) * py * x365 * x370)) +
                                     (((-1.0) * x363 * x367 * x397)) + ((x364 * x366 * x390)) +
                                     (((-9671466.70511504) * x363 * x375)) + ((py * x366 * x373)) +
                                     (((580307.737229644) * x377)) + (((2591359.93079294) * x369)) +
                                     (((37369047.0024948) * py * x364 * x389)) + (((-3.73219736486225) * x365)) +
                                     (((-3.73219736486225) * x366)) + ((x396 * x406)) + (((-1.0) * x375 * x396)) +
                                     (((38687182.4819763) * x392)) + ((x364 * x376 * x379)));
                                j33eval[1] = IKsign(
                                    ((((0.249991498078745) * x375)) + (((-0.249991498078745) * x363 * x375)) +
                                     ((x364 * x379 * x388)) + (((-1.0) * x366 * x402)) + ((py * x366 * x383)) +
                                     ((x363 * x380 * x398)) + ((x379 * x391)) + (((2.58483543087141e-8) * x379)) +
                                     (((0.0669823896325406) * x363 * x371)) + (((-1.0) * py * x365 * x381)) +
                                     (((0.933017610367459) * x371)) + (((-0.0150000003539208) * r02 * x364)) +
                                     (((0.0669823896325406) * x369)) + (((0.249991498078745) * x385)) +
                                     (((-1.0) * x365 * x402)) + (((0.258809562482804) * py * x364 * x384)) +
                                     (((-0.965928367099476) * px * x364 * x384)) +
                                     (((0.258809562482804) * px * x364 * x389)) + ((x366 * x368)) +
                                     (((-1.0) * x363 * x365 * x400)) + (((0.933017610367459) * x363 * x369)) +
                                     ((x365 * x368)) + (((0.965928367099476) * py * x364 * x389)) +
                                     (((0.0394115201748815) * x364 * x366)) + (((0.0394115201748815) * x364 * x365)) +
                                     (((-9.64711598370086e-8) * x366)) + (((-9.64711598370086e-8) * x365)) +
                                     (((-1.0) * x364 * x374 * x388)) + x386 + x392 + (((-1.0) * x371 * x403)) +
                                     ((x365 * x400)) + ((x371 * x408)) + ((x365 * x381 * x394)) +
                                     (((-1.0) * x369 * x408)) + (((-1.0) * x380 * x398)) + ((sj31 * x366 * x380)) +
                                     (((0.015) * x377)) + (((-1.0) * x363 * x386)) + (((-1.0) * x374 * x391)) +
                                     (((0.147091571741908) * x364 * x379)) + (((-1.0) * x366 * x383 * x394)) +
                                     (((-2.58483543087141e-8) * x374)) + ((x364 * x365 * x393)) +
                                     (((-1.0) * x366 * x380 * x399)) + ((x364 * x366 * x393)) + ((x369 * x403)) +
                                     (((-1.0) * x379 * x395)) + (((-0.147091571741908) * x364 * x374)) +
                                     (((-0.249991498078745) * x406)) + (((-1.0) * x407)) + ((x374 * x395)) +
                                     ((x363 * x375 * x401)) + (((-1.0) * x375 * x401))));
                                if (IKabs(j33eval[0]) < 0.0000010000000000 || IKabs(j33eval[1]) < 0.0000010000000000)
                                {
                                  continue;  // no branches [j33]
                                }
                                else
                                {
                                  {
                                    IkReal j33array[1], cj33array[1], sj33array[1];
                                    bool j33valid[1] = { false };
                                    _nj33 = 1;
                                    CheckValue<IkReal> x409 = IKPowWithIntegerCheck(
                                        IKsign(((((-0.866035220734919) * px * r00 * (cj31 * cj31) * (cj32 * cj32))) +
                                                (((0.933017610367459) * py * r01)) +
                                                (((-0.965928367099476) * cj32 * px * r02 * sj31 * sj32)) +
                                                (((-0.49998299615749) * cj31 * py * r01 * sj31)) +
                                                (((-0.866035220734919) * py * r01 * (cj31 * cj31))) +
                                                (((-0.147091571741908) * cj32 * r00 * sj31 * sj32)) +
                                                (((0.933017610367459) * px * r00 * (cj32 * cj32))) +
                                                (((-0.0150000003539208) * cj32 * r02 * sj32)) +
                                                (((0.0144889255064921) * cj31 * cj32 * r01)) +
                                                (((0.965928367099476) * cj31 * cj32 * py * r02 * sj32)) +
                                                (((0.258809562482804) * cj31 * cj32 * px * r02 * sj32)) +
                                                (((-0.0144889258483543) * cj31 * r01 * (cj32 * cj32))) +
                                                (((0.249991498078745) * px * r01)) +
                                                (((0.49998299615749) * px * r01 * (cj31 * cj31) * (cj32 * cj32))) +
                                                (((-0.0144889255064921) * cj32 * r00 * sj31)) +
                                                (((-0.00388214352884016) * r01 * sj31 * (cj32 * cj32))) +
                                                (((0.0669823896325406) * px * r00)) +
                                                (((0.965928367099476) * cj31 * cj32 * pz * r01 * sj32)) +
                                                (((0.258809562482804) * cj32 * pz * r01 * sj31 * sj32)) +
                                                (((0.258809562482804) * cj31 * cj32 * pz * r00 * sj32)) +
                                                (((0.15228) * r02)) + (((2.58483543087141e-8) * cj31 * r01)) +
                                                (((-0.866035220734919) * cj31 * py * r00 * sj31 * (cj32 * cj32))) +
                                                (((0.015) * r02 * sj32)) + (((-9.64711598370086e-8) * cj31 * r00)) +
                                                (((-0.15228) * r02 * (cj32 * cj32))) +
                                                (((0.147091571741908) * cj31 * cj32 * r01 * sj32)) +
                                                (((0.249991498078745) * py * r00)) +
                                                (((0.0394115201748815) * cj32 * r01 * sj31 * sj32)) +
                                                (((0.49998299615749) * py * r00 * (cj31 * cj31) * (cj32 * cj32))) +
                                                (((0.00388214343724207) * cj31 * cj32 * r00)) +
                                                (((-0.866035220734919) * cj31 * px * r01 * sj31 * (cj32 * cj32))) +
                                                (((-0.965928367099476) * cj32 * pz * r00 * sj31 * sj32)) +
                                                (((0.00388214343724207) * cj32 * r01 * sj31)) +
                                                (((0.866035220734919) * cj31 * py * r00 * sj31)) +
                                                (((0.258809562482804) * cj32 * py * r02 * sj31 * sj32)) +
                                                (((-1.0) * pz * r02 * (cj32 * cj32))) +
                                                (((0.49998299615749) * cj31 * py * r01 * sj31 * (cj32 * cj32))) +
                                                (((-0.49998299615749) * py * r00 * (cj31 * cj31))) +
                                                (((0.866035220734919) * px * r00 * (cj31 * cj31))) +
                                                (((0.866035220734919) * py * r01 * (cj31 * cj31) * (cj32 * cj32))) +
                                                (((-0.249991498078745) * px * r01 * (cj32 * cj32))) +
                                                (((0.0394115201748815) * cj31 * cj32 * r00 * sj32)) + ((pz * r02)) +
                                                (((0.49998299615749) * cj31 * px * r00 * sj31)) +
                                                (((0.0144889258483543) * r00 * sj31 * (cj32 * cj32))) +
                                                (((-0.249991498078745) * py * r00 * (cj32 * cj32))) +
                                                (((-0.49998299615749) * cj31 * px * r00 * sj31 * (cj32 * cj32))) +
                                                (((-0.49998299615749) * px * r01 * (cj31 * cj31))) +
                                                (((0.866035220734919) * cj31 * px * r01 * sj31)) +
                                                (((-9.64711598370086e-8) * r01 * sj31)) +
                                                (((-2.58483543087141e-8) * r00 * sj31)) +
                                                (((0.0669823896325406) * py * r01 * (cj32 * cj32))) +
                                                (((-0.00388214352884016) * cj31 * r00 * (cj32 * cj32))))),
                                        -1);
                                    if (!x409.valid)
                                    {
                                      continue;
                                    }
                                    CheckValue<IkReal> x410 = IKatan2WithCheck(
                                        IkReal(((((-0.0161755976551753) * cj31 * cj32 * cj35 * r00 * sj34)) +
                                                (((0.0154548538735916) * cj32 * cj34 * r00 * sj31)) +
                                                (((-4.39976256220768e-8) * cj32 * r01 * sj31 * sj34 * sj35)) +
                                                (((-0.0625) * cj35 * r02 * sj32 * sj34)) +
                                                (((-4.39976256220768e-8) * cj31 * cj32 * r00 * sj34 * sj35)) +
                                                (((0.0603705229437172) * cj32 * cj35 * r00 * sj31 * sj34)) +
                                                (((-1.7e-7) * r02 * sj32 * sj34 * sj35)) +
                                                (((1.64207822406911e-7) * cj32 * r00 * sj31 * sj34 * sj35)) +
                                                (((-0.0161755976551753) * cj32 * cj35 * r01 * sj31 * sj34)) +
                                                (((-0.0154548538735916) * cj31 * cj32 * cj34 * r01)) +
                                                (((-0.016) * cj34 * r02 * sj32)) +
                                                (((-0.0603705229437172) * cj31 * cj32 * cj35 * r01 * sj34)) +
                                                (((-0.00414095299972487) * cj32 * cj34 * r01 * sj31)) +
                                                (((-1.64207822406911e-7) * cj31 * cj32 * r01 * sj34 * sj35)) +
                                                (((-0.00414095299972487) * cj31 * cj32 * cj34 * r00)))),
                                        IkReal(((((-1.64207822406911e-7) * r01 * sj31 * sj34 * sj35)) +
                                                (((-0.0154548538735916) * cj34 * r01 * sj31)) +
                                                (((-0.0603705229437172) * cj35 * r01 * sj31 * sj34)) +
                                                (((0.0161755976551753) * cj31 * cj35 * r01 * sj34)) +
                                                (((0.00414095299972487) * cj31 * cj34 * r01)) +
                                                (((-1.64207822406911e-7) * cj31 * r00 * sj34 * sj35)) +
                                                (((4.39976256220768e-8) * cj31 * r01 * sj34 * sj35)) +
                                                (((-0.00414095299972487) * cj34 * r00 * sj31)) +
                                                (((-4.39976256220768e-8) * r00 * sj31 * sj34 * sj35)) +
                                                (((-0.0603705229437172) * cj31 * cj35 * r00 * sj34)) +
                                                (((-0.0161755976551753) * cj35 * r00 * sj31 * sj34)) +
                                                (((-0.0154548538735916) * cj31 * cj34 * r00)))),
                                        IKFAST_ATAN2_MAGTHRESH);
                                    if (!x410.valid)
                                    {
                                      continue;
                                    }
                                    j33array[0] =
                                        ((-1.5707963267949) + (((1.5707963267949) * (x409.value))) + (x410.value));
                                    sj33array[0] = IKsin(j33array[0]);
                                    cj33array[0] = IKcos(j33array[0]);
                                    if (j33array[0] > IKPI)
                                    {
                                      j33array[0] -= IK2PI;
                                    }
                                    else if (j33array[0] < -IKPI)
                                    {
                                      j33array[0] += IK2PI;
                                    }
                                    j33valid[0] = true;
                                    for (int ij33 = 0; ij33 < 1; ++ij33)
                                    {
                                      if (!j33valid[ij33])
                                      {
                                        continue;
                                      }
                                      _ij33[0] = ij33;
                                      _ij33[1] = -1;
                                      for (int iij33 = ij33 + 1; iij33 < 1; ++iij33)
                                      {
                                        if (j33valid[iij33] &&
                                            IKabs(cj33array[ij33] - cj33array[iij33]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj33array[ij33] - sj33array[iij33]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j33valid[iij33] = false;
                                          _ij33[1] = iij33;
                                          break;
                                        }
                                      }
                                      j33 = j33array[ij33];
                                      cj33 = cj33array[ij33];
                                      sj33 = sj33array[ij33];
                                      {
                                        IkReal evalcond[4];
                                        IkReal x411 = IKcos(j33);
                                        IkReal x412 = IKsin(j33);
                                        IkReal x413 = ((0.258809562482804) * sj31);
                                        IkReal x414 = (cj32 * r00);
                                        IkReal x415 = ((0.965928367099476) * cj31);
                                        IkReal x416 = ((0.965928367099476) * sj31);
                                        IkReal x417 = ((0.258809562482804) * cj31);
                                        IkReal x418 = (sj32 * x411);
                                        IkReal x419 = (cj32 * x412);
                                        IkReal x420 = (px * x412);
                                        IkReal x421 = (sj32 * x412);
                                        IkReal x422 = (px * x411);
                                        IkReal x423 = (cj32 * x411);
                                        IkReal x424 = (r00 * x412);
                                        IkReal x425 = (r00 * x411);
                                        IkReal x426 = (x411 * x417);
                                        IkReal x427 = (x412 * x416);
                                        evalcond[0] =
                                            ((((-1.0) * x411 * x414 * x416)) + ((x414 * x426)) +
                                             (((-1.0) * r01 * x427)) + (((-1.0) * x413 * x424)) +
                                             (((-1.0) * x415 * x424)) + ((r02 * x418)) + ((r01 * x413 * x423)) +
                                             ((r01 * x412 * x417)) + ((r01 * x415 * x423)));
                                        evalcond[1] = ((((-1.0) * r01 * x415 * x419)) + (((-1.0) * r02 * x421)) +
                                                       ((x414 * x427)) + (((-1.0) * cj34)) + ((r01 * x426)) +
                                                       (((-1.0) * x412 * x414 * x417)) +
                                                       (((-1.0) * r01 * x411 * x416)) + (((-1.0) * x413 * x425)) +
                                                       (((-1.0) * x415 * x425)) + (((-1.0) * r01 * x413 * x419)));
                                        evalcond[2] =
                                            ((((0.0625) * sj35)) + ((pz * x418)) + (((0.015) * x411)) +
                                             (((9.9874031163093e-8) * x412)) + (((-0.0150000003539208) * x423)) +
                                             (((-1.0) * cj32 * x416 * x422)) + ((py * x415 * x423)) +
                                             ((py * x413 * x423)) + (((-1.0) * x413 * x420)) +
                                             (((-1.0) * x415 * x420)) + (((0.15228) * x418)) + (((-1.0) * py * x427)) +
                                             ((py * x412 * x417)) + (((-1.7e-7) * cj35)) + ((cj32 * x417 * x422)));
                                        evalcond[3] = (((px * x416 * x419)) + (((-1.0) * pz * x421)) +
                                                       (((-0.15228) * x421)) + (((-0.015) * x412)) +
                                                       (((-1.0) * py * x415 * x419)) + (((-1.0) * px * x417 * x419)) +
                                                       (((-0.016) * cj34)) + (((9.9874031163093e-8) * x411)) +
                                                       (((-1.0) * py * x411 * x416)) + (((-1.0) * py * x413 * x419)) +
                                                       ((py * x426)) + (((-1.7e-7) * sj34 * sj35)) +
                                                       (((-1.0) * x413 * x422)) + (((-1.0) * x415 * x422)) +
                                                       (((0.0150000003539208) * x419)) + (((-0.0625) * cj35 * sj34)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                        {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                        vinfos[0].jointtype = 1;
                                        vinfos[0].foffset = j29;
                                        vinfos[0].indices[0] = _ij29[0];
                                        vinfos[0].indices[1] = _ij29[1];
                                        vinfos[0].maxsolutions = _nj29;
                                        vinfos[1].jointtype = 1;
                                        vinfos[1].foffset = j30;
                                        vinfos[1].indices[0] = _ij30[0];
                                        vinfos[1].indices[1] = _ij30[1];
                                        vinfos[1].maxsolutions = _nj30;
                                        vinfos[2].jointtype = 1;
                                        vinfos[2].foffset = j31;
                                        vinfos[2].indices[0] = _ij31[0];
                                        vinfos[2].indices[1] = _ij31[1];
                                        vinfos[2].maxsolutions = _nj31;
                                        vinfos[3].jointtype = 1;
                                        vinfos[3].foffset = j32;
                                        vinfos[3].indices[0] = _ij32[0];
                                        vinfos[3].indices[1] = _ij32[1];
                                        vinfos[3].maxsolutions = _nj32;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j33;
                                        vinfos[4].indices[0] = _ij33[0];
                                        vinfos[4].indices[1] = _ij33[1];
                                        vinfos[4].maxsolutions = _nj33;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j34;
                                        vinfos[5].indices[0] = _ij34[0];
                                        vinfos[5].indices[1] = _ij34[1];
                                        vinfos[5].maxsolutions = _nj34;
                                        vinfos[6].jointtype = 1;
                                        vinfos[6].foffset = j35;
                                        vinfos[6].indices[0] = _ij35[0];
                                        vinfos[6].indices[1] = _ij35[1];
                                        vinfos[6].maxsolutions = _nj35;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            else
                            {
                              {
                                IkReal j33array[1], cj33array[1], sj33array[1];
                                bool j33valid[1] = { false };
                                _nj33 = 1;
                                IkReal x428 = (r02 * sj32);
                                IkReal x429 = (cj31 * r00);
                                IkReal x430 = ((1.64207822406911e-7) * cj35);
                                IkReal x431 = ((0.258809562482804) * cj31);
                                IkReal x432 = ((0.0144889) * cj32);
                                IkReal x433 = ((0.0603705229437172) * sj35);
                                IkReal x434 = (r01 * sj31);
                                IkReal x435 = (cj31 * r01);
                                IkReal x436 = ((0.0394115201748815) * sj32);
                                IkReal x437 = (r00 * sj31);
                                IkReal x438 = ((4.39976256220768e-8) * cj35);
                                IkReal x439 = (pz * sj32);
                                IkReal x440 = ((0.0161755976551753) * sj35);
                                IkReal x441 = ((0.147091571741908) * sj32);
                                IkReal x442 = (cj32 * x437);
                                IkReal x443 = (cj32 * x440);
                                CheckValue<IkReal> x444 = IKPowWithIntegerCheck(
                                    IKsign((((x429 * x432)) + (((-0.965928367099476) * x429 * x439)) +
                                            (((-0.00388224) * cj32 * x435)) + (((-1.0) * x434 * x441)) +
                                            (((-0.00388214343724207) * x437)) + (((-0.258809562482804) * x437 * x439)) +
                                            (((-1.0) * x429 * x441)) + (((-1.0) * x436 * x437)) +
                                            (((-1.0) * py * x428 * x431)) + (((-9.9874031163093e-8) * x428)) +
                                            (((0.00388214343724207) * x435)) + ((cj32 * px * r01)) +
                                            (((0.965928367099476) * py * sj31 * x428)) + (((-1.0) * cj32 * py * r00)) +
                                            (((-0.0144889255064921) * x434)) + (((0.00388224) * x442)) +
                                            ((r01 * x431 * x439)) + (((0.965928367099476) * cj31 * px * x428)) +
                                            (((-0.965928367099476) * x434 * x439)) +
                                            (((0.258809562482804) * px * sj31 * x428)) +
                                            (((-0.0144889255064921) * x429)) + ((x432 * x434)) + ((x435 * x436)))),
                                    -1);
                                if (!x444.valid)
                                {
                                  continue;
                                }
                                CheckValue<IkReal> x445 = IKatan2WithCheck(
                                    IkReal((((x434 * x443)) + (((-1.0) * x433 * x442)) + ((cj32 * x433 * x435)) +
                                            (((-1.0) * cj32 * x429 * x438)) + (((-1.0) * cj32 * x434 * x438)) +
                                            ((x430 * x442)) + (((0.0625) * sj35 * x428)) + ((x429 * x443)) +
                                            (((-1.0) * cj32 * x430 * x435)) + (((-1.7e-7) * cj35 * x428)))),
                                    IkReal(((((-1.0) * x430 * x434)) + ((x429 * x433)) + (((-1.0) * x437 * x438)) +
                                            (((-1.0) * x435 * x440)) + (((-1.0) * x429 * x430)) + ((x433 * x434)) +
                                            ((x437 * x440)) + ((x435 * x438)))),
                                    IKFAST_ATAN2_MAGTHRESH);
                                if (!x445.valid)
                                {
                                  continue;
                                }
                                j33array[0] =
                                    ((-1.5707963267949) + (((1.5707963267949) * (x444.value))) + (x445.value));
                                sj33array[0] = IKsin(j33array[0]);
                                cj33array[0] = IKcos(j33array[0]);
                                if (j33array[0] > IKPI)
                                {
                                  j33array[0] -= IK2PI;
                                }
                                else if (j33array[0] < -IKPI)
                                {
                                  j33array[0] += IK2PI;
                                }
                                j33valid[0] = true;
                                for (int ij33 = 0; ij33 < 1; ++ij33)
                                {
                                  if (!j33valid[ij33])
                                  {
                                    continue;
                                  }
                                  _ij33[0] = ij33;
                                  _ij33[1] = -1;
                                  for (int iij33 = ij33 + 1; iij33 < 1; ++iij33)
                                  {
                                    if (j33valid[iij33] &&
                                        IKabs(cj33array[ij33] - cj33array[iij33]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj33array[ij33] - sj33array[iij33]) < IKFAST_SOLUTION_THRESH)
                                    {
                                      j33valid[iij33] = false;
                                      _ij33[1] = iij33;
                                      break;
                                    }
                                  }
                                  j33 = j33array[ij33];
                                  cj33 = cj33array[ij33];
                                  sj33 = sj33array[ij33];
                                  {
                                    IkReal evalcond[4];
                                    IkReal x446 = IKcos(j33);
                                    IkReal x447 = IKsin(j33);
                                    IkReal x448 = ((0.258809562482804) * sj31);
                                    IkReal x449 = (cj32 * r00);
                                    IkReal x450 = ((0.965928367099476) * cj31);
                                    IkReal x451 = ((0.965928367099476) * sj31);
                                    IkReal x452 = ((0.258809562482804) * cj31);
                                    IkReal x453 = (sj32 * x446);
                                    IkReal x454 = (cj32 * x447);
                                    IkReal x455 = (px * x447);
                                    IkReal x456 = (sj32 * x447);
                                    IkReal x457 = (px * x446);
                                    IkReal x458 = (cj32 * x446);
                                    IkReal x459 = (r00 * x447);
                                    IkReal x460 = (r00 * x446);
                                    IkReal x461 = (x446 * x452);
                                    IkReal x462 = (x447 * x451);
                                    evalcond[0] = (((r01 * x447 * x452)) + (((-1.0) * r01 * x462)) +
                                                   ((r01 * x450 * x458)) + (((-1.0) * x450 * x459)) + ((x449 * x461)) +
                                                   ((r02 * x453)) + (((-1.0) * x446 * x449 * x451)) +
                                                   ((r01 * x448 * x458)) + (((-1.0) * x448 * x459)));
                                    evalcond[1] =
                                        ((((-1.0) * x448 * x460)) + (((-1.0) * x447 * x449 * x452)) +
                                         (((-1.0) * r01 * x450 * x454)) + (((-1.0) * cj34)) + (((-1.0) * r02 * x456)) +
                                         ((x449 * x462)) + (((-1.0) * r01 * x448 * x454)) + (((-1.0) * x450 * x460)) +
                                         ((r01 * x461)) + (((-1.0) * r01 * x446 * x451)));
                                    evalcond[2] =
                                        ((((0.0625) * sj35)) + ((py * x447 * x452)) + ((cj32 * x452 * x457)) +
                                         (((0.15228) * x453)) + (((-1.0) * py * x462)) + (((0.015) * x446)) +
                                         (((-1.0) * x450 * x455)) + (((-1.0) * cj32 * x451 * x457)) +
                                         (((9.9874031163093e-8) * x447)) + ((pz * x453)) + ((py * x448 * x458)) +
                                         ((py * x450 * x458)) + (((-0.0150000003539208) * x458)) +
                                         (((-1.0) * x448 * x455)) + (((-1.7e-7) * cj35)));
                                    evalcond[3] =
                                        ((((-1.0) * py * x446 * x451)) + (((-1.0) * py * x450 * x454)) +
                                         (((0.0150000003539208) * x454)) + (((-1.0) * py * x448 * x454)) +
                                         (((-1.0) * pz * x456)) + (((-0.015) * x447)) + (((-0.016) * cj34)) +
                                         ((px * x451 * x454)) + (((-1.0) * px * x452 * x454)) +
                                         (((-1.7e-7) * sj34 * sj35)) + (((-1.0) * x450 * x457)) +
                                         (((9.9874031163093e-8) * x446)) + (((-0.15228) * x456)) + ((py * x461)) +
                                         (((-0.0625) * cj35 * sj34)) + (((-1.0) * x448 * x457)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                    {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j29;
                                    vinfos[0].indices[0] = _ij29[0];
                                    vinfos[0].indices[1] = _ij29[1];
                                    vinfos[0].maxsolutions = _nj29;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j30;
                                    vinfos[1].indices[0] = _ij30[0];
                                    vinfos[1].indices[1] = _ij30[1];
                                    vinfos[1].maxsolutions = _nj30;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j31;
                                    vinfos[2].indices[0] = _ij31[0];
                                    vinfos[2].indices[1] = _ij31[1];
                                    vinfos[2].maxsolutions = _nj31;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j32;
                                    vinfos[3].indices[0] = _ij32[0];
                                    vinfos[3].indices[1] = _ij32[1];
                                    vinfos[3].maxsolutions = _nj32;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j33;
                                    vinfos[4].indices[0] = _ij33[0];
                                    vinfos[4].indices[1] = _ij33[1];
                                    vinfos[4].maxsolutions = _nj33;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j34;
                                    vinfos[5].indices[0] = _ij34[0];
                                    vinfos[5].indices[1] = _ij34[1];
                                    vinfos[5].maxsolutions = _nj34;
                                    vinfos[6].jointtype = 1;
                                    vinfos[6].foffset = j35;
                                    vinfos[6].indices[0] = _ij35[0];
                                    vinfos[6].indices[1] = _ij35[1];
                                    vinfos[6].maxsolutions = _nj35;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          {
                            IkReal j33array[1], cj33array[1], sj33array[1];
                            bool j33valid[1] = { false };
                            _nj33 = 1;
                            IkReal x463 = cj32 * cj32;
                            IkReal x464 = cj31 * cj31;
                            IkReal x465 = r01 * r01;
                            IkReal x466 = r00 * r00;
                            IkReal x467 = r02 * r02;
                            IkReal x468 = (r01 * sj31);
                            IkReal x469 = (cj31 * r00);
                            IkReal x470 = ((0.965928367099476) * cj34);
                            IkReal x471 = (r00 * r01);
                            IkReal x472 = (r00 * sj31);
                            IkReal x473 = ((0.258809562482804) * cj34);
                            IkReal x474 = (cj31 * r01);
                            IkReal x475 = ((0.99996599231498) * x464);
                            IkReal x476 = (cj32 * r02 * sj32);
                            IkReal x477 = ((0.49998299615749) * cj31 * sj31);
                            IkReal x478 = ((0.866035220734919) * x464);
                            IkReal x479 = (x463 * x465);
                            IkReal x480 = (x463 * x466);
                            IkReal x481 = (x466 * x477);
                            CheckValue<IkReal> x482 =
                                IKatan2WithCheck(IkReal((((cj32 * x468 * x473)) + ((cj32 * x469 * x473)) +
                                                         (((-1.0) * cj32 * x470 * x472)) + ((cj34 * r02 * sj32)) +
                                                         ((cj32 * x470 * x474)))),
                                                 IkReal((((x469 * x470)) + ((x472 * x473)) + (((-1.0) * x473 * x474)) +
                                                         ((x468 * x470)))),
                                                 IKFAST_ATAN2_MAGTHRESH);
                            if (!x482.valid)
                            {
                              continue;
                            }
                            CheckValue<IkReal> x483 = IKPowWithIntegerCheck(
                                IKsign((
                                    (((-0.933017610367459) * x480)) + ((x471 * x475)) +
                                    (((1.73207044146984) * x463 * x468 * x469)) + (((1.93185673419895) * x472 * x476)) +
                                    (((-1.0) * x477 * x479)) + (((-1.0) * x481)) + (((-1.0) * x478 * x479)) +
                                    (((0.49998299615749) * x463 * x471)) + ((x463 * x467)) + (((-1.0) * x467)) +
                                    ((x465 * x478)) + ((x465 * x477)) + (((-0.517619124965609) * x469 * x476)) +
                                    (((-0.49998299615749) * x471)) + (((-0.933017610367459) * x465)) + ((x478 * x480)) +
                                    (((-1.73207044146984) * x468 * x469)) + (((-0.517619124965609) * x468 * x476)) +
                                    (((-1.93185673419895) * x474 * x476)) + (((-1.0) * x463 * x471 * x475)) +
                                    (((-1.0) * x466 * x478)) + (((-0.0669823896325406) * x466)) +
                                    (((-0.0669823896325406) * x479)) + ((x477 * x480)))),
                                -1);
                            if (!x483.valid)
                            {
                              continue;
                            }
                            j33array[0] = ((-1.5707963267949) + (x482.value) + (((1.5707963267949) * (x483.value))));
                            sj33array[0] = IKsin(j33array[0]);
                            cj33array[0] = IKcos(j33array[0]);
                            if (j33array[0] > IKPI)
                            {
                              j33array[0] -= IK2PI;
                            }
                            else if (j33array[0] < -IKPI)
                            {
                              j33array[0] += IK2PI;
                            }
                            j33valid[0] = true;
                            for (int ij33 = 0; ij33 < 1; ++ij33)
                            {
                              if (!j33valid[ij33])
                              {
                                continue;
                              }
                              _ij33[0] = ij33;
                              _ij33[1] = -1;
                              for (int iij33 = ij33 + 1; iij33 < 1; ++iij33)
                              {
                                if (j33valid[iij33] &&
                                    IKabs(cj33array[ij33] - cj33array[iij33]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj33array[ij33] - sj33array[iij33]) < IKFAST_SOLUTION_THRESH)
                                {
                                  j33valid[iij33] = false;
                                  _ij33[1] = iij33;
                                  break;
                                }
                              }
                              j33 = j33array[ij33];
                              cj33 = cj33array[ij33];
                              sj33 = sj33array[ij33];
                              {
                                IkReal evalcond[4];
                                IkReal x484 = IKcos(j33);
                                IkReal x485 = IKsin(j33);
                                IkReal x486 = ((0.258809562482804) * sj31);
                                IkReal x487 = (cj32 * r00);
                                IkReal x488 = ((0.965928367099476) * cj31);
                                IkReal x489 = ((0.965928367099476) * sj31);
                                IkReal x490 = ((0.258809562482804) * cj31);
                                IkReal x491 = (sj32 * x484);
                                IkReal x492 = (cj32 * x485);
                                IkReal x493 = (px * x485);
                                IkReal x494 = (sj32 * x485);
                                IkReal x495 = (px * x484);
                                IkReal x496 = (cj32 * x484);
                                IkReal x497 = (r00 * x485);
                                IkReal x498 = (r00 * x484);
                                IkReal x499 = (x484 * x490);
                                IkReal x500 = (x485 * x489);
                                evalcond[0] =
                                    ((((-1.0) * x488 * x497)) + ((r02 * x491)) + (((-1.0) * x486 * x497)) +
                                     ((r01 * x486 * x496)) + (((-1.0) * x484 * x487 * x489)) + (((-1.0) * r01 * x500)) +
                                     ((r01 * x488 * x496)) + ((x487 * x499)) + ((r01 * x485 * x490)));
                                evalcond[1] =
                                    ((((-1.0) * x488 * x498)) + (((-1.0) * x486 * x498)) +
                                     (((-1.0) * r01 * x488 * x492)) + (((-1.0) * cj34)) + ((x487 * x500)) +
                                     (((-1.0) * r01 * x484 * x489)) + (((-1.0) * r02 * x494)) +
                                     (((-1.0) * x485 * x487 * x490)) + (((-1.0) * r01 * x486 * x492)) + ((r01 * x499)));
                                evalcond[2] = ((((-0.0150000003539208) * x496)) + (((-1.0) * x488 * x493)) +
                                               ((pz * x491)) + (((-1.0) * py * x500)) + (((0.0625) * sj35)) +
                                               (((0.015) * x484)) + ((cj32 * x490 * x495)) + (((-1.0) * x486 * x493)) +
                                               (((9.9874031163093e-8) * x485)) + ((py * x485 * x490)) +
                                               ((py * x486 * x496)) + (((-1.0) * cj32 * x489 * x495)) +
                                               ((py * x488 * x496)) + (((0.15228) * x491)) + (((-1.7e-7) * cj35)));
                                evalcond[3] = ((((-1.0) * x488 * x495)) + ((py * x499)) + (((-1.0) * x486 * x495)) +
                                               (((-0.015) * x485)) + (((-1.0) * py * x484 * x489)) +
                                               (((9.9874031163093e-8) * x484)) + (((-0.016) * cj34)) +
                                               (((-1.0) * py * x488 * x492)) + (((-1.0) * pz * x494)) +
                                               (((-1.0) * px * x490 * x492)) + (((-1.7e-7) * sj34 * sj35)) +
                                               ((px * x489 * x492)) + (((0.0150000003539208) * x492)) +
                                               (((-0.0625) * cj35 * sj34)) + (((-1.0) * py * x486 * x492)) +
                                               (((-0.15228) * x494)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                vinfos[0].jointtype = 1;
                                vinfos[0].foffset = j29;
                                vinfos[0].indices[0] = _ij29[0];
                                vinfos[0].indices[1] = _ij29[1];
                                vinfos[0].maxsolutions = _nj29;
                                vinfos[1].jointtype = 1;
                                vinfos[1].foffset = j30;
                                vinfos[1].indices[0] = _ij30[0];
                                vinfos[1].indices[1] = _ij30[1];
                                vinfos[1].maxsolutions = _nj30;
                                vinfos[2].jointtype = 1;
                                vinfos[2].foffset = j31;
                                vinfos[2].indices[0] = _ij31[0];
                                vinfos[2].indices[1] = _ij31[1];
                                vinfos[2].maxsolutions = _nj31;
                                vinfos[3].jointtype = 1;
                                vinfos[3].foffset = j32;
                                vinfos[3].indices[0] = _ij32[0];
                                vinfos[3].indices[1] = _ij32[1];
                                vinfos[3].maxsolutions = _nj32;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j33;
                                vinfos[4].indices[0] = _ij33[0];
                                vinfos[4].indices[1] = _ij33[1];
                                vinfos[4].maxsolutions = _nj33;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j34;
                                vinfos[5].indices[0] = _ij34[0];
                                vinfos[5].indices[1] = _ij34[1];
                                vinfos[5].maxsolutions = _nj34;
                                vinfos[6].jointtype = 1;
                                vinfos[6].foffset = j35;
                                vinfos[6].indices[0] = _ij35[0];
                                vinfos[6].indices[1] = _ij35[1];
                                vinfos[6].maxsolutions = _nj35;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                IkReal j33array[1], cj33array[1], sj33array[1];
                bool j33valid[1] = { false };
                _nj33 = 1;
                IkReal x501 = cj32 * cj32;
                IkReal x502 = cj31 * cj31;
                IkReal x503 = r01 * r01;
                IkReal x504 = r00 * r00;
                IkReal x505 = r02 * r02;
                IkReal x506 = (r01 * sj31);
                IkReal x507 = (cj31 * r00);
                IkReal x508 = ((0.965928367099476) * cj34);
                IkReal x509 = (r00 * r01);
                IkReal x510 = (r00 * sj31);
                IkReal x511 = ((0.258809562482804) * cj34);
                IkReal x512 = (cj31 * r01);
                IkReal x513 = ((0.99996599231498) * x502);
                IkReal x514 = (cj32 * r02 * sj32);
                IkReal x515 = ((0.49998299615749) * cj31 * sj31);
                IkReal x516 = ((0.866035220734919) * x502);
                IkReal x517 = (x501 * x503);
                IkReal x518 = (x501 * x504);
                IkReal x519 = (x504 * x515);
                CheckValue<IkReal> x520 = IKatan2WithCheck(
                    IkReal(((((-1.0) * cj32 * x508 * x510)) + ((cj32 * x508 * x512)) + ((cj32 * x506 * x511)) +
                            ((cj32 * x507 * x511)) + ((cj34 * r02 * sj32)))),
                    IkReal(((((-1.0) * x511 * x512)) + ((x510 * x511)) + ((x506 * x508)) + ((x507 * x508)))),
                    IKFAST_ATAN2_MAGTHRESH);
                if (!x520.valid)
                {
                  continue;
                }
                CheckValue<IkReal> x521 = IKPowWithIntegerCheck(
                    IKsign(((((-0.0669823896325406) * x504)) + (((1.93185673419895) * x510 * x514)) +
                            (((1.73207044146984) * x501 * x506 * x507)) + (((-1.0) * x501 * x509 * x513)) +
                            (((-1.0) * x504 * x516)) + ((x503 * x516)) + ((x503 * x515)) +
                            (((-0.0669823896325406) * x517)) + (((0.49998299615749) * x501 * x509)) + ((x501 * x505)) +
                            (((-1.0) * x516 * x517)) + (((-0.49998299615749) * x509)) + (((-1.0) * x515 * x517)) +
                            ((x516 * x518)) + (((-1.73207044146984) * x506 * x507)) +
                            (((-0.517619124965609) * x506 * x514)) + (((-0.517619124965609) * x507 * x514)) +
                            (((-1.93185673419895) * x512 * x514)) + (((-0.933017610367459) * x518)) + ((x515 * x518)) +
                            (((-1.0) * x519)) + (((-1.0) * x505)) + ((x509 * x513)) + (((-0.933017610367459) * x503)))),
                    -1);
                if (!x521.valid)
                {
                  continue;
                }
                j33array[0] = ((-1.5707963267949) + (x520.value) + (((1.5707963267949) * (x521.value))));
                sj33array[0] = IKsin(j33array[0]);
                cj33array[0] = IKcos(j33array[0]);
                if (j33array[0] > IKPI)
                {
                  j33array[0] -= IK2PI;
                }
                else if (j33array[0] < -IKPI)
                {
                  j33array[0] += IK2PI;
                }
                j33valid[0] = true;
                for (int ij33 = 0; ij33 < 1; ++ij33)
                {
                  if (!j33valid[ij33])
                  {
                    continue;
                  }
                  _ij33[0] = ij33;
                  _ij33[1] = -1;
                  for (int iij33 = ij33 + 1; iij33 < 1; ++iij33)
                  {
                    if (j33valid[iij33] && IKabs(cj33array[ij33] - cj33array[iij33]) < IKFAST_SOLUTION_THRESH &&
                        IKabs(sj33array[ij33] - sj33array[iij33]) < IKFAST_SOLUTION_THRESH)
                    {
                      j33valid[iij33] = false;
                      _ij33[1] = iij33;
                      break;
                    }
                  }
                  j33 = j33array[ij33];
                  cj33 = cj33array[ij33];
                  sj33 = sj33array[ij33];
                  {
                    IkReal evalcond[2];
                    IkReal x522 = IKcos(j33);
                    IkReal x523 = IKsin(j33);
                    IkReal x524 = ((0.965928367099476) * r01);
                    IkReal x525 = (r02 * sj32);
                    IkReal x526 = ((0.965928367099476) * r00);
                    IkReal x527 = ((0.258809562482804) * r00);
                    IkReal x528 = ((0.258809562482804) * r01);
                    IkReal x529 = (cj32 * x522);
                    IkReal x530 = (sj31 * x523);
                    IkReal x531 = (cj31 * x523);
                    IkReal x532 = (cj31 * x522);
                    IkReal x533 = (sj31 * x522);
                    evalcond[0] = (((x522 * x525)) + (((-1.0) * x524 * x530)) + (((-1.0) * x526 * x531)) +
                                   (((-1.0) * x527 * x530)) + (((-1.0) * sj31 * x526 * x529)) + ((cj31 * x527 * x529)) +
                                   ((cj31 * x524 * x529)) + ((x528 * x531)) + ((sj31 * x528 * x529)));
                    evalcond[1] = ((((-1.0) * x524 * x533)) + (((-1.0) * x526 * x532)) + ((cj32 * x526 * x530)) +
                                   (((-1.0) * x527 * x533)) + (((-1.0) * cj34)) + (((-1.0) * cj32 * x528 * x530)) +
                                   (((-1.0) * cj32 * x524 * x531)) + ((x528 * x532)) + (((-1.0) * x523 * x525)) +
                                   (((-1.0) * cj32 * x527 * x531)));
                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                    {
                      continue;
                    }
                  }

                  {
                    IkReal j35eval[2];
                    j35eval[0] = cj34;
                    j35eval[1] = IKsign(cj34);
                    if (IKabs(j35eval[0]) < 0.0000010000000000 || IKabs(j35eval[1]) < 0.0000010000000000)
                    {
                      {
                        IkReal evalcond[1];
                        bool bgotonextstatement = true;
                        do
                        {
                          evalcond[0] =
                              ((-3.14159265358979) +
                               (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j34)))), 6.28318530717959)));
                          if (IKabs(evalcond[0]) < 0.0000050000000000)
                          {
                            bgotonextstatement = false;
                            {
                              IkReal j35array[1], cj35array[1], sj35array[1];
                              bool j35valid[1] = { false };
                              _nj35 = 1;
                              IkReal x534 = ((15.4548538734773) * sj31);
                              IkReal x535 = ((4.14095299969423) * cj31);
                              IkReal x536 = (cj32 * py);
                              IkReal x537 = ((1.12633921591683e-5) * sj31);
                              IkReal x538 = ((15.4548538734773) * cj31);
                              IkReal x539 = (cj33 * sj32);
                              IkReal x540 = (cj33 * py);
                              IkReal x541 = ((4.20372025358582e-5) * sj33);
                              IkReal x542 = (px * sj33);
                              IkReal x543 = (cj31 * px);
                              IkReal x544 = ((4.20372025358582e-5) * cj33);
                              IkReal x545 = (sj32 * sj33);
                              IkReal x546 = ((0.240000005660958) * cj32);
                              IkReal x547 = ((15.9999999998816) * pz);
                              IkReal x548 = (px * sj31);
                              IkReal x549 = ((4.14095299969423) * sj31);
                              IkReal x550 = ((4.20372025358582e-5) * sj31);
                              IkReal x551 = (cj33 * px);
                              IkReal x552 = (py * sj33);
                              IkReal x553 = ((6.52800015397805e-7) * cj32);
                              IkReal x554 = ((4.3519999999678e-5) * pz);
                              IkReal x555 = ((1.12633921591683e-5) * cj31);
                              IkReal x556 = (py * x555);
                              IkReal x557 = (cj32 * x551);
                              if (IKabs(((((-2.25078449859284e-6) * sj33)) + (((-2.43647999998197) * x539)) +
                                         (((-1.0) * x545 * x554)) + ((cj32 * x541 * x548)) + (((-1.0) * x539 * x547)) +
                                         (((-1.0) * cj31 * x536 * x541)) + ((x542 * x549)) + ((sj33 * x553)) +
                                         (((-6.62722559995097e-6) * x545)) + (((-1.0) * cj33 * x536 * x538)) +
                                         ((cj33 * x546)) + (((-1.0) * cj33 * x536 * x549)) + ((x540 * x555)) +
                                         (((-1.0) * x540 * x550)) + ((x534 * x557)) + ((x534 * x552)) +
                                         (((-1.0) * cj32 * x542 * x555)) + (((-0.239999999993878) * cj33)) +
                                         (((-1.0) * x535 * x557)) + (((-1.0) * x535 * x552)) +
                                         (((-1.0) * sj33 * x536 * x537)) + ((x538 * x542)) + (((-1.0) * x543 * x544)) +
                                         (((-1.0) * x537 * x551)))) < IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs(((((-1.0) * x541 * x543)) + (((-1.0) * x537 * x542)) + ((cj33 * x536 * x537)) +
                                         (((-1.0) * x534 * x540)) + (((6.62722559995097e-6) * x539)) +
                                         (((-1.0) * cj33 * x553)) + (((-2.43647999998197) * x545)) +
                                         (((-1.0) * x545 * x547)) + ((sj33 * x546)) + ((cj32 * x534 * x542)) +
                                         (((-4.14095299969423) * cj33 * x548)) + (((-1.0) * x538 * x551)) +
                                         (((-0.239999999993878) * sj33)) + (((-1.0) * cj32 * x544 * x548)) +
                                         (((-1.0) * sj33 * x536 * x538)) +
                                         (((1.12633921591683e-5) * cj32 * cj33 * x543)) +
                                         (((2.25078449859284e-6) * cj33)) + ((x535 * x540)) +
                                         (((-1.0) * sj33 * x536 * x549)) + ((x539 * x554)) + ((x552 * x555)) +
                                         ((cj31 * x536 * x544)) + (((-1.0) * cj32 * x535 * x542)) +
                                         (((-1.0) * py * sj31 * x541)))) < IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs(IKsqr(((((-2.25078449859284e-6) * sj33)) + (((-2.43647999998197) * x539)) +
                                               (((-1.0) * x545 * x554)) + ((cj32 * x541 * x548)) +
                                               (((-1.0) * x539 * x547)) + (((-1.0) * cj31 * x536 * x541)) +
                                               ((x542 * x549)) + ((sj33 * x553)) + (((-6.62722559995097e-6) * x545)) +
                                               (((-1.0) * cj33 * x536 * x538)) + ((cj33 * x546)) +
                                               (((-1.0) * cj33 * x536 * x549)) + ((x540 * x555)) +
                                               (((-1.0) * x540 * x550)) + ((x534 * x557)) + ((x534 * x552)) +
                                               (((-1.0) * cj32 * x542 * x555)) + (((-0.239999999993878) * cj33)) +
                                               (((-1.0) * x535 * x557)) + (((-1.0) * x535 * x552)) +
                                               (((-1.0) * sj33 * x536 * x537)) + ((x538 * x542)) +
                                               (((-1.0) * x543 * x544)) + (((-1.0) * x537 * x551)))) +
                                        IKsqr(((((-1.0) * x541 * x543)) + (((-1.0) * x537 * x542)) +
                                               ((cj33 * x536 * x537)) + (((-1.0) * x534 * x540)) +
                                               (((6.62722559995097e-6) * x539)) + (((-1.0) * cj33 * x553)) +
                                               (((-2.43647999998197) * x545)) + (((-1.0) * x545 * x547)) +
                                               ((sj33 * x546)) + ((cj32 * x534 * x542)) +
                                               (((-4.14095299969423) * cj33 * x548)) + (((-1.0) * x538 * x551)) +
                                               (((-0.239999999993878) * sj33)) + (((-1.0) * cj32 * x544 * x548)) +
                                               (((-1.0) * sj33 * x536 * x538)) +
                                               (((1.12633921591683e-5) * cj32 * cj33 * x543)) +
                                               (((2.25078449859284e-6) * cj33)) + ((x535 * x540)) +
                                               (((-1.0) * sj33 * x536 * x549)) + ((x539 * x554)) + ((x552 * x555)) +
                                               ((cj31 * x536 * x544)) + (((-1.0) * cj32 * x535 * x542)) +
                                               (((-1.0) * py * sj31 * x541)))) -
                                        1) <= IKFAST_SINCOS_THRESH)
                                continue;
                              j35array[0] = IKatan2(
                                  ((((-2.25078449859284e-6) * sj33)) + (((-2.43647999998197) * x539)) +
                                   (((-1.0) * x545 * x554)) + ((cj32 * x541 * x548)) + (((-1.0) * x539 * x547)) +
                                   (((-1.0) * cj31 * x536 * x541)) + ((x542 * x549)) + ((sj33 * x553)) +
                                   (((-6.62722559995097e-6) * x545)) + (((-1.0) * cj33 * x536 * x538)) +
                                   ((cj33 * x546)) + (((-1.0) * cj33 * x536 * x549)) + ((x540 * x555)) +
                                   (((-1.0) * x540 * x550)) + ((x534 * x557)) + ((x534 * x552)) +
                                   (((-1.0) * cj32 * x542 * x555)) + (((-0.239999999993878) * cj33)) +
                                   (((-1.0) * x535 * x557)) + (((-1.0) * x535 * x552)) +
                                   (((-1.0) * sj33 * x536 * x537)) + ((x538 * x542)) + (((-1.0) * x543 * x544)) +
                                   (((-1.0) * x537 * x551))),
                                  ((((-1.0) * x541 * x543)) + (((-1.0) * x537 * x542)) + ((cj33 * x536 * x537)) +
                                   (((-1.0) * x534 * x540)) + (((6.62722559995097e-6) * x539)) +
                                   (((-1.0) * cj33 * x553)) + (((-2.43647999998197) * x545)) +
                                   (((-1.0) * x545 * x547)) + ((sj33 * x546)) + ((cj32 * x534 * x542)) +
                                   (((-4.14095299969423) * cj33 * x548)) + (((-1.0) * x538 * x551)) +
                                   (((-0.239999999993878) * sj33)) + (((-1.0) * cj32 * x544 * x548)) +
                                   (((-1.0) * sj33 * x536 * x538)) + (((1.12633921591683e-5) * cj32 * cj33 * x543)) +
                                   (((2.25078449859284e-6) * cj33)) + ((x535 * x540)) +
                                   (((-1.0) * sj33 * x536 * x549)) + ((x539 * x554)) + ((x552 * x555)) +
                                   ((cj31 * x536 * x544)) + (((-1.0) * cj32 * x535 * x542)) +
                                   (((-1.0) * py * sj31 * x541))));
                              sj35array[0] = IKsin(j35array[0]);
                              cj35array[0] = IKcos(j35array[0]);
                              if (j35array[0] > IKPI)
                              {
                                j35array[0] -= IK2PI;
                              }
                              else if (j35array[0] < -IKPI)
                              {
                                j35array[0] += IK2PI;
                              }
                              j35valid[0] = true;
                              for (int ij35 = 0; ij35 < 1; ++ij35)
                              {
                                if (!j35valid[ij35])
                                {
                                  continue;
                                }
                                _ij35[0] = ij35;
                                _ij35[1] = -1;
                                for (int iij35 = ij35 + 1; iij35 < 1; ++iij35)
                                {
                                  if (j35valid[iij35] &&
                                      IKabs(cj35array[ij35] - cj35array[iij35]) < IKFAST_SOLUTION_THRESH &&
                                      IKabs(sj35array[ij35] - sj35array[iij35]) < IKFAST_SOLUTION_THRESH)
                                  {
                                    j35valid[iij35] = false;
                                    _ij35[1] = iij35;
                                    break;
                                  }
                                }
                                j35 = j35array[ij35];
                                cj35 = cj35array[ij35];
                                sj35 = sj35array[ij35];
                                {
                                  IkReal evalcond[2];
                                  IkReal x558 = IKcos(j35);
                                  IkReal x559 = IKsin(j35);
                                  IkReal x560 = (cj32 * sj31);
                                  IkReal x561 = ((0.258809562482804) * cj33);
                                  IkReal x562 = ((0.965928367099476) * sj33);
                                  IkReal x563 = (px * sj31);
                                  IkReal x564 = (py * sj31);
                                  IkReal x565 = ((0.258809562482804) * sj33);
                                  IkReal x566 = (cj33 * sj32);
                                  IkReal x567 = (cj32 * cj33);
                                  IkReal x568 = (sj32 * sj33);
                                  IkReal x569 = (cj31 * py);
                                  IkReal x570 = (cj31 * cj32 * px);
                                  IkReal x571 = ((0.965928367099476) * cj33 * px);
                                  evalcond[0] =
                                      (((x561 * x570)) + (((0.0625) * x559)) + ((x565 * x569)) + (((0.15228) * x566)) +
                                       (((-1.0) * cj31 * px * x562)) + ((py * x560 * x561)) + (((-1.0) * x560 * x571)) +
                                       (((-1.0) * x562 * x564)) + (((0.965928367099476) * x567 * x569)) +
                                       (((-0.0150000003539208) * x567)) + (((-1.0) * x563 * x565)) + ((pz * x566)) +
                                       (((-1.7e-7) * x558)) + (((9.9874031163093e-8) * sj33)) + (((0.015) * cj33)));
                                  evalcond[1] =
                                      (((px * x560 * x562)) + (((-0.015) * sj33)) + (((9.9874031163093e-8) * cj33)) +
                                       ((x561 * x569)) + (((-1.0) * x565 * x570)) + (((-1.0) * pz * x568)) +
                                       (((-1.0) * py * x560 * x565)) + (((-0.0625) * x558)) + (((-0.15228) * x568)) +
                                       (((-1.7e-7) * x559)) + (((0.0150000003539208) * cj32 * sj33)) +
                                       (((-1.0) * cj32 * x562 * x569)) + (((-1.0) * x561 * x563)) +
                                       (((-0.965928367099476) * cj33 * x564)) + (((-1.0) * cj31 * x571)));
                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                  {
                                    continue;
                                  }
                                }

                                {
                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                  vinfos[0].jointtype = 1;
                                  vinfos[0].foffset = j29;
                                  vinfos[0].indices[0] = _ij29[0];
                                  vinfos[0].indices[1] = _ij29[1];
                                  vinfos[0].maxsolutions = _nj29;
                                  vinfos[1].jointtype = 1;
                                  vinfos[1].foffset = j30;
                                  vinfos[1].indices[0] = _ij30[0];
                                  vinfos[1].indices[1] = _ij30[1];
                                  vinfos[1].maxsolutions = _nj30;
                                  vinfos[2].jointtype = 1;
                                  vinfos[2].foffset = j31;
                                  vinfos[2].indices[0] = _ij31[0];
                                  vinfos[2].indices[1] = _ij31[1];
                                  vinfos[2].maxsolutions = _nj31;
                                  vinfos[3].jointtype = 1;
                                  vinfos[3].foffset = j32;
                                  vinfos[3].indices[0] = _ij32[0];
                                  vinfos[3].indices[1] = _ij32[1];
                                  vinfos[3].maxsolutions = _nj32;
                                  vinfos[4].jointtype = 1;
                                  vinfos[4].foffset = j33;
                                  vinfos[4].indices[0] = _ij33[0];
                                  vinfos[4].indices[1] = _ij33[1];
                                  vinfos[4].maxsolutions = _nj33;
                                  vinfos[5].jointtype = 1;
                                  vinfos[5].foffset = j34;
                                  vinfos[5].indices[0] = _ij34[0];
                                  vinfos[5].indices[1] = _ij34[1];
                                  vinfos[5].maxsolutions = _nj34;
                                  vinfos[6].jointtype = 1;
                                  vinfos[6].foffset = j35;
                                  vinfos[6].indices[0] = _ij35[0];
                                  vinfos[6].indices[1] = _ij35[1];
                                  vinfos[6].maxsolutions = _nj35;
                                  std::vector<int> vfree(0);
                                  solutions.AddSolution(vinfos, vfree);
                                }
                              }
                            }
                          }
                        } while (0);
                        if (bgotonextstatement)
                        {
                          bool bgotonextstatement = true;
                          do
                          {
                            evalcond[0] =
                                ((-3.14159265358979) +
                                 (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j34)))), 6.28318530717959)));
                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                            {
                              bgotonextstatement = false;
                              {
                                IkReal j35array[1], cj35array[1], sj35array[1];
                                bool j35valid[1] = { false };
                                _nj35 = 1;
                                IkReal x572 = (cj33 * sj32);
                                IkReal x573 = ((4.3519999999678e-5) * pz);
                                IkReal x574 = ((15.4548538734773) * px);
                                IkReal x575 = ((1.12633921591683e-5) * py);
                                IkReal x576 = (sj31 * sj33);
                                IkReal x577 = ((4.20372025358582e-5) * py);
                                IkReal x578 = ((1.12633921591683e-5) * px);
                                IkReal x579 = (cj33 * sj31);
                                IkReal x580 = ((15.4548538734773) * py);
                                IkReal x581 = (sj32 * sj33);
                                IkReal x582 = ((0.240000005660958) * cj32);
                                IkReal x583 = ((15.9999999998816) * pz);
                                IkReal x584 = ((4.20372025358582e-5) * cj32);
                                IkReal x585 = ((6.52800015397805e-7) * cj32);
                                IkReal x586 = ((4.14095299969423) * py);
                                IkReal x587 = (cj31 * cj33);
                                IkReal x588 = ((4.14095299969423) * px);
                                IkReal x589 = (cj31 * sj33);
                                IkReal x590 = (cj31 * x575);
                                IkReal x591 = (cj32 * x579);
                                IkReal x592 = (py * x587);
                                IkReal x593 = ((4.20372025358582e-5) * cj31 * px);
                                IkReal x594 = (cj32 * py * x589);
                                if (IKabs((((cj32 * x578 * x589)) + (((-1.0) * cj32 * x580 * x587)) +
                                           (((-1.0) * x572 * x583)) + (((6.62722559995097e-6) * x581)) +
                                           (((-1.0) * x586 * x591)) + (((-1.0) * cj32 * x587 * x588)) +
                                           (((-9.45184498602496e-7) * sj33)) + (((-1.0) * sj33 * x585)) +
                                           (((-1.0) * px * x576 * x584)) + ((cj33 * x582)) + ((x578 * x579)) +
                                           ((cj32 * x575 * x576)) + (((-0.240000000002571) * cj33)) +
                                           (((-1.0) * x586 * x589)) + ((x574 * x589)) + ((x573 * x581)) +
                                           ((x577 * x579)) + (((4.20372025358582e-5) * px * x587)) +
                                           (((-1.0) * x575 * x587)) + ((x576 * x580)) + ((x576 * x588)) +
                                           ((cj32 * x577 * x589)) + (((-2.43647999998197) * x572)) + ((x574 * x591)))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs((((cj32 * x578 * x587)) + (((-4.20372025358582e-5) * px * x589)) +
                                           ((x581 * x583)) + ((x579 * x588)) + ((x579 * x580)) +
                                           (((0.240000000002571) * sj33)) + (((-1.0) * sj33 * x582)) +
                                           (((-1.0) * x586 * x587)) + (((6.62722559995097e-6) * x572)) +
                                           (((-1.0) * x576 * x577)) + (((-1.0) * x576 * x578)) + ((x574 * x587)) +
                                           ((x575 * x589)) + (((-1.0) * px * x579 * x584)) + ((cj32 * x588 * x589)) +
                                           (((-1.0) * cj32 * x574 * x576)) + ((cj32 * x576 * x586)) +
                                           (((-1.0) * cj33 * x585)) + (((-9.45184498602496e-7) * cj33)) +
                                           ((cj32 * x577 * x587)) + ((x572 * x573)) + (((2.43647999998197) * x581)) +
                                           ((x575 * x591)) + ((cj32 * x580 * x589)))) < IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(IKsqr((((cj32 * x578 * x589)) + (((-1.0) * cj32 * x580 * x587)) +
                                                 (((-1.0) * x572 * x583)) + (((6.62722559995097e-6) * x581)) +
                                                 (((-1.0) * x586 * x591)) + (((-1.0) * cj32 * x587 * x588)) +
                                                 (((-9.45184498602496e-7) * sj33)) + (((-1.0) * sj33 * x585)) +
                                                 (((-1.0) * px * x576 * x584)) + ((cj33 * x582)) + ((x578 * x579)) +
                                                 ((cj32 * x575 * x576)) + (((-0.240000000002571) * cj33)) +
                                                 (((-1.0) * x586 * x589)) + ((x574 * x589)) + ((x573 * x581)) +
                                                 ((x577 * x579)) + (((4.20372025358582e-5) * px * x587)) +
                                                 (((-1.0) * x575 * x587)) + ((x576 * x580)) + ((x576 * x588)) +
                                                 ((cj32 * x577 * x589)) + (((-2.43647999998197) * x572)) +
                                                 ((x574 * x591)))) +
                                          IKsqr((((cj32 * x578 * x587)) + (((-4.20372025358582e-5) * px * x589)) +
                                                 ((x581 * x583)) + ((x579 * x588)) + ((x579 * x580)) +
                                                 (((0.240000000002571) * sj33)) + (((-1.0) * sj33 * x582)) +
                                                 (((-1.0) * x586 * x587)) + (((6.62722559995097e-6) * x572)) +
                                                 (((-1.0) * x576 * x577)) + (((-1.0) * x576 * x578)) + ((x574 * x587)) +
                                                 ((x575 * x589)) + (((-1.0) * px * x579 * x584)) +
                                                 ((cj32 * x588 * x589)) + (((-1.0) * cj32 * x574 * x576)) +
                                                 ((cj32 * x576 * x586)) + (((-1.0) * cj33 * x585)) +
                                                 (((-9.45184498602496e-7) * cj33)) + ((cj32 * x577 * x587)) +
                                                 ((x572 * x573)) + (((2.43647999998197) * x581)) + ((x575 * x591)) +
                                                 ((cj32 * x580 * x589)))) -
                                          1) <= IKFAST_SINCOS_THRESH)
                                  continue;
                                j35array[0] =
                                    IKatan2((((cj32 * x578 * x589)) + (((-1.0) * cj32 * x580 * x587)) +
                                             (((-1.0) * x572 * x583)) + (((6.62722559995097e-6) * x581)) +
                                             (((-1.0) * x586 * x591)) + (((-1.0) * cj32 * x587 * x588)) +
                                             (((-9.45184498602496e-7) * sj33)) + (((-1.0) * sj33 * x585)) +
                                             (((-1.0) * px * x576 * x584)) + ((cj33 * x582)) + ((x578 * x579)) +
                                             ((cj32 * x575 * x576)) + (((-0.240000000002571) * cj33)) +
                                             (((-1.0) * x586 * x589)) + ((x574 * x589)) + ((x573 * x581)) +
                                             ((x577 * x579)) + (((4.20372025358582e-5) * px * x587)) +
                                             (((-1.0) * x575 * x587)) + ((x576 * x580)) + ((x576 * x588)) +
                                             ((cj32 * x577 * x589)) + (((-2.43647999998197) * x572)) + ((x574 * x591))),
                                            (((cj32 * x578 * x587)) + (((-4.20372025358582e-5) * px * x589)) +
                                             ((x581 * x583)) + ((x579 * x588)) + ((x579 * x580)) +
                                             (((0.240000000002571) * sj33)) + (((-1.0) * sj33 * x582)) +
                                             (((-1.0) * x586 * x587)) + (((6.62722559995097e-6) * x572)) +
                                             (((-1.0) * x576 * x577)) + (((-1.0) * x576 * x578)) + ((x574 * x587)) +
                                             ((x575 * x589)) + (((-1.0) * px * x579 * x584)) + ((cj32 * x588 * x589)) +
                                             (((-1.0) * cj32 * x574 * x576)) + ((cj32 * x576 * x586)) +
                                             (((-1.0) * cj33 * x585)) + (((-9.45184498602496e-7) * cj33)) +
                                             ((cj32 * x577 * x587)) + ((x572 * x573)) + (((2.43647999998197) * x581)) +
                                             ((x575 * x591)) + ((cj32 * x580 * x589))));
                                sj35array[0] = IKsin(j35array[0]);
                                cj35array[0] = IKcos(j35array[0]);
                                if (j35array[0] > IKPI)
                                {
                                  j35array[0] -= IK2PI;
                                }
                                else if (j35array[0] < -IKPI)
                                {
                                  j35array[0] += IK2PI;
                                }
                                j35valid[0] = true;
                                for (int ij35 = 0; ij35 < 1; ++ij35)
                                {
                                  if (!j35valid[ij35])
                                  {
                                    continue;
                                  }
                                  _ij35[0] = ij35;
                                  _ij35[1] = -1;
                                  for (int iij35 = ij35 + 1; iij35 < 1; ++iij35)
                                  {
                                    if (j35valid[iij35] &&
                                        IKabs(cj35array[ij35] - cj35array[iij35]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj35array[ij35] - sj35array[iij35]) < IKFAST_SOLUTION_THRESH)
                                    {
                                      j35valid[iij35] = false;
                                      _ij35[1] = iij35;
                                      break;
                                    }
                                  }
                                  j35 = j35array[ij35];
                                  cj35 = cj35array[ij35];
                                  sj35 = sj35array[ij35];
                                  {
                                    IkReal evalcond[2];
                                    IkReal x595 = IKcos(j35);
                                    IkReal x596 = IKsin(j35);
                                    IkReal x597 = (cj32 * sj31);
                                    IkReal x598 = ((0.258809562482804) * cj33);
                                    IkReal x599 = ((0.965928367099476) * sj33);
                                    IkReal x600 = (px * sj31);
                                    IkReal x601 = (py * sj31);
                                    IkReal x602 = (cj33 * sj32);
                                    IkReal x603 = (cj32 * cj33);
                                    IkReal x604 = ((0.258809562482804) * sj33);
                                    IkReal x605 = (sj32 * sj33);
                                    IkReal x606 = (cj31 * py);
                                    IkReal x607 = (cj31 * cj32 * px);
                                    IkReal x608 = ((0.965928367099476) * cj33 * px);
                                    evalcond[0] =
                                        ((((-0.0150000003539208) * x603)) + (((0.0625) * x596)) + ((x604 * x606)) +
                                         (((-1.0) * x597 * x608)) + (((0.965928367099476) * x603 * x606)) +
                                         (((-1.0) * cj31 * px * x599)) + (((-1.7e-7) * x595)) +
                                         (((-1.0) * x599 * x601)) + (((-1.0) * x600 * x604)) + ((py * x597 * x598)) +
                                         ((pz * x602)) + (((9.9874031163093e-8) * sj33)) + (((0.15228) * x602)) +
                                         (((0.015) * cj33)) + ((x598 * x607)));
                                    evalcond[1] =
                                        ((((1.7e-7) * x596)) + (((0.0625) * x595)) + (((-1.0) * cj31 * x608)) +
                                         (((-0.015) * sj33)) + (((-1.0) * x604 * x607)) + (((-1.0) * pz * x605)) +
                                         (((9.9874031163093e-8) * cj33)) + (((-1.0) * x598 * x600)) +
                                         ((px * x597 * x599)) + (((-1.0) * cj32 * x599 * x606)) +
                                         (((-0.15228) * x605)) + (((0.0150000003539208) * cj32 * sj33)) +
                                         (((-0.965928367099476) * cj33 * x601)) + (((-1.0) * py * x597 * x604)) +
                                         ((x598 * x606)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                    {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j29;
                                    vinfos[0].indices[0] = _ij29[0];
                                    vinfos[0].indices[1] = _ij29[1];
                                    vinfos[0].maxsolutions = _nj29;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j30;
                                    vinfos[1].indices[0] = _ij30[0];
                                    vinfos[1].indices[1] = _ij30[1];
                                    vinfos[1].maxsolutions = _nj30;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j31;
                                    vinfos[2].indices[0] = _ij31[0];
                                    vinfos[2].indices[1] = _ij31[1];
                                    vinfos[2].maxsolutions = _nj31;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j32;
                                    vinfos[3].indices[0] = _ij32[0];
                                    vinfos[3].indices[1] = _ij32[1];
                                    vinfos[3].maxsolutions = _nj32;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j33;
                                    vinfos[4].indices[0] = _ij33[0];
                                    vinfos[4].indices[1] = _ij33[1];
                                    vinfos[4].maxsolutions = _nj33;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j34;
                                    vinfos[5].indices[0] = _ij34[0];
                                    vinfos[5].indices[1] = _ij34[1];
                                    vinfos[5].maxsolutions = _nj34;
                                    vinfos[6].jointtype = 1;
                                    vinfos[6].foffset = j35;
                                    vinfos[6].indices[0] = _ij35[0];
                                    vinfos[6].indices[1] = _ij35[1];
                                    vinfos[6].maxsolutions = _nj35;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          } while (0);
                          if (bgotonextstatement)
                          {
                            bool bgotonextstatement = true;
                            do
                            {
                              if (1)
                              {
                                bgotonextstatement = false;
                                continue;  // branch miss [j35]
                              }
                            } while (0);
                            if (bgotonextstatement)
                            {
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        IkReal j35array[1], cj35array[1], sj35array[1];
                        bool j35valid[1] = { false };
                        _nj35 = 1;
                        IkReal x609 = (px * sj31);
                        IkReal x610 = ((1700000000.0) * pz);
                        IkReal x611 = (cj33 * cj34);
                        IkReal x612 = (cj31 * py);
                        IkReal x613 = (cj31 * px);
                        IkReal x614 = ((439976256.220767) * sj32);
                        IkReal x615 = ((603705229437172.0) * cj32);
                        IkReal x616 = (cj34 * sj33);
                        IkReal x617 = ((625000000000000.0) * pz);
                        IkReal x618 = ((603705229437172.0) * sj32);
                        IkReal x619 = (py * sj31);
                        IkReal x620 = ((1642078224.06911) * cj32);
                        IkReal x621 = ((161755976551753.0) * sj32);
                        IkReal x622 = ((1642078224.06911) * sj32);
                        IkReal x623 = ((439976256.220767) * x616);
                        IkReal x624 = ((161755976551753.0) * x616);
                        IkReal x625 = (cj32 * x619);
                        CheckValue<IkReal> x626 = IKPowWithIntegerCheck(IKsign(cj34), -1);
                        if (!x626.valid)
                        {
                          continue;
                        }
                        CheckValue<IkReal> x627 = IKatan2WithCheck(
                            IkReal(((-233409932.0) + (((603705229437172.0) * x616 * x619)) +
                                    (((-161755976551753.0) * cj32 * x611 * x613)) + (((-258876000.0) * cj32)) +
                                    (((9375000221200.52) * cj32 * x611)) + (((-9375000000000.0) * x611)) +
                                    (((-1.0) * cj32 * x610)) + ((x609 * x611 * x615)) + ((x609 * x624)) +
                                    (((-1.0) * sj32 * x611 * x617)) + (((-25500000.6016654) * sj32)) + ((x612 * x622)) +
                                    (((-62421269.4769331) * x616)) + ((x613 * x614)) + ((x614 * x619)) +
                                    (((603705229437172.0) * x613 * x616)) + (((-1.0) * x612 * x624)) +
                                    (((-1.0) * x609 * x622)) + (((-1.0) * x611 * x612 * x615)) +
                                    (((27200000.0) * sj34)) + (((-161755976551753.0) * x611 * x625)) +
                                    (((-95175000000000.0) * sj32 * x611)))),
                            IkReal(((-85812475000000.0) + (((25500000.0) * x611)) + (((-1.0) * x609 * x618)) +
                                    (((-25500000.6016654) * cj32 * x611)) + (((-9375000221200.52) * sj32)) +
                                    ((sj32 * x610 * x611)) + ((x619 * x621)) + (((10000000000000.0) * sj34)) +
                                    ((x611 * x612 * x620)) + (((-1.0) * cj32 * x617)) +
                                    (((258876000.0) * sj32 * x611)) + ((x613 * x621)) + (((169.785852977258) * x616)) +
                                    ((x612 * x618)) + (((439976256.220767) * cj32 * x611 * x613)) + ((x612 * x623)) +
                                    (((-1642078224.06911) * x616 * x619)) + (((-1.0) * x609 * x623)) +
                                    (((-1.0) * x609 * x611 * x620)) + (((-95175000000000.0) * cj32)) +
                                    (((439976256.220767) * x611 * x625)) + (((-1642078224.06911) * x613 * x616)))),
                            IKFAST_ATAN2_MAGTHRESH);
                        if (!x627.valid)
                        {
                          continue;
                        }
                        j35array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x626.value))) + (x627.value));
                        sj35array[0] = IKsin(j35array[0]);
                        cj35array[0] = IKcos(j35array[0]);
                        if (j35array[0] > IKPI)
                        {
                          j35array[0] -= IK2PI;
                        }
                        else if (j35array[0] < -IKPI)
                        {
                          j35array[0] += IK2PI;
                        }
                        j35valid[0] = true;
                        for (int ij35 = 0; ij35 < 1; ++ij35)
                        {
                          if (!j35valid[ij35])
                          {
                            continue;
                          }
                          _ij35[0] = ij35;
                          _ij35[1] = -1;
                          for (int iij35 = ij35 + 1; iij35 < 1; ++iij35)
                          {
                            if (j35valid[iij35] && IKabs(cj35array[ij35] - cj35array[iij35]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj35array[ij35] - sj35array[iij35]) < IKFAST_SOLUTION_THRESH)
                            {
                              j35valid[iij35] = false;
                              _ij35[1] = iij35;
                              break;
                            }
                          }
                          j35 = j35array[ij35];
                          cj35 = cj35array[ij35];
                          sj35 = sj35array[ij35];
                          {
                            IkReal evalcond[3];
                            IkReal x628 = IKsin(j35);
                            IkReal x629 = IKcos(j35);
                            IkReal x630 = (cj32 * sj31);
                            IkReal x631 = ((0.258809562482804) * cj33);
                            IkReal x632 = ((0.965928367099476) * px);
                            IkReal x633 = (sj31 * sj32);
                            IkReal x634 = (px * sj31);
                            IkReal x635 = (py * sj33);
                            IkReal x636 = ((0.965928367099476) * sj31);
                            IkReal x637 = (cj33 * sj32);
                            IkReal x638 = (cj32 * cj33);
                            IkReal x639 = (sj32 * sj33);
                            IkReal x640 = ((0.258809562482804) * sj33);
                            IkReal x641 = ((0.965928367099476) * cj31);
                            IkReal x642 = ((0.258809562482804) * cj31);
                            IkReal x643 = ((1.7e-7) * x628);
                            IkReal x644 = (cj31 * cj32 * px);
                            IkReal x645 = ((0.0625) * x629);
                            evalcond[0] = ((0.13729996) + (((-1.0) * py * sj32 * x641)) + ((cj34 * x643)) +
                                           ((cj34 * x645)) + ((cj32 * pz)) + (((0.15228) * cj32)) + ((x632 * x633)) +
                                           (((-1.0) * px * sj32 * x642)) + (((-0.016) * sj34)) +
                                           (((0.0150000003539208) * sj32)) + (((-0.258809562482804) * py * x633)));
                            evalcond[1] =
                                (((x635 * x642)) + ((pz * x637)) + (((0.15228) * x637)) + (((-1.7e-7) * x629)) +
                                 ((py * x638 * x641)) + (((-0.0150000003539208) * x638)) + (((-1.0) * x635 * x636)) +
                                 (((-1.0) * cj33 * x630 * x632)) + ((x631 * x644)) + (((0.0625) * x628)) +
                                 ((py * x630 * x631)) + (((9.9874031163093e-8) * sj33)) +
                                 (((-1.0) * cj31 * sj33 * x632)) + (((-1.0) * x634 * x640)) + (((0.015) * cj33)));
                            evalcond[2] =
                                ((((-0.258809562482804) * x630 * x635)) + (((-1.0) * cj31 * cj33 * x632)) +
                                 (((-1.0) * x631 * x634)) + (((-1.0) * pz * x639)) + (((-1.0) * cj33 * py * x636)) +
                                 (((-0.015) * sj33)) + (((-1.0) * x640 * x644)) + (((-1.0) * cj32 * x635 * x641)) +
                                 (((9.9874031163093e-8) * cj33)) + (((-0.016) * cj34)) + ((cj31 * py * x631)) +
                                 (((-0.15228) * x639)) + (((-1.0) * sj34 * x645)) + (((-1.0) * sj34 * x643)) +
                                 ((sj33 * x630 * x632)) + (((0.0150000003539208) * cj32 * sj33)));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                            {
                              continue;
                            }
                          }

                          {
                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                            vinfos[0].jointtype = 1;
                            vinfos[0].foffset = j29;
                            vinfos[0].indices[0] = _ij29[0];
                            vinfos[0].indices[1] = _ij29[1];
                            vinfos[0].maxsolutions = _nj29;
                            vinfos[1].jointtype = 1;
                            vinfos[1].foffset = j30;
                            vinfos[1].indices[0] = _ij30[0];
                            vinfos[1].indices[1] = _ij30[1];
                            vinfos[1].maxsolutions = _nj30;
                            vinfos[2].jointtype = 1;
                            vinfos[2].foffset = j31;
                            vinfos[2].indices[0] = _ij31[0];
                            vinfos[2].indices[1] = _ij31[1];
                            vinfos[2].maxsolutions = _nj31;
                            vinfos[3].jointtype = 1;
                            vinfos[3].foffset = j32;
                            vinfos[3].indices[0] = _ij32[0];
                            vinfos[3].indices[1] = _ij32[1];
                            vinfos[3].maxsolutions = _nj32;
                            vinfos[4].jointtype = 1;
                            vinfos[4].foffset = j33;
                            vinfos[4].indices[0] = _ij33[0];
                            vinfos[4].indices[1] = _ij33[1];
                            vinfos[4].maxsolutions = _nj33;
                            vinfos[5].jointtype = 1;
                            vinfos[5].foffset = j34;
                            vinfos[5].indices[0] = _ij34[0];
                            vinfos[5].indices[1] = _ij34[1];
                            vinfos[5].maxsolutions = _nj34;
                            vinfos[6].jointtype = 1;
                            vinfos[6].foffset = j35;
                            vinfos[6].indices[0] = _ij35[0];
                            vinfos[6].indices[1] = _ij35[1];
                            vinfos[6].maxsolutions = _nj35;
                            std::vector<int> vfree(0);
                            solutions.AddSolution(vinfos, vfree);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree,
                          IkSolutionListBase<IkReal>& solutions)
{
  IKSolver solver;
  return solver.ComputeIk(eetrans, eerot, pfree, solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree,
                           IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
  IKSolver solver;
  return solver.ComputeIk(eetrans, eerot, pfree, solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
  return "5ccb69c0197e38c2a75cb16ec4d8f65e";
}

IKFAST_API const char* GetIkFastVersion()
{
  return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
}  // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
  if (argc != 12 + GetNumFreeParameters() + 1)
  {
    printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
           "Returns the ik solutions given the transformation of the end effector specified by\n"
           "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
           "There are %d free parameters that have to be specified.\n\n",
           GetNumFreeParameters());
    return 1;
  }

  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(GetNumFreeParameters());
  IkReal eerot[9], eetrans[3];
  eerot[0] = atof(argv[1]);
  eerot[1] = atof(argv[2]);
  eerot[2] = atof(argv[3]);
  eetrans[0] = atof(argv[4]);
  eerot[3] = atof(argv[5]);
  eerot[4] = atof(argv[6]);
  eerot[5] = atof(argv[7]);
  eetrans[1] = atof(argv[8]);
  eerot[6] = atof(argv[9]);
  eerot[7] = atof(argv[10]);
  eerot[8] = atof(argv[11]);
  eetrans[2] = atof(argv[12]);
  for (std::size_t i = 0; i < vfree.size(); ++i)
    vfree[i] = atof(argv[13 + i]);
  bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

  if (!bSuccess)
  {
    fprintf(stderr, "Failed to get ik solution\n");
    return -1;
  }

  printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for (std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
  {
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
    printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0], vsolfree.size() > 0 ? &vsolfree[0] : NULL);
    for (std::size_t j = 0; j < solvalues.size(); ++j)
      printf("%.15f, ", solvalues[j]);
    printf("\n");
  }
  return 0;
}

#endif
